(0 e 0 ((Goal unlock :?chest :?) nil nil) "Hold-chest-to-put-on-floor")
(1 i 1 ((Thing :? :?chest :?surf light) (:?surf) #object[clojure.core$eval3432$fn__3433 0xf3430ed "clojure.core$eval3432$fn__3433@f3430ed"]))
(2 i 2 ((Monkey :?thing :? :?) (:?chest :?thing) #object[clojure.core$eval3436$fn__3437 0x11ea36c "clojure.core$eval3436$fn__3437@11ea36c"]))
(3 x 3 (not (Goal hold :?chest :?) nil nil) "Hold-chest-to-put-on-floor" 0 (:?chest) #object[clojure.core$eval3440$fn__3441 0x5ce2364a "clojure.core$eval3440$fn__3441@5ce2364a"])
(4 e 0 ((Goal unlock :?chest :?) nil nil) "Put-chest-on-floor")
(5 i 2 ((Monkey :?chest :?place :?on) nil nil))
(6 x 4 ((Thing :? :?chest :? :?) nil nil) "Put-chest-on-floor" 0 (:?chest :?place :?on :?fids) #object[clojure.core$eval3444$fn__3445 0x689396a9 "clojure.core$eval3444$fn__3445@689396a9"])
(7 e 0 ((Goal unlock :?obj :?) nil nil) "Get-key-to-unlock")
(8 i 5 ((Thing :? :?obj floor :?) nil nil))
(9 i 6 ((Chest :? :?obj :?key) nil nil))
(10 i 2 ((Monkey :?thing :? :?) (:?thing :?key) #object[clojure.core$eval3448$fn__3449 0x296080fb "clojure.core$eval3448$fn__3449@296080fb"]))
(11 x 3 (not (Goal hold :?key :?) nil nil) "Get-key-to-unlock" 0 (:?key) #object[clojure.core$eval3452$fn__3453 0x534204cb "clojure.core$eval3452$fn__3453@534204cb"])
(12 e 0 ((Goal unlock :?chest :?) nil nil) "Move-to-chest-with-key")
(13 i 2 ((Monkey :?key :?mplace :?) nil nil))
(14 i 5 ((Thing :?cplace :?chest floor :?) (:?cplace :?mplace) #object[clojure.core$eval3456$fn__3457 0x772effee "clojure.core$eval3456$fn__3457@772effee"]))
(15 i 6 ((Chest :? :?chest :?key) nil nil))
(16 x 7 (not (Goal walk-to :?cplace :?) nil nil) "Move-to-chest-with-key" 0 (:?cplace) #object[clojure.core$eval3460$fn__3461 0x147b09a1 "clojure.core$eval3460$fn__3461@147b09a1"])
(17 e 0 ((Goal unlock :?name :?) nil nil) "Unlock-chest-with-key")
(18 i 6 ((Chest :?contents :?name :?key) nil nil))
(19 i 4 ((Thing :?place :?name :?on :?) nil nil))
(20 x 2 ((Monkey :?key :?place :?on) nil nil) "Unlock-chest-with-key" 0 (:?place :?fids :?contents :?name :?key) #object[clojure.core$eval3464$fn__3465 0x68eaa70a "clojure.core$eval3464$fn__3465@68eaa70a"])
(21 e 3 ((Goal hold :?obj :?) nil nil) "Unlock-chest-to-hold-object")
(22 i 6 ((Chest :?obj :?chest :?) nil nil))
(23 x 0 (not (Goal unlock :?chest :?) nil nil) "Unlock-chest-to-hold-object" 0 (:?chest) #object[clojure.core$eval3468$fn__3469 0x1224d7e2 "clojure.core$eval3468$fn__3469@1224d7e2"])
(24 e 3 ((Goal hold :?obj :?) nil nil) "Use-ladder-to-hold")
(25 i 8 ((Thing :?place :?obj ceiling light) nil nil))
(26 i 9 (not (Thing :?place ladder :? :?) nil nil))
(27 x 10 (not (Goal move ladder :?place) nil nil) "Use-ladder-to-hold" 0 (:?place) #object[clojure.core$eval3472$fn__3473 0x18646892 "clojure.core$eval3472$fn__3473@18646892"])
(28 e 3 ((Goal hold :?obj :?) nil nil) "Climb-ladder-to-hold")
(29 i 8 ((Thing :?place :?obj ceiling light) nil nil))
(30 i 11 ((Thing :?place ladder floor :?) nil nil))
(31 i 2 ((Monkey :? :? :?s) (:?s) #object[clojure.core$eval3476$fn__3477 0x5e000b8 "clojure.core$eval3476$fn__3477@5e000b8"]))
(32 x 12 (not (Goal on ladder :?) nil nil) "Climb-ladder-to-hold" 0 () #object[clojure.core$eval3480$fn__3481 0x41c12b52 "clojure.core$eval3480$fn__3481@41c12b52"])
(33 e 3 ((Goal hold :?name :?) nil nil) "Grab-object-from-ladder")
(34 i 8 ((Thing :?place :?name ceiling light) nil nil))
(35 i 9 ((Thing :?place ladder :? :?) nil nil))
(36 x 13 ((Monkey blank :?place ladder) nil nil) "Grab-object-from-ladder" 0 (:?fids :?name) #object[clojure.core$eval3484$fn__3485 0xf70e78e "clojure.core$eval3484$fn__3485@f70e78e"])
(37 e 3 ((Goal hold :?obj :?) nil nil) "Climb-to-hold")
(38 i 1 ((Thing :?place :?obj :?on light) (:?on) #object[clojure.core$eval3488$fn__3489 0x6ab78fc2 "clojure.core$eval3488$fn__3489@6ab78fc2"]))
(39 i 2 ((Monkey :? :?place :?surf) (:?on :?surf) #object[clojure.core$eval3492$fn__3493 0x6ef2ab0c "clojure.core$eval3492$fn__3493@6ef2ab0c"]))
(40 x 14 (not (Goal on :?on :?) nil nil) "Climb-to-hold" 0 (:?on) #object[clojure.core$eval3496$fn__3497 0x3f55d152 "clojure.core$eval3496$fn__3497@3f55d152"])
(41 e 3 ((Goal hold :?obj :?) nil nil) "Walk-to-hold")
(42 i 1 ((Thing :?place :?obj :?surf light) (:?surf) #object[clojure.core$eval3500$fn__3501 0x11011e92 "clojure.core$eval3500$fn__3501@11011e92"]))
(43 i 2 ((Monkey :? :?loc :?) (:?place :?loc) #object[clojure.core$eval3504$fn__3505 0x3de92639 "clojure.core$eval3504$fn__3505@3de92639"]))
(44 x 7 (not (Goal walk-to :?place :?) nil nil) "Walk-to-hold" 0 (:?place) #object[clojure.core$eval3508$fn__3509 0x4dac0a15 "clojure.core$eval3508$fn__3509@4dac0a15"])
(45 e 3 ((Goal hold :?obj :?) nil nil) "Drop-to-hold")
(46 i 1 ((Thing :?place :?obj :?on light) nil nil))
(47 i 2 ((Monkey :?hold :?place :?on) (:?hold) #object[clojure.core$eval3512$fn__3513 0x28db391a "clojure.core$eval3512$fn__3513@28db391a"]))
(48 x 15 (not (Goal hold blank :?) nil nil) "Drop-to-hold" 0 () #object[clojure.core$eval3516$fn__3517 0x52c182a6 "clojure.core$eval3516$fn__3517@52c182a6"])
(49 e 3 ((Goal hold :?name :?) nil nil) "Grab-object")
(50 i 1 ((Thing :?place :?name :?on light) nil nil))
(51 x 16 ((Monkey blank :?place :?on) nil nil) "Grab-object" 0 (:?fids :?name) #object[clojure.core$eval3520$fn__3521 0x47922d1c "clojure.core$eval3520$fn__3521@47922d1c"])
(52 e 15 ((Goal hold blank :?) nil nil) "Drop-object")
(53 i 2 ((Monkey :?name :?place :?on) (:?name) #object[clojure.core$eval3524$fn__3525 0x60ee108e "clojure.core$eval3524$fn__3525@60ee108e"]))
(54 x 4 ((Thing :? :?name :? :?) nil nil) "Drop-object" 0 (:?place :?on :?fids :?name) #object[clojure.core$eval3528$fn__3529 0x60b112e "clojure.core$eval3528$fn__3529@60b112e"])
(55 e 17 ((Goal move :?obj :?place) nil nil) "Unlock-chest-to-move-object")
(56 i 6 ((Chest :?obj :?chest :?) nil nil))
(57 x 0 (not (Goal unlock :?chest :?) nil nil) "Unlock-chest-to-move-object" 0 (:?chest) #object[clojure.core$eval3532$fn__3533 0xb823769 "clojure.core$eval3532$fn__3533@b823769"])
(58 e 17 ((Goal move :?obj :?place) nil nil) "Hold-object-to-move")
(59 i 1 ((Thing :?loc :?obj :? light) (:?place :?loc) #object[clojure.core$eval3536$fn__3537 0x3cf76d0c "clojure.core$eval3536$fn__3537@3cf76d0c"]))
(60 i 2 ((Monkey :?hold :? :?) (:?obj :?hold) #object[clojure.core$eval3540$fn__3541 0x7c8141d6 "clojure.core$eval3540$fn__3541@7c8141d6"]))
(61 x 3 (not (Goal hold :?obj :?) nil nil) "Hold-object-to-move" 0 (:?obj) #object[clojure.core$eval3544$fn__3545 0x459c5d23 "clojure.core$eval3544$fn__3545@459c5d23"])
(62 e 17 ((Goal move :?obj :?place) nil nil) "Move-object-to-place")
(63 i 2 ((Monkey :?obj :?loc :?) (:?place :?loc) #object[clojure.core$eval3548$fn__3549 0x4569fc7a "clojure.core$eval3548$fn__3549@4569fc7a"]))
(64 x 7 (not (Goal walk-to :?place :?) nil nil) "Move-object-to-place" 0 (:?place) #object[clojure.core$eval3552$fn__3553 0x660a832 "clojure.core$eval3552$fn__3553@660a832"])
(65 e 17 ((Goal move :?name :?place) nil nil) "Drop-object-once-moved")
(66 i 2 ((Monkey :?obj :?place :?) nil nil))
(67 x 1 ((Thing :? :?name :? light) nil nil) "Drop-object-once-moved" 0 (:?place :?fids :?name) #object[clojure.core$eval3556$fn__3557 0x3be655d7 "clojure.core$eval3556$fn__3557@3be655d7"])
(68 e 17 ((Goal move :?obj :?place) nil nil) "Already-moved-object")
(69 x 4 ((Thing :?place :?obj :? :?) nil nil) "Already-moved-object" 0 (:?fids) #object[clojure.core$eval3560$fn__3561 0xda0870f "clojure.core$eval3560$fn__3561@da0870f"])
(70 e 7 ((Goal walk-to :?place :?) nil nil) "Already-at-place")
(71 x 2 ((Monkey :? :?place :?) nil nil) "Already-at-place" 0 (:?fids) #object[clojure.core$eval3564$fn__3565 0x2acf44c "clojure.core$eval3564$fn__3565@2acf44c"])
(72 e 7 ((Goal walk-to :?place :?) nil nil) "Get-on-floor-to-walk")
(73 i 2 ((Monkey :? :?loc :?surf) (:?place :?loc :?surf) #object[clojure.core$eval3568$fn__3569 0x11db5b02 "clojure.core$eval3568$fn__3569@11db5b02"]))
(74 x 18 (not (Goal on floor :?) nil nil) "Get-on-floor-to-walk" 0 () #object[clojure.core$eval3573$fn__3574 0x15bca8f8 "clojure.core$eval3573$fn__3574@15bca8f8"])
(75 e 7 ((Goal walk-to :?place :?) nil nil) "Walk-holding-nothing")
(76 x 19 ((Monkey blank :?loc floor) (:?place :?loc) #object[clojure.core$eval3577$fn__3578 0x17083b02 "clojure.core$eval3577$fn__3578@17083b02"]) "Walk-holding-nothing" 0 (:?place :?fids) #object[clojure.core$eval3581$fn__3582 0x2efc6b7b "clojure.core$eval3581$fn__3582@2efc6b7b"])
(77 e 7 ((Goal walk-to :?place :?) nil nil) "Walk-holding-object")
(78 x 20 ((Monkey :?obj :?loc floor) (:?place :?obj :?loc) #object[clojure.core$eval3585$fn__3586 0x2723fd9a "clojure.core$eval3585$fn__3586@2723fd9a"]) "Walk-holding-object" 0 (:?place :?obj :?fids) #object[clojure.core$eval3590$fn__3591 0xbc6401d "clojure.core$eval3590$fn__3591@bc6401d"])
(79 e 18 ((Goal on floor :?) nil nil) "Jump-onto-floor")
(80 x 2 ((Monkey :? :? :?on) (:?on) #object[clojure.core$eval3594$fn__3595 0x6a09f83a "clojure.core$eval3594$fn__3595@6a09f83a"]) "Jump-onto-floor" 0 (:?on :?fids) #object[clojure.core$eval3598$fn__3599 0x779e024e "clojure.core$eval3598$fn__3599@779e024e"])
(81 e 14 ((Goal on :?obj :?) nil nil) "Walk-to-place-to-climb")
(82 i 4 ((Thing :?place :?obj :? :?) nil nil))
(83 i 2 ((Monkey :? :?loc :?) (:?place :?loc) #object[clojure.core$eval3602$fn__3603 0x70298ec5 "clojure.core$eval3602$fn__3603@70298ec5"]))
(84 x 7 (not (Goal walk-to :?place :?) nil nil) "Walk-to-place-to-climb" 0 (:?place) #object[clojure.core$eval3606$fn__3607 0x32af6da2 "clojure.core$eval3606$fn__3607@32af6da2"])
(85 e 14 ((Goal on :?obj :?) nil nil) "Drop-to-climb")
(86 i 4 ((Thing :?place :?obj :? :?) nil nil))
(87 i 2 ((Monkey :?hold :?place :?) (:?hold) #object[clojure.core$eval3610$fn__3611 0x78dde170 "clojure.core$eval3610$fn__3611@78dde170"]))
(88 x 15 (not (Goal hold blank :?) nil nil) "Drop-to-climb" 0 () #object[clojure.core$eval3614$fn__3615 0x20ca94e3 "clojure.core$eval3614$fn__3615@20ca94e3"])
(89 e 14 ((Goal on :?obj :?) nil nil) "Climb-indirectly")
(90 i 4 ((Thing :?place :?obj :?on :?) nil nil))
(91 i 16 ((Monkey blank :?place :?on2) (:?on2 :?on :?obj) #object[clojure.core$eval3618$fn__3619 0x385bf47 "clojure.core$eval3618$fn__3619@385bf47"]))
(92 x 14 (not (Goal on :?on :?) nil nil) "Climb-indirectly" 0 (:?on) #object[clojure.core$eval3623$fn__3624 0x178da5b8 "clojure.core$eval3623$fn__3624@178da5b8"])
(93 e 14 ((Goal on :?obj :?) nil nil) "Climb-directly")
(94 i 4 ((Thing :?place :?obj :?on :?) nil nil))
(95 x 16 ((Monkey blank :?place :?on) nil nil) "Climb-directly" 0 (:?obj :?fids) #object[clojure.core$eval3627$fn__3628 0xdfab358 "clojure.core$eval3627$fn__3628@dfab358"])
(96 e 14 ((Goal on :?obj :?) nil nil) "Already-on-object")
(97 x 2 ((Monkey :? :? :?obj) nil nil) "Already-on-object" 0 (:?fids) #object[clojure.core$eval3631$fn__3632 0x36b05f72 "clojure.core$eval3631$fn__3632@36b05f72"])
(98 e 21 ((Goal eat :?obj :?) nil nil) "Hold-to-eat")
(99 i 2 ((Monkey :?h :? :?) (:?h :?obj) #object[clojure.core$eval3635$fn__3636 0x17253036 "clojure.core$eval3635$fn__3636@17253036"]))
(100 x 3 (not (Goal hold :?obj :?) nil nil) "Hold-to-eat" 0 (:?obj) #object[clojure.core$eval3639$fn__3640 0x3b31c7b7 "clojure.core$eval3639$fn__3640@3b31c7b7"])
(101 e 21 ((Goal eat :?name :?) nil nil) "Satisfy-hunger")
(102 i 2 ((Monkey :?name :? :?) nil nil))
(103 x 4 ((Thing :? :?name :? :?) nil nil) "Satisfy-hunger" 0 (:?fids :?name) #object[clojure.core$eval3643$fn__3644 0x23476778 "clojure.core$eval3643$fn__3644@23476778"])
