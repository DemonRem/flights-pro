; Sun Dec 25 22:34:06 MSK 2016
; 
;+ (version "3.5")
;+ (build "Build 663")

([FlightPro_Class0] of  CloVar

	(source "(volatile! {:view \"FORWARD\"\n                        :pitch -20\n                        :roll 0})")
	(title "CAMERA"))

([FlightPro_Class1] of  CloNamespace

	(source "(:require\n  [calc.dynamic :as dyn]\n  [calc.geo :as geo])")
	(title "czm.core"))

([FlightPro_Class10000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(ProServer)"))

([FlightPro_Class100000] of  WorkingPrograms

	(cloPrograms
		[FlightPro_Class390002]
		[FlightPro_Class230004]
		[FlightPro_Class70002]
		[FlightPro_Class20025]
		[FlightPro_Class180002]
		[RuleEngine_Class30000]
		[FlightPro_Class400000]
		[FlightPro_Class20000]
		[FlightPro_Class280000])
	(title "FlightPro Programs"))

([FlightPro_Class10001] of  CloFunction

	(source "(let [pitch (condp = (:view @CAMERA)\n                \"UP\" 90\n                \"DOWN\" -90\n                (:pitch @CAMERA))\n        roll (:roll @CAMERA)\n        head (geo/norm-crs (condp = (:view @CAMERA)\n                         \"BACKWARD\" (+ crs 180)\n                         \"RIGHT\" (+ crs 90)\n                         \"LEFT\" (- crs 90)\n                         \"FORWARD-RIGHT\" (+ crs 45)\n                         \"FORWARD-LEFT\" (- crs 45)\n                         \"BACKWARD-RIGHT\" (+ crs 135)\n                         \"BACKWARD-LEFT\" (- crs 135)\n                         crs))]\n    (fly-control lat lon alt head pitch roll per))")
	(title "fly-to [lat lon alt crs per]"))

([FlightPro_Class10002] of  CloFunction

	(source "(cond\n   (> x 360) (- x 360)\n   (< x 0) (+ x 360)\n   true x)")
	(title "norm-crs [x]"))

([FlightPro_Class100023] of  ClsRequired

	(cloFunctions
		[FlightPro_Class100026]
		[FlightPro_Class100027]
		[FlightPro_Class240001]
		[FlightPro_Class240002]
		[FlightPro_Class80000]
		[FlightPro_Class100028]
		[FlightPro_Class30026]
		[FlightPro_Class30027]
		[FlightPro_Class140027])
	(cloNamespace [FlightPro_Class100024])
	(cloVars
		[FlightPro_Class100029]
		[FlightPro_Class240000])
	(title "Carrier Movement"))

([FlightPro_Class100024] of  CloNamespace

	(source "(:require\n  [calc.dynamic :as dyn])")
	(title "carr.move"))

([FlightPro_Class100025] of  CloVar

	(source "(volatile! {:mode \"?\"\n               :coord [0 0]\n               :altitude 0\n               :speed 0\n               :course 0\n               :step-hrs (double (/ (:carrier TIO) 3600000))\n               :bank-params [20 8 64 2]\n               :rudder {:target 0\n                            :step 3\n	    :accel 1\n                            :time-out 1011}\n               :elevator {:target 0\n                            :step 4\n	    :accel 1\n                            :time-out 997}\n               :engine {:target 0\n                            :step 1\n	    :accel 1\n                            :time-out 1003}})")
	(title "CARRIER"))

([FlightPro_Class100026] of  CloFunction

	(source "(let [cosphi1 (js/Math.cos phi1)\n       sinphi1 (js/Math.sin phi1)\n       cosaz (js/Math.cos az)\n       sinaz (js/Math.sin az)\n       sinc (js/Math.sin c)\n       cosc (js/Math.cos c)\n       phi2 (js/Math.asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (js/Math.atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n  [phi2 lam2])")
	(title "spherical-between-js [phi1 lambda0 c az]"))

([FlightPro_Class100027] of  CloFunction

	(source "([carr]\n  (let [car @carr]\n    (set-turn-point carr (:coord car) (:course car) (:speed car))))\n([carr [lat lon] crs spd]\n  (vswap! carr assoc :turn-point\n    {:phi (* lat PID180)\n     :lam (* lon PID180)\n     :dir (* crs PID180)\n     :rdh (* spd NMRAD)\n     :clk 0}))")
	(title "set-turn-point"))

([FlightPro_Class100028] of  CloFunction

	(source "(let [car @carr\n       tur (:turn-point car)\n       hrs (:step-hrs car)\n       elt (+ (:clk tur) hrs)\n       way (* (:rdh tur) elt)\n       [phi lam] (spherical-between-js (:phi tur) (:lam tur) way (:dir tur))]\n  (vswap! carr assoc :coord [(/ phi PID180) (/ lam PID180)]\n                                :turn-point (assoc tur :clk elt)))")
	(title "move [carr]"))

([FlightPro_Class100029] of  CloVar

	(source "(/ Math.PI 180)")
	(title "PID180"))

([FlightPro_Class10003] of  CloFunction

	(source "(if (= terra \"yes\")\n  (set! (.-terrainProvider VIEWER) TERR-PROV))\n(.add (.-dataSources VIEWER) CZM-SRC)\n(.addEventListener (js/EventSource. (str base-url \"czml/\")) \"czml\" cz-processor false)\n(println [:INIT-3D-VIEW :BASE base-url :TERRA terra])")
	(title "init-3D-view [base-url terra]"))

([FlightPro_Class110000] of  CloFunction

	(source "(letfn [(turn-right? [from to]\n	(let [dif (- to from)]\n	  (cond\n	    (> dif 0)\n	      (<= dif 180)\n	    (< dif 0) \n	      (< dif -180))))]\n  (let [arc (calc/abs (- old-crs new-crs))\n         arc (if (> arc 180)\n                 (- 360 arc)\n                 arc)]\n    (if (< arc small-arc)\n        0\n        (let [bnk (if (> arc big-arc)\n	(* right-bank big-factor)\n	right-bank)]\n          (if (turn-right? old-crs new-crs)\n           bnk\n           (- bnk))))))")
	(title "bank [old-crs new-crs [right-bank small-arc big-arc big-factor]]"))

([FlightPro_Class120000] of  CSS

	(source "#autopilot {\n  position:fixed;\n  bottom:160px;\n  right:40px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#accel {\n  position:fixed;\n  bottom:150px;\n  right:24px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#course {\n  position:fixed;\n  bottom:150px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#speed {\n  position:fixed;\n  bottom:130px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude {\n  position:fixed;\n  bottom:110px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#lat {\n  position:fixed;\n  bottom:90px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#lon {\n  position:fixed;\n  bottom:70px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#course-fld {\n  position:fixed;\n  bottom:150px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n}\n#speed-fld {\n  position:fixed;\n  bottom:130px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude-fld {\n  position:fixed;\n  bottom:110px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n}\n#speed-acl {\n  position:fixed;\n  bottom:130px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude-acl {\n  position:fixed;\n  bottom:110px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#latitude-fld {\n  position:fixed;\n  bottom:90px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#longitude-fld {\n  position:fixed;\n  bottom:70px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#camera {\n  position:fixed;\n  bottom:140px;\n  left:60px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard {\n  position:fixed;\n  bottom:130px;\n  left:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard-fld {\n  position:fixed;\n  bottom:130px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#view {\n  position:fixed;\n  bottom:110px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#view-fld {\n  position:fixed;\n  bottom:110px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#pitch {\n  position:fixed;\n  bottom:90px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#pitch-fld {\n  position:fixed;\n  bottom:90px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#roll {\n  position:fixed;\n  bottom:70px;\n  left:48px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#roll-fld {\n  position:fixed;\n  bottom:70px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "cesium"))

([FlightPro_Class120002] of  CloProgram

	(cloFunctions [FlightPro_Class260000])
	(cloNamespace [Clojure_Class300001])
	(title "Clojure Work"))

([FlightPro_Class130000] of  HTML

	(source "<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <link rel=\"stylesheet\" href=\"css/leaflet.css\" />\n  <link rel=\"stylesheet\" href=\"leaflet/leaflet.css\"/>\n  <script src=\"leaflet/leaflet.js\"></script>\n  <script src=\"js/RotatedMarker.js\"></script>\n</head>\n<body>\n  <div id=\"map\"></div>\n  <div id=\"mousepos\"></div>\n  <div id=\"commands-header\"></div>\n  <div id=\"commands\"></div>\n  <div id=\"element1\"></div>\n  <div id=\"element2\"></div>\n  <div id=\"element3\"></div>\n  <div id=\"element4\"></div>\n  <script src=\"js/chart.js\"></script>\n</body>\n</html>")
	(store-in "resources/public")
	(title "leaflet"))

([FlightPro_Class130001] of  CloFunction

	(source "(let [[rb sa ba fa :as bps] (:bank-params @carr)\n       bnk (dyn/bank (:course @carr) course bps)\n       alt (:altitude @carr)]\n  (if (or (< alt 90) (= bnk 0))\n    (mov/turn carr course 1)\n    (let [accel (if (> (calc/abs bnk) rb) 2 1)]\n      (mov/turn carr course accel)\n      (dyn/check-diff-and-do carr\n        [:rudder :target]\n        [:course]\n        (* 2 (get-in @carr [:rudder :step]))\n        [:rudder :time-out]\n        #(czm/camera :roll 0))\n      (czm/camera :roll bnk))))")
	(title "turn-and-bank [carr course]"))

([FlightPro_Class130003] of  CloFunction

	(source "(if (< x 0) (- x) x)")
	(title "abs [x]"))

([FlightPro_Class130004] of  CloFunction

	(source "(letfn [(proc-fn [cr]\n             (let [c @cr]\n               (if (< (calc/abs (- (get-in c path1)\n                                   (get-in c path2))) limit)\n                 (do (final-fn) false)\n                  true)))]\n  (vswap! carr assoc :cdad-status (volatile! \"STOP\"))\n  (asp/start-process (:cdad-status @carr) \n                                 #(proc-fn carr)\n                                 (get-in @carr tio-pth)))")
	(title "check-diff-and-do [carr path1 path2 limit tio-pth final-fn]"))

([FlightPro_Class140000] of  CloVar

	(source "(volatile! {})")
	(title "VEHICLES"))

([FlightPro_Class140001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140008]
		[FlightPro_Class140005]
		[FlightPro_Class330006]
		[FlightPro_Class330005]
		[FlightPro_Class140004]
		[FlightPro_Class140003]
		[FlightPro_Class140007]
		[FlightPro_Class270001])
	(cloNamespace [FlightPro_Class140002])
	(title "Viev 3D Controls"))

([FlightPro_Class140002] of  CloNamespace

	(source "(:require\n [goog.string :as gstring]\n [goog.string.format])")
	(title "view3d.controls"))

([FlightPro_Class140003] of  CloFunction

	(source "(set-html! \"autopilot\" \"<h4>Autopilot</h4>\")\n(set-html! \"accel\" \"accel\")\n(set-html! \"course\" \"Course: 000\")\n(set-html! \"speed\" \"Speed: 000\")\n(set-html! \"altitude\" \"Altitude: 00000\")\n(set-html! \"lat\" \"Latitude: 00.0000\")\n(set-html! \"lon\" \"Longitude: 00.0000\")\n(set-html! \"camera\" \"<h4>Camera</h4>\")\n(set-html! \"onboard\" \"Onboard:\")\n(set-html! \"onboard-fld\" \n  \"<select onchange='javascript:view3d.client.onboard(this.value)' style='width:96px'>\n   <option value='callsign'>callsign</option>\n   <option value='manual'>manual</option>\n   <option value='select'>select</option>\")\n(set-html! \"view\" \"View:\")\n(set-html! \"view-fld\" \n  \"<select onchange='javascript:view3d.client.view(this.value)' style='width:96px'>\n   <option value='FORWARD'>FORWARD</option>\n   <option value='BACKWARD'>BACKWARD</option>\n   <option value='RIGHT'>RIGHT</option>\n   <option value='LEFT'>LEFT</option>\n   <option value='UP'>UP</option>\n   <option value='DOWN'>DOWN</option>\n   <option value='FORWARD-RIGHT'>FORWARD-RIGHT</option>\n   <option value='FORWARD'>FORWARD</option>\n   <option value='BACKWARD-RIGHT'>BACKWARD-RIGHT</option>\n   <option value='BACKWARD-LEFT'>BACKWARD-LEFT</option>\n   </select>\")\n(set-html! \"pitch\" \"Pitch:\")\n(set-html! \"pitch-fld\" \n  \"<input value='-20' style='width:90px'\n               onchange='javascript:view3d.client.pitch(this.value)'>\")\n(set-html! \"roll\" \"Roll:\")\n(set-html! \"roll-fld\" \n  \"<input value='0' style='width:90px'\n               onchange='javascript:view3d.client.roll(this.value)'>\")\n(set-html! \"course-fld\" \n  \"<input value='180' style='width:38px' id='input-crs'\n                     onchange='javascript:view3d.client.course(this.value)'>\")\n(set-html! \"speed-fld\" \n  \"<input value='210' style='width:38px' id='input-spd'\n               onchange='javascript:view3d.client.speed(this.value)'>\")\n(set-html! \"altitude-fld\" \n  \"<input value='4000' style='width:38px' id='input-alt'\n               onchange='javascript:view3d.client.altitude(this.value)'>\")\n(set-html! \"speed-acl\" \n  (str \"<select style='width:44px'\n                onchange='javascript:view3d.client.accel_speed(this.value)'>\"\n         (apply str (for [n (range 1 5)]\n                           (str \"<option value='\" n \"'>\" n \"</option>\")))))\n(set-html! \"altitude-acl\" \n  (str \"<select style='width:44px'\n                onchange='javascript:view3d.client.accel_altitude(this.value)'>\"\n         (apply str (for [n (range 1 11)]\n                           (str \"<option value='\" n \"'>\" n \"</option>\")))))\n(set-html! \"latitude-fld\" \n  \"<input value='40.8' style='width:84px' id='input-lat'\n               onchange='javascript:view3d.client.latitude(this.value)'>\")\n(set-html! \"longitude-fld\" \n  \"<input value='-74.0' style='width:84px' id='input-lon'\n               onchange='javascript:view3d.client.longitude(this.value)'>\")")
	(title "show-controls []"))

([FlightPro_Class140004] of  CloFunction

	(source "(set! (.-innerHTML (by-id id)) msg)")
	(title "set-html! [id msg]"))

([FlightPro_Class140005] of  CloFunction

	(source "(.getElementById js/document id)")
	(title "by-id  [id]"))

([FlightPro_Class140007] of  CloFunction

	(source "(let [{:keys [coord course speed altitude]} @carr]\n  (set-html! \"course\" (str \"Course: \" course))\n  (set-html! \"speed\" (str \"Speed: \" speed))\n  (set-html! \"altitude\" (str \"Altitude: \" altitude))\n  (set-html! \"lat\" (str \"Latitude: \" (format \"%.4f\" (first coord))))\n  (set-html! \"lon\" (str \"Longitude: \" (format \"%.4f\" (second coord)))))")
	(title "show-flight-data [carr]"))

([FlightPro_Class140008] of  CloFunction

	(source "(apply gstring/format fmt args)")
	(title "format [fmt & args]"))

([FlightPro_Class140019] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [crs (num-val crs)]\n    (if (<= 0 crs 360)\n      (turn-and-bank CARRIER crs))))")
	(title "course [crs]"))

([FlightPro_Class140020] of  CloFunction

	(source "(if (= call \"manual\")\n  (asp/stop-process CAM-PROC))\n(GET (str (:command URL) \"onboard?callsign=\" call)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "onboard [call]"))

([FlightPro_Class140021] of  CloFunction

	(source "(czm/camera :view dir)")
	(title "view [dir]"))

([FlightPro_Class140022] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :pitch deg)))")
	(title "pitch [deg]"))

([FlightPro_Class140023] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :roll deg)))")
	(title "roll [deg]"))

([FlightPro_Class140024] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (mov/accel CARRIER (num-val spd)))")
	(title "speed [spd]"))

([FlightPro_Class140025] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (mov/elevate CARRIER (num-val alt)))")
	(title "altitude [alt]"))

([FlightPro_Class140027] of  CloFunction

	(source "(vswap! carr assoc-in [:elevator :target] altitude)\n(dyn/equalize carr :elevator set-altitude :altitude dyn/step-closer)")
	(title "elevate [carr altitude]"))

([FlightPro_Class150000] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140008]
		[FlightPro_Class140005]
		[FlightPro_Class140004]
		[FlightPro_Class160012]
		[FlightPro_Class220026])
	(cloNamespace [FlightPro_Class180001])
	(title "Chart Controls"))

([FlightPro_Class150001] of  CSS

	(source "#map {\n    position: absolute;\n    top: 0px;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n#mousepos {\n  position:fixed;\n  bottom:10px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#commands-header {\n  position:fixed;\n  bottom:50px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#commands {\n  position:fixed;\n  bottom:40px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#element1 {\n  position:fixed;\n  bottom:40px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element2 {\n  position:fixed;\n  bottom:40px;\n  left:310px;\n  padding:5px;\n  z-index:100;\n}\n#element3 {\n  position:fixed;\n  bottom:40px;\n  left:460px;\n  padding:5px;\n  z-index:100;\n}\n#element4 {\n  position:fixed;\n  bottom:40px;\n  left:610px;\n  padding:5px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "leaflet"))

([FlightPro_Class150002] of  ClsMain

	(asset-path "js/out")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[FlightPro_Class80004]
		[FlightPro_Class160003]
		[FlightPro_Class160007]
		[FlightPro_Class220000]
		[FlightPro_Class80002]
		[FlightPro_Class160010]
		[FlightPro_Class160008]
		[FlightPro_Class160004]
		[FlightPro_Class310002]
		[FlightPro_Class360000]
		[FlightPro_Class380003]
		[FlightPro_Class370001]
		[FlightPro_Class370000]
		[FlightPro_Class430000]
		[FlightPro_Class170005]
		[FlightPro_Class170004]
		[FlightPro_Class220029]
		[FlightPro_Class220027]
		[FlightPro_Class160011]
		[FlightPro_Class160002]
		[FlightPro_Class180000]
		[FlightPro_Class380000]
		[FlightPro_Class380001])
	(cloNamespace [FlightPro_Class150003])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class330004]
		[FlightPro_Class160009]
		[FlightPro_Class160005]
		[FlightPro_Class140000])
	(css [FlightPro_Class150001])
	(epilogue "(set! (.-onload js/window) (on-load-chart))")
	(html [FlightPro_Class130000])
	(options "{:verbose false}")
	(output-dir "resources/public/js/out")
	(output-to "resources/public/js/chart.js")
	(required
		[FlightPro_Class70008]
		[FlightPro_Class100023]
		[FlightPro_Class230004]
		[FlightPro_Class390002]
		[FlightPro_Class30001]
		[FlightPro_Class150000]
		[FlightPro_Class420008])
	(store-in "src/cljs")
	(title "Chart Client"))

([FlightPro_Class150003] of  CloNamespace

	(source "(:require\n  [goog.string :as gstring]\n  [goog.string.format]\n  [csasync.proc :as asp]\n  [chart.controls :as ctl]\n  [carr.move :as mov]\n  [cognitect.transit :as t]\n  [ajax.core :refer [GET]]\n  [ask.master :as am])")
	(title "chart.client"))

([FlightPro_Class160000] of  CloFunction

	(source "(let [[n s w e] @BBX]\n  (if-let [ff (json-web-data (str (:url-flights F24) \"?bounds=\" n \",\" s \",\" w \",\" e))]\n    (vreset! FLIGHTS \n      (->> ff\n        (filter #(vector? (second %)))\n        ;;(filter #(not (empty? (callsign (second %)))))\n        (apply concat)\n        (apply hash-map)))))")
	(title "flights-in-bbx []"))

([FlightPro_Class160002] of  CloFunction

	(source "(enable-console-print!)\n(init-chart)\n(asp/repeater receive-instructions (:instructions TIO))\n(ctl/show-chart-controls)")
	(title "on-load-chart []"))

([FlightPro_Class160003] of  CloFunction

	(source "(when-let [vmp (@VEHICLES id)]\n  (mov/move vmp)\n  (let [mp @vmp\n         mrk (:marker mp)\n         [lat lon] (:coord mp)\n         pos (js/L.LatLng. lat lon)]\n    (.setLatLng mrk pos))\n  (vswap! VEHICLES assoc id vmp))")
	(title "move-vehicle [id]"))

([FlightPro_Class160004] of  CloFunction

	(source "(delete-vehicle id)\n(let [ms (volatile! \"START\")\n       mp (assoc mp :marker (create-update-marker nil mp)\n                              :step-hrs (double (/ (:vehicles TIO) 3600000))\n	      :movst ms\n                              :mover (asp/start-process ms #(move-vehicle id) (:vehicles TIO)))\n         carr (volatile! mp)]\n    (mov/set-turn-point carr)\n    (vswap! VEHICLES assoc id carr))")
	(title "create-update-vehicle [id mp]"))

([FlightPro_Class160005] of  CloVar

	(source "(volatile! {})")
	(title "CHART"))

([FlightPro_Class160007] of  CloFunction

	(source "(when-let [veh (@VEHICLES id)]\n  (asp/stop-process (:movst @veh))\n  (.removeLayer @CHART (:marker @veh))\n  (vswap! VEHICLES dissoc id))")
	(title "delete-vehicle [id]"))

([FlightPro_Class160008] of  CloFunction

	(source "(if mrk\n  (.removeLayer @CHART mrk))\n(let [[lat lon] (:coord mp)\n       pos (js/L.LatLng. lat lon)\n       ico (js/L.icon #js{:iconUrl (URL-ICO (:status mp)) \n                                  :iconSize #js[32, 32]})\n       opt #js{:icon ico \n                   :draggable true}\n       mrk (-> js/L (.rotatedMarker pos opt))]\n    (.on mrk \"click\"\n         (fn [e]\n           (info (ffirst (filter #(= (:marker @(second %)) (.-target e)) \n                                      (seq @VEHICLES))))))\n    (.addTo mrk @CHART)\n    (set! (.. mrk -options -angle) (:course mp))\n    mrk)")
	(title "create-update-marker [mrk mp]"))

([FlightPro_Class160009] of  CloVar

	(source "{\"INTERSECT\" 	(str HOST PORT \"/img/redpln32.png\")\n \"DESCEND\" 	(str HOST PORT \"/img/greenpln32.png\")\n \"CLIMB\" 	(str HOST PORT \"/img/bluepln32.png\")\n \"LEVEL\" 	(str HOST PORT \"/img/purplepln32.png\")\n \"GROUND\" 	(str HOST PORT \"/img/greypln32.png\")\n \"COUNTER\"	(str HOST PORT \"/img/b.png\")\n \"FOLLOWING\"	(str HOST PORT \"/img/r.png\")}")
	(title "URL-ICO"))

([FlightPro_Class160010] of  CloFunction

	(source "(GET (str (:command URL) \"info?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "info [id]"))

([FlightPro_Class160011] of  CloFunction

	(source "(println :INIT-CHART)\n(let [m (-> js/L\n              (.map \"map\")\n              (.setView (array 40.8, -74.0) 10)) ;; Frankfurt\n        tile1 (-> js/L (.tileLayer \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n                                   #js{:maxZoom 16\n                                       :attribution \"Ru, OpenStreetMap &copy;\"}))\n        tile2 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile3 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile4 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile5 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        base (clj->js {\"OpenStreetMap\" tile1\n                       \"Google Satellite\" tile2\n                       \"Google Streets\" tile3\n                       \"Google Hybrid\" tile4\n                       \"Google Terrain\" tile5})\n        ctrl (-> js/L (.control.layers base nil))]\n  (.addTo tile1 m)\n  (.addTo ctrl m)\n  (.on m \"mousemove\"\n         (fn [e] (ctl/mouse-move (.. e -latlng -lat) (.. e -latlng -lng))))\n  (vreset! CHART m))")
	(title "init-chart []"))

([FlightPro_Class160012] of  CloFunction

	(source "(set-html! \"mousepos\" (str \"lat \" (format \"%.4f\" lat) \" lon \" (format \"%.4f\" lng)))")
	(title "mouse-move [lat lng]"))

([FlightPro_Class160018] of  CloFunction

	(source "(close! chn)")
	(title "close-chan [chn]"))

([FlightPro_Class170000] of  CloVar

	(source "(volatile! nil)")
	(title "AIRPORTS"))

([FlightPro_Class170004] of  CloFunction

	(source "(GET (:instructions URL) {:handler instructions-handler\n                       :error-handler error-handler})")
	(title "receive-instructions []"))

([FlightPro_Class170005] of  CloFunction

	(source "(doseq [{:keys [instruct] :as ins} (read-transit response)]\n  ;;(println [:INSTRUCT ins])\n  (condp = instruct\n    :create-update (let [{:keys [id vehicle]} ins]\n	(create-update-vehicle id vehicle))\n    :delete (let [{:keys [id]} ins]\n	(delete-vehicle id))\n    :clear (clear-vehicles)\n    :popup (let [{:keys [id lat lon html time]} ins]\n	(cond\n	  id (popup id html time)\n	  (and lat lon) (popup lat lon html time)))\n    :trail (let [{:keys [id points options time]} ins]\n	(add-trail id points options time))\n    :map-center (let [{:keys [coord]} ins]\n	(map-center coord))\n    :move-to (move-to ins)     \n    (println (str \"Unknown instruction: \" [instruct ins]))))")
	(title "instructions-handler [response]"))

([FlightPro_Class180000] of  CloFunction

	(source "(GET (str (:command URL) \"follow?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "follow [id]"))

([FlightPro_Class180001] of  CloNamespace

	(source "(:require\n [goog.string :as gstring]\n [goog.string.format])")
	(title "chart.controls"))

([FlightPro_Class180002] of  CloProgram

	(cloFunctions
		[FlightPro_Class190007]
		[FlightPro_Class200007]
		[FlightPro_Class200010]
		[FlightPro_Class200011]
		[FlightPro_Class200012]
		[FlightPro_Class200013]
		[FlightPro_Class200014]
		[FlightPro_Class160000]
		[FlightPro_Class200015]
		[FlightPro_Class200016]
		[FlightPro_Class200002]
		[FlightPro_Class220007]
		[FlightPro_Class200017]
		[FlightPro_Class210008]
		[FlightPro_Class210009]
		[FlightPro_Class210012]
		[FlightPro_Class210013]
		[FlightPro_Class260002])
	(cloNamespace [FlightPro_Class180003])
	(cloVars
		[FlightPro_Class210011]
		[FlightPro_Class210007]
		[FlightPro_Class190001]
		[FlightPro_Class170000]
		[FlightPro_Class220008]
		[FlightPro_Class210010])
	(title "FlightRadar24 Client"))

([FlightPro_Class180003] of  CloNamespace

	(source "(:require\n  [org.httpkit.client :as client]\n  [clj-json.core :as json]\n  [async.proc :as asp])")
	(title "fr24.client"))

([FlightPro_Class190000] of  CloFunction

	(source "(let [crt (current-time)\n       fls (seq @fls)]\n  (println \"t:\" crt \"flights:\" (count fls))\n  (doseq [[k v] fls]\n    (let [alt (fr24/altitude v)\n           [lat lon :as crd] (fr24/coord v)]\n      (rete/assert-frame \n	['Flight\n	'id k\n	'callsign (fr24/callsign v)\n	'coord crd\n	'course (fr24/course v)\n	'speed (fr24/speed v)\n	'altitude alt\n	'time crt\n	'point4d [lat lon alt (iso8601curt)]\n	'age \"NEW\"\n	'status (if (> alt 0)\n                                     \"LEVEL\"\n                                     \"GROUND\")])))\n  (rete/fire)\n  true)")
	(title "process-flights [fls]"))

([FlightPro_Class190001] of  CloVar

	(source "(volatile! {})")
	(title "FLIGHTS"))

([FlightPro_Class190007] of  CloFunction

	(source "(let [r @(client/get url)\n       s (:status r)]\n  (if (= s 200)\n    (try\n      (json/parse-string (:body r))\n      (catch Exception e\n        (println [:EXCEPTION e])\n        nil))\n    (do\n      (println [:STATUS s])\n      nil)))")
	(title "json-web-data [url]"))

([FlightPro_Class2] of  ClsMain

	(asset-path "js/out")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[FlightPro_Class310006]
		[FlightPro_Class80004]
		[FlightPro_Class130001]
		[FlightPro_Class80002]
		[FlightPro_Class140020]
		[FlightPro_Class300006]
		[FlightPro_Class140021]
		[FlightPro_Class140022]
		[FlightPro_Class140023]
		[FlightPro_Class140019]
		[FlightPro_Class140024]
		[FlightPro_Class140025]
		[FlightPro_Class90001]
		[FlightPro_Class90002]
		[FlightPro_Class300000]
		[FlightPro_Class320001]
		[FlightPro_Class290000]
		[FlightPro_Class320000]
		[FlightPro_Class80003]
		[FlightPro_Class80001]
		[FlightPro_Class70001])
	(cloNamespace [FlightPro_Class60001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class330004]
		[FlightPro_Class100025]
		[FlightPro_Class330002])
	(css [FlightPro_Class120000])
	(epilogue "(set! (.-onload js/window) (on-load))")
	(html [FlightPro_Class40000])
	(options "{:verbose false}")
	(output-dir "resources/public/js/out")
	(output-to "resources/public/js/main.js")
	(required
		[FlightPro_Class70008]
		[FlightPro_Class50001]
		[FlightPro_Class100023]
		[FlightPro_Class230004]
		[FlightPro_Class390002]
		[FlightPro_Class30001]
		[FlightPro_Class140001])
	(store-in "src/cljs")
	(title "View 3D Client"))

([FlightPro_Class20000] of  CloProgram

	(cloFunctions
		[FlightPro_Class20013]
		[FlightPro_Class20017]
		[FlightPro_Class20014]
		[FlightPro_Class20024]
		[FlightPro_Class20021]
		[FlightPro_Class20022]
		[FlightPro_Class20023])
	(cloNamespace [FlightPro_Class20001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class20002]
		[FlightPro_Class20006]
		[FlightPro_Class20007])
	(title "Pro Server"))

([FlightPro_Class200000] of  Rule

	(lhs "(Onboard callsign ?cs)\n(Flight callsign ?cs\n           age \"NEW\"\n           coord ?crd\n           altitude ?alt\n           course ?crs\n           speed ?spd\n           status ?sts\n           time ?t)")
	(rhs "(println [:ONBOARD ?cs ?t ?crd ?alt ?crs ?spd ?sts])")
	(salience 0)
	(title "af:PrintOnboard"))

([FlightPro_Class200001] of  CloFunction

	(source "(asp/pump-in (:instructions  cmd/CHN)\n	{:instruct :delete\n	 :id id})")
	(title "put-off-map [id]"))

([FlightPro_Class200002] of  CloFunction

	(source "(letfn [(mk-airports [rows]\n            (reduce #(assoc %1\n                            (get %2 \"country\")\n                            (assoc (or (get %1 (get %2 \"country\")) {})\n                              (get %2 \"name\") \n                              %2)) \n                        {} \n                        rows))]\n  (or @AIRPORTS\n       (let [aps (json-web-data (:url-airports F24))\n              aps (mk-airports (get aps \"rows\"))]\n         (vreset! AIRPORTS aps)\n         aps)))")
	(title "airports-by-country []"))

([FlightPro_Class200007] of  CloFunction

	(source "(if (string? iod)\n  (@FLIGHTS iod)\n  iod)")
	(title "dat [iod]"))

([FlightPro_Class20001] of  CloNamespace

	(source "(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [async.proc :as asp]\n              [cesium.core :as czs]\n              [pro.commands :as cmd])\n(:import java.io.ByteArrayOutputStream)")
	(title "pro.server"))

([FlightPro_Class200010] of  CloFunction

	(source "(let [dd (dat iod)]\n  [(nth dd 1) (nth dd 2)])")
	(title "coord [iod]"))

([FlightPro_Class200011] of  CloFunction

	(source "(nth (dat iod) 3)")
	(title "course [iod]"))

([FlightPro_Class200012] of  CloFunction

	(source "(nth (dat iod) 5)")
	(title "speed [iod]"))

([FlightPro_Class200013] of  CloFunction

	(source "(nth (dat iod) 4)")
	(title "altitude [iod]"))

([FlightPro_Class200014] of  CloFunction

	(source "(nth (dat iod) 16)")
	(title "callsign [iod]"))

([FlightPro_Class200015] of  CloFunction

	(source "(if-let [flt (filter #(= cs (callsign (second %)))\n                         @FLIGHTS)]\n  (first flt))")
	(title "by-call [cs]"))

([FlightPro_Class200016] of  CloFunction

	(source "(if-let [[id dat] (by-call cs)]\n  id)")
	(title "id-by-call [cs]"))

([FlightPro_Class200017] of  CloFunction

	(source "(if-let [[id dat] (by-call cs)]\n  dat)")
	(title "dat-by-call [cs]"))

([FlightPro_Class20002] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([FlightPro_Class20004] of  CloVar

	(source "{:answer (asp/mk-chan)\n :directives (asp/mk-chan)\n :instructions (asp/mk-chan)}")
	(title "CHN"))

([FlightPro_Class20005] of  CloVar

	(source "4444")
	(title "PORT"))

([FlightPro_Class20006] of  CloVar

	(source "nil")
	(title "APP"))

([FlightPro_Class20007] of  CloVar

	(source "nil")
	(title "SERV"))

([FlightPro_Class20010] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([FlightPro_Class20013] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([FlightPro_Class20014] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (asp/pump-out chn)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "responseN [chn]"))

([FlightPro_Class20017] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (asp/one-out chn)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "response1 [chn]"))

([FlightPro_Class20021] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (str ROOT \"cezium.html\")))\n  (GET \"/chart\" [] (slurp (str ROOT \"leaflet.html\")))\n  (GET \"/czml/\" [] (czs/events))\n  (GET \"/question/\" [& params] (cmd/question params))\n  (GET \"/answer/\" [] (response1 (:answer cmd/CHN)))\n  (GET \"/directives/\" [] (responseN (:directives cmd/CHN)))\n  (GET \"/instructions/\" [] (responseN (:instructions cmd/CHN)))\n  (GET \"/command/:cmd\" [cmd & params] \n    ((resolve (symbol (str \"pro.commands/\" cmd))) params))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([FlightPro_Class20022] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false})))")
	(title "start-server"))

([FlightPro_Class20023] of  CloFunction

	(source "(when-let [serv SERV]\n  (.stop serv)\n  (def SERV nil)\n  (println \"Server stopped!\"))")
	(title "stop-server []"))

([FlightPro_Class20024] of  CloFunction

	(source "(let [address (str HOST PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([FlightPro_Class20025] of  CloProgram

	(cloFunctions
		[FlightPro_Class20029]
		[FlightPro_Class20031]
		[FlightPro_Class20032]
		[FlightPro_Class20033]
		[FlightPro_Class20034]
		[FlightPro_Class20035]
		[FlightPro_Class20036]
		[FlightPro_Class20037])
	(cloNamespace [FlightPro_Class20026])
	(cloVars
		[FlightPro_Class20027]
		[FlightPro_Class20028])
	(title "Cesium Server"))

([FlightPro_Class20026] of  CloNamespace

	(source "(:require\n    [ring.util.response :as r]\n    [async.proc :as asp])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([FlightPro_Class20027] of  CloVar

	(source "(asp/mk-chan)")
	(title "CZ-CHAN"))

([FlightPro_Class20028] of  CloVar

	(source "true")
	(title "DOC-SND"))

([FlightPro_Class20029] of  CloFunction

	(source "(asp/pump-in CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([FlightPro_Class20031] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (asp/pump-out CZ-CHAN)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([FlightPro_Class20032] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([FlightPro_Class20033] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([FlightPro_Class20034] of  CloFunction

	(source "(str \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\",\\\"clock\\\":{\\\"currentTime\\\":\\\"\" (iso8601futt -16) \"\\\"}}\")")
	(title "doc []"))

([FlightPro_Class20035] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"availability\\\":\\\"\"\n               (iso8601curt) \"/\" (iso8601futt span-sec)\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\" \n               scale\n               \" ,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -24]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([FlightPro_Class20036] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([FlightPro_Class20037] of  CloFunction

	(source "(let [min-scl 0.25\n       scl (+ min-scl (* (- 1 min-scl) (- 1 (/ dist max-dist))))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 40))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([FlightPro_Class210000] of  CloFunction

	(source "(let [cosphi1 (Math/cos phi1)\n       sinphi1 (Math/sin phi1)\n       cosaz (Math/cos az)\n       sinaz (Math/sin az)\n       sinc (Math/sin c)\n       cosc (Math/cos c)\n       phi2 (Math/asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (Math/atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n   [phi2 lam2])")
	(title "spherical-between [^double phi1 ^double lambda0 ^double c ^double az]"))

([FlightPro_Class210001] of  CloFunction

	(source "([params]\n  (clear))\n([]\n  (fr24/stop)\n  (fr24/clear-flights)\n  (rete/reset)\n  (asp/pump-in (:instructions CHN)\n      {:instruct :clear})\n  \"\")")
	(title "clear"))

([FlightPro_Class210007] of  CloVar

	(source "(volatile! [0 0 0 0])")
	(title "BBX"))

([FlightPro_Class210008] of  CloFunction

	(source "(vreset! BBX [n s w e])")
	(title "set-bbx [n s w e]"))

([FlightPro_Class210009] of  CloFunction

	(source "(println [:FLIGHTS-PROCESS \n  (asp/start-process STATUS \n                               #(do (flights-in-bbx) (process-fn FLIGHTS) true)\n                               (:time-out F24))])")
	(title "start [process-fn]"))

([FlightPro_Class210010] of  CloVar

	(source "(volatile! \"START\")")
	(title "STATUS"))

([FlightPro_Class210011] of  CloVar

	(source "{:url-flights \"http://data-live.flightradar24.com/zones/fcgi/feed.js\"\n :url-airports \"http://www.flightradar24.com/_json/airports.php\"\n :url-flight-data \"http://data-live.flightradar24.com/clickhandler/?version=1.5&flight=\"\n :time-out 12000}")
	(title "F24"))

([FlightPro_Class210012] of  CloFunction

	(source "(asp/stop-process STATUS)")
	(title "stop []"))

([FlightPro_Class210013] of  CloFunction

	(source "(asp/running? STATUS)")
	(title "running? []"))

([FlightPro_Class220000] of  CloFunction

	(source "(doseq [veh (vals @VEHICLES)]\n  (asp/stop-process (:movst @veh))\n  (.removeLayer @CHART (:marker @veh)))\n(vreset! VEHICLES {})")
	(title "clear-vehicles []"))

([FlightPro_Class220001] of  Rule

	(lhs "(Flight time ?t\n           callsign ?cs\n           coord ?crd \n           course ?crs\n           speed ?spd\n           altitude ?alt)\n?ob1 (Onboard)\n?ob2 (Onboard callsign ?cs time 0\n	(not= ?cs \"STOP\"))")
	(rhs "(retract ?ob1)\n(modify ?ob2 time ?t)\n(es/onboard ?cs ?crd ?crs ?spd ?alt)")
	(salience 0)
	(title "af:SwitchOnboard"))

([FlightPro_Class220007] of  CloFunction

	(source "(json-web-data (str (:url-flight-data F24) id))")
	(title "fl-info [id]"))

([FlightPro_Class220008] of  CloVar

	(source "(volatile! {})")
	(title "FL-INFOS"))

([FlightPro_Class220026] of  CloFunction

	(source "(set-html! \"commands-header\" \"<h4>Commands</h4>\")\n(set-html! \"commands\"\n  \"<select onchange='javascript:chart.client.command(this.value)'>\n   <option value='commands'>Commands</option>\n   <option value='watch-visible'>Watch visible area</option>\n   <option value='intersect'>Intersections</option>\n   <option value='move-to'>Move to Airport</option>\n   <option value='schedule'>Schedule Flight</option>\n   <option value='wikipedia'>Wikipedia</option>\n   <option value='clear'>Clear</option>\n   </select>\")")
	(title "show-chart-controls []"))

([FlightPro_Class220027] of  CloFunction

	(source "(GET (str (:command URL)\n  (condp = cmd\n    \"watch-visible\" (watch-visible)\n    cmd))\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "command [cmd]"))

([FlightPro_Class220029] of  CloFunction

	(source "(let [bnd (.getBounds @CHART)]\n  (str \"watch-visible?n=\" (.getNorth bnd)\n                             \"&s=\" (.getSouth bnd)\n                             \"&w=\" (.getWest bnd)\n                             \"&e=\" (.getEast bnd)))")
	(title "watch-visible []"))

([FlightPro_Class220030] of  CloFunction

	(source "([]\n  (let [[n s w e] @fr24/BBX]\n    (watch-visible {:n n :s s :w w :e e})))\n([params]\n  (println [:WATCH-VISIBLE params])\n  (let [{:keys [n s w e]} params]\n    (clear)\n    (fr24/set-bbx n s w e)\n    (fr24/start process-flights)\n    \"\"))")
	(title "watch-visible"))

([FlightPro_Class230000] of  CloFuncall

	(source "(count fr24.client/FLIGHTS)"))

([FlightPro_Class230001] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n       cosphi (Math/cos phi)]\n  (Math/atan2 (* cosphi (Math/sin ldiff))\n                      (- (* (Math/cos phi1) (Math/sin phi)) \n                          (* (Math/sin phi1) cosphi (Math/cos ldiff)))))")
	(title "spherical-azimuth [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([FlightPro_Class230003] of  Rule

	(lhs "(Flight time ?t\n           callsign ?cs\n           coord ?crd \n           course ?crs\n           speed ?spd\n           altitude ?alt)\n?ob (Onboard callsign ?cs time 0)\n(not Onboard)")
	(rhs "(modify ?ob time ?t)\n(es/onboard ?cs ?crd ?crs ?spd ?alt)")
	(salience 0)
	(title "af:StartOnboard"))

([FlightPro_Class230004] of  ClsRequired

	(cloFunctions
		[FlightPro_Class210000]
		[FlightPro_Class240006]
		[FlightPro_Class230001]
		[FlightPro_Class250002]
		[FlightPro_Class250003]
		[FlightPro_Class250004]
		[FlightPro_Class250005]
		[FlightPro_Class250006]
		[FlightPro_Class250007]
		[FlightPro_Class250008]
		[FlightPro_Class250009]
		[FlightPro_Class390001]
		[FlightPro_Class10002])
	(cloNamespace [FlightPro_Class240005])
	(title "Geo"))

([FlightPro_Class230005] of  CloFunction

	(source "(if (= @fr24/STATUS \"RUN\")\n  (watch-visible))")
	(title "update-watch-area []"))

([FlightPro_Class240000] of  CloVar

	(source "(/ Math.PI 10800)")
	(title "NMRAD"))

([FlightPro_Class240001] of  CloFunction

	(source "(let [car @carr]\n  (set-turn-point carr (:coord car) crs (:speed car))\n  (vswap! carr assoc :course crs))")
	(title "set-course [carr crs]"))

([FlightPro_Class240002] of  CloFunction

	(source "(let [car @carr]\n  (set-turn-point carr (:coord car) (:course car) spd)\n  (vswap! carr assoc :speed spd))")
	(title "set-speed [carr spd]"))

([FlightPro_Class240005] of  CloNamespace

	(title "calc.geo"))

([FlightPro_Class240006] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n       ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n       rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) ldiff ldiff)))]\n   (* 2.0 (Math/asin rval)))")
	(title "spherical-distance [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([FlightPro_Class250000] of  CloFuncall

	(source "c``"))

([FlightPro_Class250001] of  CloFuncall

	(source "cesium.core/DOC-SND"))

([FlightPro_Class250002] of  CloFunction

	(source "(let [phi (Math/toRadians lat)\n       lam (Math/toRadians lon)\n       dir (Math/toRadians crs)\n       way (* spd tim)\n       way (Math/toRadians (/ way 60))\n       [phi2 lam2] (spherical-between phi lam way dir)]\n   [(Math/toDegrees phi2) (Math/toDegrees lam2)])")
	(title "future-pos [[lat lon] crs spd tim]"))

([FlightPro_Class250003] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n       ld1 (Math/toRadians lo1)\n       fi2 (Math/toRadians la2)\n       ld2 (Math/toRadians lo2)\n       rad (spherical-distance fi1 ld1 fi2 ld2)]\n   (* (Math/toDegrees rad) 60))")
	(title "distance-nm [[la1 lo1] [la2 lo2]]"))

([FlightPro_Class250004] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n       ld1 (Math/toRadians lo1)\n       fi2 (Math/toRadians la2)\n       ld2 (Math/toRadians lo2)\n       rad (spherical-azimuth fi1 ld1 fi2 ld2)\n       deg (Math/toDegrees rad)]\n  (cond\n    (< deg 0) (+ deg 360.0)\n    (> deg 360.0) (- deg 360.0)\n    true deg))")
	(title "bear-deg [[la1 lo1] [la2 lo2]]"))

([FlightPro_Class250005] of  CloFunction

	(source "(let [denom (- (* (- y4 y3) (- x2 x1)) (* (- x4 x3) (- y2 y1)))]\n  (if (not (== denom 0.0))\n      (let [ua (/ (- (* (- x4 x3) (- y1 y3)) (* (- y4 y3) (- x1 x3))) denom)\n             ub (/ (- (* (- x2 x1) (- y1 y3)) (* (- y2 y1) (- x1 x3))) denom)]\n        (if (and (<= 0.0 ua 1.0) (<= 0.0 ub 1.0))\n            [(+ y1 (* ua (- y2 y1))) (+ x1 (* ua (- x2 x1)))]))))")
	(title "seg-intersect [x1 y1 x2 y2 x3 y3 x4 y4]"))

([FlightPro_Class250006] of  CloFunction

	(source "(let [[la3 lo3] (future-pos [la1 lo1] crs1 spd1 tim)\n       [la4 lo4] (future-pos [la2 lo2] crs2 spd2 tim)]\n   (seg-intersect lo1 la1 lo3 la3 lo2 la2 lo4 la4))")
	(title "future-intersect [[la1 lo1] crs1 spd1 [la2 lo2] crs2 spd2 tim]"))

([FlightPro_Class250007] of  CloFunction

	(source "(let [rb (+ b 180)]\n  (if (> rb 360) (- rb 360) rb))")
	(title "rev-bear [b]"))

([FlightPro_Class250008] of  CloFunction

	(source "(let [bea (bear-deg [lat1 lon1] [lat2 lon2])\n       ca1 (- bea crs)]\n  (cond\n    (> ca1 180) (- ca1 360)\n    (< ca1 -180) (+ ca1 360)\n    true ca1))")
	(title "course-angle [crs [lat1 lon1] [lat2 lon2]]"))

([FlightPro_Class250009] of  CloFunction

	(source "(let [ca (course-angle crs crd1 crd2)]\n   (or (> ca 90) (< ca -90)))")
	(title "abaft [crs crd1 crd2]"))

([FlightPro_Class250010] of  Rule

	(lhs "?ob (Onboard time ?t1 callsign ?cs)\n(Flight age \"CURRENT\" time ?t1 callsign ?cs course ?crs1)\n(Flight age \"NEW\"\n           callsign ?cs\n           course ?crs2 \n           coord ?crd2 \n           speed ?spd2 \n           altitude ?alt2\n           status ?s2\n           time ?t2)")
	(rhs "(modify ?ob time ?t2)\n(es/fly-onboard-to ?cs ?crs1 ?crs2 ?crd2 ?spd2 ?alt2 (- ?t2 ?t1))\n(println [:ONBOARD ?cs ?t2 ?crd2 ?alt2 ?crs2 ?spd2 ?s2])")
	(salience 0)
	(title "af:FlyOnboardTo"))

([FlightPro_Class250011] of  CloFunction

	(source "(let [crd3 (geo/future-pos crd2 crs2 spd2 (/ per 3600))\n       per3 (* 2 per)]\n  (asp/pump-in (:directives cmd/CHN)\n	{:directive :fly-onboard\n	 :callsign csn\n	 :vehicle {\n	   :coord crd2\n	   :altitude alt2\n	   :speed spd2\n	   :course crs2}\n	 :old-course crs1\n	 :period per3}))")
	(title "fly-onboard-to [csn crs1 crs2 crd2 spd2 alt2 per]"))

([FlightPro_Class260000] of  CloFunction

	(source "(println \"Loading Clojure Programs...\")\n(if-let [wps (ClojureTab/findAnnotated (cls-instances \"WorkingPrograms\") nil)]\n  (loop [i 1 pins (svs wps \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins))))\n  (println \"  Annotated instance of WorkingPrograms not found!\"))\n(println\"Starting Pro Server...\")\n(eval '(pro.server/start-server))\n(println\"Starting Expert System...\")\n(eval '(ru.rules/run-engine \"Flights Pro Run\"))")
	(title "clojure-work []"))

([FlightPro_Class260001] of  CloFuncall

	(source "(count @fr24.client/FLIGHTS)"))

([FlightPro_Class260002] of  CloFunction

	(source "(vreset! FLIGHTS {})")
	(title "clear-flights []"))

([FlightPro_Class260003] of  CloFunction

	(source "(println [:ONBOARD csg])\n(asp/pump-in (:directives cmd/CHN)\n	{:directive :carrier\n	 :callsign csg\n	 :vehicle {:coord crd\n	               :course crs\n	               :speed spd\n	               :altitude alt}})")
	(title "onboard [csg crd crs spd alt]"))

([FlightPro_Class270000] of  CloFunction

	(source "(println [:PARAMS params])\n(let [cls (:callsign params)]\n  (condp = cls\n    \"manual\" (do\n                     (asp/pump-in (:directives CHN)\n	{:directive :manual})\n                     (rete/assert-frame ['Onboard 'callsign \"STOP\"]))\n   \"select\" (let [lst (vec (sort (map fr24/callsign (keys @fr24/FLIGHTS))))\n                       lst (filter #(not (empty? %)) lst)]\n                  (asp/pump-in (:directives CHN)\n	{:directive :callsigns\n	 :list lst}))\n    (rete/assert-frame ['Onboard 'callsign cls 'time 0]))\n  \"\")")
	(title "onboard [params]"))

([FlightPro_Class270001] of  CloFunction

	(source "(set-html! \"onboard-fld\" \n  (str \"<select onchange='javascript:view3d.client.onboard(this.value)' style='width:96px'>\"\n          (if (empty? list)\n            (str \"<option value='callsign'>callsign</option>\n                   <option value='select'>select</option>\")\n            (str \"<option value='select'>select</option>\"\n              (apply str (for [e list]\n                                (str \"<option value='\" e \"'>\" e \"</option>\")))))\n        \"</select>\"))")
	(title "callsigns [list]"))

([FlightPro_Class270003] of  CloFuncall

	(source "fr24.client/STATUS"))

([FlightPro_Class280000] of  CloProgram

	(cloFunctions
		[FlightPro_Class290006]
		[FlightPro_Class200001]
		[FlightPro_Class250011]
		[FlightPro_Class260003]
		[FlightPro_Class90005])
	(cloNamespace [FlightPro_Class280001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class160009])
	(title "ES Functions"))

([FlightPro_Class280001] of  CloNamespace

	(source "(:require\n  [pro.commands :as cmd]\n  [async.proc :as asp]\n  [cesium.core :as czs]\n  [calc.core :as calc]\n  [calc.geo :as geo])")
	(title "es"))

([FlightPro_Class290000] of  CloFunction

	(source "([carr]\n  (camera-move carr (/ (:camera TIO) 1000)))\n([carr period]\n  (let [car @carr\n         [lat lon] (:coord car)\n         crs (:course car)\n         alt (int (/ (:altitude car) 3.28084))\n         alt (if (< alt 6) 6 alt)]\n      (czm/fly-to lat lon alt crs period))\n  true)")
	(title "camera-move"))

([FlightPro_Class290001] of  CloFunction

	(source "(println [:PARAMS params])\n(let [id (:id params)]\n  (if (fr24/dat id)\n    (rete/assert-frame ['Follow 'id id 'time 0])))")
	(title "follow [params]"))

([FlightPro_Class290002] of  CloFuncall

	(source "(ru.rules/pp 'Follow)"))

([FlightPro_Class290003] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2016.11.24 18:22:25.919 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class290004] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class100000])
	(%3ACREATION-TIMESTAMP "2016.11.24 18:24:16.125 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class290005] of  Rule

	(lhs "(Flight id ?id\n           coord ?crd\n           course ?crs\n           speed ?spd\n           status ?sts\n           age \"NEW\")")
	(rhs "(es/put-on-map ?id ?crd ?crs ?spd ?sts)")
	(salience 0)
	(title "af:PutFlightOnMap"))

([FlightPro_Class290006] of  CloFunction

	(source "(asp/pump-in (:instructions  cmd/CHN)\n	{:instruct :create-update\n	 :id id\n	 :vehicle {:coord crd\n	               :course crs\n	               :speed spd\n	               :status sts}})")
	(title "put-on-map [id crd crs spd sts]"))

([FlightPro_Class3] of  CloVar

	(source "(js/Cesium.CesiumTerrainProvider.\n  #js{:url \"//assets.agi.com/stk-terrain/world\"\n        :requestWaterMask false\n        :requestVertexNormals false})")
	(title "TERR-PROV"))

([FlightPro_Class30000] of  CloFunction

	(source "(letfn [(proc-fn [cr]\n                      (let [c @cr\n                             g (get c gear)\n                             target (:target g)\n                             step (* (:accel g) (:step g))]\n                        (if (calc/approx= (param c) target step)\n                            (do (param-fn cr target)\n                                  false)\n                            (do (param-fn cr (closer (param c) target step))\n                                  true))))]\n  (vswap! carr assoc-in [gear :eqz-status] (volatile! \"STOP\"))\n  (let [g (get @carr gear)]\n    (asp/start-process (:eqz-status g) \n                                   #(proc-fn carr) \n                                   (:time-out g))))")
	(title "equalize [carr gear param-fn param closer]"))

([FlightPro_Class300000] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [car @CARRIER\n         lat (num-val lat)\n         [_ lon] (:coord car)]\n    (mov/set-turn-point CARRIER [lat lon] (:course car) (:speed car))))")
	(title "latitude [lat]"))

([FlightPro_Class300003] of  CloFuncall

	(source "(ru.rules/facts-with-slot-value 'Flight 'callsign = \"UAL1545\")"))

([FlightPro_Class300006] of  CloFunction

	(source "(if (not= callsign (:mode @CARRIER))\n  (vswap! CARRIER assoc :mode callsign))\n(let [old-crs (:course @CARRIER)\n       new-crs (:course vehicle)]\n  (vswap! CARRIER merge vehicle)\n  (mov/set-turn-point CARRIER)\n  (if (> (calc/abs (- old-crs new-crs)) 10)\n    (turn-and-bank CARRIER new-crs)))")
	(title "carrier [callsign vehicle]"))

([FlightPro_Class30001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class30007]
		[FlightPro_Class30011]
		[FlightPro_Class30000]
		[FlightPro_Class130004]
		[FlightPro_Class110000])
	(cloNamespace [FlightPro_Class30002])
	(title "Dynamic"))

([FlightPro_Class30002] of  CloNamespace

	(source "(:require\n  [csasync.proc :as asp]\n  [calc.core :as calc]\n  [calc.geo :as geo])")
	(title "calc.dynamic"))

([FlightPro_Class30003] of  CloFunction

	(source "(float (+ y1 (/ (* (- y2 y1) (- x x1)) (- x2 x1))))")
	(title "linint [x [x1 y1] [x2 y2]]"))

([FlightPro_Class30004] of  CloFunction

	(source ";; left and right borders in table are exclusive\n(let [[lo hi] (split-with #(< (first %) x) table)]\n  (if (seq lo)\n    (if (seq hi)\n      (linint x (last lo) (first hi))\n      [:UB (second (last table))])\n    [:LB (second (first table))]))")
	(title "tabfun [x table]"))

([FlightPro_Class30005] of  CloFunction

	(source ";; inverse function, only for monotone(!!!) functions\n(tabfun y (map #(vector (second %)(first %)) table))")
	(title "i-mono-tabfun [y table]"))

([FlightPro_Class30006] of  CloFunction

	(source "(let [res (tabfun x table)]\n  (if (vector? res) (second res) res))")
	(title "smooth-tabfun [x table]"))

([FlightPro_Class30007] of  CloFunction

	(source "(cond\n (< from to) (+ from step)\n (> from to) (- from step)\n true to)")
	(title "step-closer [from to step]"))

([FlightPro_Class30011] of  CloFunction

	(source "(let [dif (- to from)]\n  (cond \n    (> dif 0)\n      (if (<= dif 180)\n        (+ from step)\n        (geo/norm-crs (- from step)))\n    (< dif 0) \n      (if (>= dif -180)\n        (- from step)\n        (geo/norm-crs (+ from step)))\n    true to))")
	(title "course-closer [from to step]"))

([FlightPro_Class30025] of  CloFunction

	(source "(cond\n  (> x y) (< (- x y) eps)\n  (< x y) (< (- y x) eps)\n  true true)")
	(title "approx= [x y eps]"))

([FlightPro_Class30026] of  CloFunction

	(source "(vswap! carr assoc-in [:rudder :target] course)\n(vswap! carr assoc-in [:rudder :accel] accel)\n(dyn/equalize carr :rudder set-course :course dyn/course-closer)")
	(title "turn [carr course accel]"))

([FlightPro_Class30027] of  CloFunction

	(source "(vswap! carr assoc-in [:engine :target] speed)\n(dyn/equalize carr :engine set-speed :speed dyn/step-closer)")
	(title "accel [carr speed]"))

([FlightPro_Class310000] of  CloFunction

	(source "(let [id (:id params)]\n  (if-let [inf (fr24/fl-info id)]\n    (let [cal (fr24/callsign id)\n           apt (inf \"airport\")\n           acr (inf \"aircraft\")\n           tim (inf \"time\")\n           img (get (first (get-in acr [\"images\" \"thumbnails\"])) \"src\")\n           [lat lon] (fr24/coord id)\n           dat [[\"from\" (or (get-in apt [\"origin\" \"name\"]) \"-\")]\n                  [\"to\" (or (get-in apt [\"destination\" \"name\"]) \"-\")]\n                  [\"airline\" (or (get-in inf [\"airline\" \"short\"]) \"-\")]\n                  [\"real-departure\" (or (get-in tim [\"real\" \"departure\"]) \"-\")]\n                  [\"scheduled-arrival\" (or (get-in tim [\"scheduled\" \"arrival\"]) \"-\")]\n                  [\"aircraft\" (or (get-in acr [\"model\" \"text\"]) \"-\")]\n                  [\"latitude\" (or lat \"-\")]\n                  [\"longitude\" (or lon \"-\")]\n                  [\"course\" (or (fr24/course id) \"-\")]\n                  [\"speed\" (or (fr24/speed id) \"-\")]\n                  [\"altitude\" (or (fr24/altitude id) \"-\")]\n                  [(str \"<input type='button' style='color:purple' value='Trail'\n                             onclick='chart.client.trail(\\\"\" id \"\\\")' >\")\n                   (str \"<input type='button' style='color:blue' value='Follow'\n                             onclick='chart.client.follow(\\\"\" id \"\\\")' >\")]\n                  [\"\"\n                   \"<input type='button' style='color:red' value='Stop'\n                       onclick='chart.client.stopfollow()' >\"]]\n           htm (make-info-html cal img dat)]\n      (asp/pump-in (:instructions CHN)\n        {:instruct :popup\n         :id (:id params)\n         :html htm\n         :time (:popup TIM)}))))\n\"\"")
	(title "info [params]"))

([FlightPro_Class310001] of  CloVar

	(source "{:popup 30000\n :trail 30000}")
	(title "TIM"))

([FlightPro_Class310002] of  CloFunction

	(source "([id html time]\n  (let [vmp (@VEHICLES id)\n         [lat lon] (:coord @vmp)]\n    (popup lat lon html time)))\n([lat lon html time]\n  (let [pop (-> js/L (.popup {:maxWidth 600 :maxHeight 800 })\n                (.setLatLng (array lat lon))\n                (.setContent html))]\n    (.addLayer @CHART pop)\n    (if (> time 0)\n        (asp/delayer #(.removeLayer @CHART pop)\n                            time))))")
	(title "popup"))

([FlightPro_Class310003] of  CloFunction

	(source "(go (<! (timeout time))\n  (func))")
	(title "delayer [func time]"))

([FlightPro_Class310005] of  CloFunction

	(source "(let [head (str \"<h3>\" call \"</h3>\")\n       itag (str \"<img src=\\\"\" img \"\\\">\")\n       rows (for [[k v] dat]\n                 (str \"<tr><td>\" k \"</td><td>\" v \"</td></tr>\"))\n      rows (apply str rows)]\n  (str head itag \"<table>\" rows \"</table>\"))")
	(title "make-info-html [call img dat]"))

([FlightPro_Class310006] of  CloFunction

	(source "(if (number? x) x (rdr/read-string x))")
	(title "num-val [x]"))

([FlightPro_Class320000] of  CloFunction

	(source "{:coord   [(num-val (ctl/get-value \"input-lat\"))\n               (num-val (ctl/get-value \"input-lon\"))]\n :course   (num-val (ctl/get-value \"input-crs\"))\n :speed    (num-val (ctl/get-value \"input-spd\"))\n :altitude (num-val (ctl/get-value \"input-alt\"))}")
	(title "manual-vehicle []"))

([FlightPro_Class320001] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [car @CARRIER\n         lon (num-val lon)\n         [lat _] (:coord car)]\n    (mov/set-turn-point CARRIER [lat lon] (:course car) (:speed car))))")
	(title "longitude [lon]"))

([FlightPro_Class320010] of  RuleSet

	(rules
		[FlightPro_Class430010]
		[FlightPro_Class290005]
		[FlightPro_Class320013]
		[FlightPro_Class320012]
		[FlightPro_Class320013]
		[FlightPro_Class410020]
		[FlightPro_Class350001]
		[FlightPro_Class370003]
		[FlightPro_Class230003]
		[FlightPro_Class250010]
		[FlightPro_Class370002]
		[FlightPro_Class220001]
		[FlightPro_Class200000]
		[FlightPro_Class320011]
		[FlightPro_Class410002]
		[FlightPro_Class410001]
		[FlightPro_Class390000])
	(templates
		[Flight]
		[Onboard]
		[Follow])
	(title "All Flights"))

([FlightPro_Class320011] of  Rule

	(lhs "?of (Flight id ?id age \"OLD\")\n?cf (Flight id ?id age \"CURRENT\")\n?nf (Flight id ?id age \"NEW\")")
	(rhs "(retract ?of)\n(modify ?cf age \"OLD\")\n(modify ?nf age \"CURRENT\")")
	(salience -1)
	(title "af:FlightHistory3"))

([FlightPro_Class320012] of  Rule

	(lhs "(Flight id ?id altitude ?a1 age \"OLD\")\n(Flight id ?id altitude ?a2 age \"CURRENT\")\n?fl (Flight id ?id altitude ?a3 age \"NEW\"\n	status ?s3 \n	coord ?crd3 \n	course ?crs3\n	speed ?spd3\n	((not= ?s3 \"DESCEND\")\n	 (> ?a1 ?a2 ?a3)))")
	(rhs "(modify ?fl status \"DESCEND\")\n(es/put-on-map ?id ?crd3 ?crs3 ?spd3 ?s3)")
	(salience 0)
	(title "af:Descending"))

([FlightPro_Class320013] of  Rule

	(lhs "(Flight id ?id altitude ?a1 age \"OLD\")\n(Flight id ?id altitude ?a2 age \"CURRENT\")\n?fl (Flight id ?id altitude ?a3 age \"NEW\"\n	status ?s3 \n	coord ?crd3 \n	course ?crs3\n	speed ?spd3\n	((not= ?s3 \"CLIMB\")\n	 (< ?a1 ?a2 ?a3)))")
	(rhs "(modify ?fl status \"CLIMB\")\n(es/put-on-map ?id ?crd3 ?crs3 ?spd3 ?s3)")
	(salience 0)
	(title "af:Climbing"))

([FlightPro_Class320014] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(mode run)
	(rule-sets
		[FlightPro_Class320010]
		[FlightPro_Class440007])
	(steps 1)
	(title "Flights Pro Run"))

([FlightPro_Class320015] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class320014])
	(%3ACREATION-TIMESTAMP "2016.11.23 17:10:20.165 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class320016] of  CloFunction

	(source "(let [cal @CALLS\n       onb @ONBOARD]\n  (doseq [[k v] (seq @fls)]\n    (let [cls (fr24/callsign v)\n           veh {:coord (fr24/coord v)\n                   :course (fr24/course v)\n                   :speed (fr24/speed v)\n                   :altitude (fr24/altitude v)\n                   :status \"LEVEL\"}]\n      (if (= cls onb)\n        (asp/pump-in DIR-CHN\n          {:directive :carrier\n           :callsign cls\n           :vehicle veh}))\n      (asp/pump-in INS-CHN\n        {:instruct :create-update\n         :id k\n         :vehicle veh})))\n  (if (and (empty? cal) (= onb \"select\"))\n    (let [cal (map fr24/callsign (keys @fls))]\n      (vreset! CALLS cal)\n      (async.proc/pump-in DIR-CHN \n        {:directive :callsigns :list cal}))))")
	(title "process-flights0 [fls]"))

([FlightPro_Class320022] of  CloFunction

	(source "(int (/ (System/currentTimeMillis) 1000))")
	(title "current-time []"))

([FlightPro_Class330000] of  CloFuncall

	(source "(ru.rules/facts-with-slot-value 'Flight 'id = \"UAL1545\")"))

([FlightPro_Class330001] of  CloFuncall

	(source "(ru.rules/facts-with-slot-value 'Flight 'id = \"bf9fab1\")"))

([FlightPro_Class330002] of  CloVar

	(source "(volatile! \"STOP\")")
	(title "CAM-PROC"))

([FlightPro_Class330003] of  CloVar

	(source "{:base (str HOST PORT \"/\")\n :chart (str HOST PORT \"/chart/\")\n :directives (str HOST PORT \"/directives/\")\n :instructions (str HOST PORT \"/instructions/\")\n :command (str HOST PORT \"/command/\")\n :question (str HOST PORT \"/question/\")\n :answer (str HOST PORT \"/answer/\")}")
	(title "URL"))

([FlightPro_Class330004] of  CloVar

	(source "{:carrier 1000\n :camera 4200\n :directives 911\n :instructions 979\n :vehicles 200\n :display 831}")
	(title "TIO"))

([FlightPro_Class330005] of  CloFunction

	(source "(.-innerHTML (by-id id))")
	(title "get-html [id]"))

([FlightPro_Class330006] of  CloFunction

	(source "(.-value (by-id id))")
	(title "get-value [id]"))

([FlightPro_Class340000] of  CloFunction

	(source "\"yes\"")
	(title "terrain [params]"))

([FlightPro_Class340002] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'id = \"bf9fab1\")] (protege.core/ctpl e))"))

([FlightPro_Class350000] of  CloFunction

	(source "(let [pts (if (not (empty? trail))\n               trail\n               (if-let [inf (fr24/fl-info id)]\n                   (mapcat #(list (% \"lat\") (% \"lng\") (% \"alt\")) (inf \"trail\"))))]\n  (if pts\n    (asp/pump-in (:instructions CHN)\n        {:instruct :trail\n         :id id\n         :points pts\n         :options {:weight 3\n                        :color \"purple\"}\n         :time (:trail TIM)}))\n  \"\")")
	(title "do-trail [id trail]"))

([FlightPro_Class350001] of  Rule

	(lhs "?f (Follow id ?id time ?t1)\n(Flight id ?id coord ?crd1 altitude ?alt1 age \"OLD\" time ?t1)\n(Flight id ?id coord ?crd2 altitude ?alt2 age \"CURRENT\")\n(Flight id ?id coord ?crd3 altitude ?alt3 age \"NEW\" time ?t3 callsign ?cs)")
	(rhs "(println [:FOLLOW ?cs])\n(let [[lat1 lon1] ?crd1\n       [lat2 lon2] ?crd2\n       [lat3 lon3] ?crd3]\n  (pro.commands/set-map-view ?crd3)\n  (pro.commands/do-trail ?id \n	[lat3 lon3 ?alt3\n	 lat2 lon2 ?alt2\n	 lat1 lon1 ?alt1])\n  (modify ?f time ?t3))")
	(salience 0)
	(title "af:FollowFlight"))

([FlightPro_Class360000] of  CloFunction

	(source "(let [ops (clj->js options)\n       pts (map #(js/L.LatLng. (first %) (second %)) (partition 3 points))\n       pts (clj->js pts)\n       trl (js/L.polyline pts ops)]\n    (.addLayer @CHART trl)\n    (if (> time 0)\n        (asp/delayer #(.removeLayer @CHART trl)\n                            time)))")
	(title "add-trail [id points options time]"))

([FlightPro_Class370000] of  CloFunction

	(source "(let [cen (js/L.LatLng. lat lon)\n        zom (.getZoom @CHART)]\n  (.setView @CHART cen zom {})\n  (new-visible))")
	(title "map-center [[lat lon]]"))

([FlightPro_Class370001] of  CloFunction

	(source "(let [[n s w e] (visible-map)\n        url (str (:command URL) \"visible?n=\" n \"&s=\" s \"&w=\" w \"&e=\" e)]\n    (GET url {:handler (fn [response])\n              :error-handler error-handler}))")
	(title "new-visible []"))

([FlightPro_Class370002] of  Rule

	(lhs "?ob1 (Onboard)\n?ob2 (Onboard callsign \"STOP\")")
	(rhs "(retract ?ob1 ?ob2)")
	(salience 0)
	(title "af:StopOnboard"))

([FlightPro_Class370003] of  Rule

	(lhs "?f1 (Follow  id ?id1 time ?t1)\n?f2 (Follow  id ?id2 time ?t2\n	((not= ?id1 ?id2)\n	 (= ?t2 0)))")
	(rhs "(retract ?f1)\n(if (= ?id2 \"STOP\")\n   (retract ?f2))")
	(salience 0)
	(title "af:StopOrSwitchFollow"))

([FlightPro_Class370004] of  CloFunction

	(source "(asp/pump-in (:instructions CHN)\n	{:instruct :map-center\n	 :coord coord})")
	(title "set-map-view [coord]"))

([FlightPro_Class380000] of  CloFunction

	(source "(GET (str (:command URL) \"stopfollow\")\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "stopfollow []"))

([FlightPro_Class380001] of  CloFunction

	(source "(GET (str (:command URL) \"trail?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "trail [id]"))

([FlightPro_Class380002] of  CloFunction

	(source "(println [:PARAMS params])\n(do-trail (:id params) [])")
	(title "trail [params]"))

([FlightPro_Class380003] of  CloFunction

	(source "(let [bnd (.getBounds @CHART)]\n  [(.getNorth bnd)\n   (.getSouth bnd)\n   (.getWest bnd)\n   (.getEast bnd)])")
	(title "visible-map []"))

([FlightPro_Class380004] of  CloFunction

	(source "(let [{:keys [n s w e]} params]\n  (fr24/set-bbx n s w e)\n  \"\")")
	(title "visible [params]"))

([FlightPro_Class390000] of  Rule

	(lhs "(Onboard callsign ?cs1)\n(Flight callsign ?cs1 coord ?c1 course ?crs1 age \"NEW\")\n(Flight id ?id2 coord ?c2 altitude ?a2 age \"CURRENT\" point4d ?p2 callsign ?cs2)\n(Flight id ?id2 coord ?c3 altitude ?a3 age \"NEW\" point4d ?p3 course ?crs3 \n	(< (calc.geo/distance-nm ?c1 ?c3) 10)))")
	(rhs "(cesium.core/leg ?cs2\n	(if (calc.geo/following? ?crs1 ?crs3)\n	  (es/URL-ICO \"FOLLOWING\")\n	  (es/URL-ICO \"COUNTER\")) \n	(calc.core/smooth-tabfun (calc.geo/distance-nm ?c1 ?c3) [[0 1.0][20 0.1]])\n	?p2\n	?p3)")
	(salience 0)
	(title "fl:CZML-LegGeneration"))

([FlightPro_Class390001] of  CloFunction

	(source "(let [dif (Math/abs (- crs2 crs1))]\n   (or (< dif 90) (> dif 270)))")
	(title "following? [crs1 crs2]"))

([FlightPro_Class390002] of  ClsRequired

	(cloFunctions
		[FlightPro_Class130003]
		[FlightPro_Class30025]
		[FlightPro_Class30003]
		[FlightPro_Class30004]
		[FlightPro_Class30005]
		[FlightPro_Class30006])
	(cloNamespace [FlightPro_Class400003])
	(title "Calculus"))

([FlightPro_Class390003] of  CloFunction

	(source "(rete/assert-frame ['Follow 'id \"STOP\" 'time 0])")
	(title "stopfollow [params]"))

([FlightPro_Class4] of  CloVar

	(source "(js/Cesium.Viewer. \n  \"cesiumContainer\" \n  #js{:animation false})")
	(title "VIEWER"))

([FlightPro_Class40000] of  HTML

	(source "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Cockpit View</title>\n    <link rel=\"stylesheet\" href=\"css/cesium.css\" />\n    <script src=\"Cesium/Cesium.js\"></script>\n    <style>\n      @import url(Cesium/Widgets/widgets.css);\n      #cesiumContainer {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        overflow: hidden;\n        padding: 0;\n        font-family: sans-serif;\n      }\n      html {\n        height: 100%;\n      }\n      body {\n        padding: 0;\n        margin: 0;\n        overflow: hidden;\n        height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"cesiumContainer\"></div>\n    <div id=\"autopilot\"></div>\n    <div id=\"course\"></div><div id=\"course-fld\"></div><div id=\"accel\"></div>\n    <div id=\"speed\"></div><div id=\"speed-fld\"></div><div id=\"speed-acl\"></div>\n    <div id=\"altitude\"></div><div id=\"altitude-fld\"></div><div id=\"altitude-acl\"></div>\n    <div id=\"lat\"></div></div><div id=\"latitude-fld\"></div>\n    <div id=\"lon\"></div></div><div id=\"longitude-fld\"></div>\n    <div id=\"camera\"></div>\n    <div id=\"onboard\"></div><div id=\"onboard-fld\"></div>\n    <div id=\"view\"></div><div id=\"view-fld\"></div>\n    <div id=\"pitch\"></div><div id=\"pitch-fld\"></div>\n    <div id=\"roll\"></div><div id=\"roll-fld\"></div>\n    <script>\n      Cesium.BingMapsApi.defaultKey = 'Au5mRx6ODcM1h4EAWNyK8wWoyaTjeLuvGkacr7WRZgmAt4QtmyV03OrN1TYb-cr7';\n    </script>\n    <script type=\"text/javascript\" src=\"js/main.js\"></script>\n  </body>\n</html>")
	(store-in "resources/public")
	(title "cezium"))

([FlightPro_Class400000] of  CloProgram

	(cloFunctions
		[FlightPro_Class320022]
		[FlightPro_Class190000]
		[FlightPro_Class210001]
		[FlightPro_Class310005]
		[FlightPro_Class220030]
		[FlightPro_Class230005]
		[FlightPro_Class350000]
		[FlightPro_Class370004]
		[FlightPro_Class310000]
		[FlightPro_Class270000]
		[FlightPro_Class340000]
		[FlightPro_Class290001]
		[FlightPro_Class380004]
		[FlightPro_Class380002]
		[FlightPro_Class390003]
		[FlightPro_Class420001]
		[FlightPro_Class420000]
		[FlightPro_Class420021])
	(cloNamespace [FlightPro_Class400001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class20004]
		[FlightPro_Class310001])
	(title "Pro Commands"))

([FlightPro_Class400001] of  CloNamespace

	(source "(:use protege.core)\n(:require \n  [compojure.core :refer [GET]]\n  [fr24.client :as fr24]\n  [async.proc :as asp]\n  [rete.core :as rete]\n  [cesium.core :refer [iso8601curt]])")
	(title "pro.commands"))

([FlightPro_Class400003] of  CloNamespace

	(title "calc.core"))

([FlightPro_Class410000] of  CloFuncall

	(source "(ru.rules/lp :all)"))

([FlightPro_Class410001] of  Rule

	(lhs "?nf1 (Flight id ?id age \"NEW\" time ?t1)\n?nf2 (Flight id ?id age \"NEW\" time ?t2\n	(> ?t2 ?t1))")
	(rhs "(modify ?nf1 age \"CURRENT\")")
	(salience -3)
	(title "af:FlightHistory1"))

([FlightPro_Class410002] of  Rule

	(lhs "?cf1 (Flight id ?id age \"CURRENT\" time ?t1)\n?cf2 (Flight id ?id age \"CURRENT\" time ?t2\n	(> ?t2 ?t1))")
	(rhs "(modify ?cf1 age \"OLD\")")
	(salience -2)
	(title "af:FlightHistory2"))

([FlightPro_Class410003] of  CloFuncall

	(source "(rete.core/facts-with-slot-value 'Flight 'callsign = \"C560\")"))

([FlightPro_Class410004] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"C560\"))"))

([FlightPro_Class410005] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"ASQ5525\"))"))

([FlightPro_Class410006] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"AAL1103\"))"))

([FlightPro_Class410007] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"FDX1787\"))"))

([FlightPro_Class410008] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"UAL1545\"))"))

([FlightPro_Class410009] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'Flight 'callsign = \"AWI3851\"))"))

([FlightPro_Class410010] of  CloFuncall

	(source "(dseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"AWI3851\")] (protege.core/ctpl e))"))

([FlightPro_Class410011] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"AWI3851\")] (protege.core/ctpl e))"))

([FlightPro_Class410012] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"CL60\")] (protege.core/ctpl e))"))

([FlightPro_Class410013] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"UAL4297\")] (protege.core/ctpl e))"))

([FlightPro_Class410014] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"FDX1568\")] (protege.core/ctpl e))"))

([FlightPro_Class410015] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"SWA792\")] (protege.core/ctpl e))"))

([FlightPro_Class410016] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"3386143\")] (protege.core/ctpl e))"))

([FlightPro_Class410017] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"N662DS\")] (protege.core/ctpl e))"))

([FlightPro_Class410018] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"UCA4883\")] (protege.core/ctpl e))"))

([FlightPro_Class410019] of  CloFuncall

	(source "(doseq [e (rete.core/facts-with-slot-value 'Flight 'callsign = \"G150\")] (protege.core/ctpl e))"))

([FlightPro_Class410020] of  Rule

	(lhs "(Flight id ?id age \"OLD\" time ?t1)\n?f (Follow id ?id time 0)\n(not Follow)")
	(rhs "(modify ?f time ?t1)")
	(salience 0)
	(title "af:StartFollow"))

([FlightPro_Class420000] of  CloFunction

	(source "(println [:QUESTION pp])\n(if (= (:whom pp) \"direct\")\n  (asp/pump-in (:answer CHN) (direct-question pp))\n  (do (rete/assert-frame \n	['Question\n	 'predicate (:predicate pp)\n	 'subject (:subject pp)\n	 'object (:object pp)])\n        (rete/fire)))\n{:status 204}")
	(title "question [pp]"))

([FlightPro_Class420001] of  CloFunction

	(source "(condp = (:question pp)\n  \"airports\" (do	(rete/assert-frame ['Question 'predicate 'AIRPORTS\n			'subject 'COUNTRY\n			'object (:country pp)])\n	{:airports (->> (get (fr24/airports-by-country) (:country pp))\n		keys\n		sort)})\n  \"move-to\" (do (rete/assert-frame ['Question 'predicate 'MOVE-TO\n			'subject 'AIRPORT\n			'object (:airport pp)])\n	\"\")\n  true \"\")")
	(title "direct-question [pp]"))

([FlightPro_Class420002] of  CloFuncall

	(source "(fr24.client/direct-question {:question :contries})"))

([FlightPro_Class420003] of  CloFuncall

	(source "(pro.commands/direct-question {:question :contries})"))

([FlightPro_Class420004] of  CloFuncall

	(source "@fr24.client/AIRPORTS"))

([FlightPro_Class420005] of  CloFuncall

	(source "(keys @fr24.client/AIRPORTS)"))

([FlightPro_Class420006] of  CloFuncall

	(source "(pro.commands/direct-question {:question :countries})"))

([FlightPro_Class420007] of  CloFuncall

	(source "(async.proc/pump-out (:answer pro.commands/CHN))"))

([FlightPro_Class420008] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140005]
		[FlightPro_Class140004]
		[FlightPro_Class420010]
		[FlightPro_Class420011]
		[FlightPro_Class430001]
		[FlightPro_Class430002]
		[FlightPro_Class430003]
		[FlightPro_Class80002]
		[FlightPro_Class420019]
		[FlightPro_Class420020]
		[FlightPro_Class450000])
	(cloNamespace [FlightPro_Class420009])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003])
	(title "Ask Master"))

([FlightPro_Class420009] of  CloNamespace

	(source "(:require [ajax.core :refer [GET]])")
	(title "ask.master"))

([FlightPro_Class420010] of  CloFunction

	(source "(condp = typ\n    :itself (apply str (for [e lst]\n                         (str \"<option value='\" e \"'>\" e \"</option>\")))\n    :count  (apply str (for [i (range (count lst))]\n                            (str \"<option value='\" i \"'>\" (nth lst i) \"</option>\"))))")
	(title "options [lst typ]"))

([FlightPro_Class420011] of  CloFunction

	(source "(let [sel (str \"<select onchange='javascript:\" ns \".handler1(this.value)' style='width:\" wid \"px'>\"\n                 \"<option value='-1'>\" header \"</option>\"\n                 (options lst typ)\n                 \"</select>\")]\n    (set-html! \"element1\" sel))")
	(title "selector1 [ns header lst typ wid]"))

([FlightPro_Class420019] of  CloFunction

	(source "(GET (:question URL) \n    {:params params\n     :error-handler error-handler\n     :response-format :transit})")
	(title "ask-server [params]"))

([FlightPro_Class420020] of  CloFunction

	(source "(GET (:answer URL) \n  {:handler handler\n   :error-handler error-handler\n   :response-format :transit})")
	(title "get-answer [handler]"))

([FlightPro_Class420021] of  CloFunction

	(source ";;(println :MOVE-TO params)\n(asp/pump-in (:instructions CHN)\n  {:instruct :move-to\n   :countries (sort (keys (fr24/airports-by-country)))}) \n\"\"")
	(title "move-to [params]"))

([FlightPro_Class430000] of  CloFunction

	(source ";;(println :MOVE-TO ins)\n(let [cts (:countries ins)\n       aps (:airports ins)]\n  (cond\n    cts (do (am/selector1 \"chart.client\" \"countries\" cts :itself 130)\n            (defn handler1 [sel]\n	(am/ask-server {:whom \"direct\"\n		  :question \"airports\"\n		  :country sel})\n	(am/get-answer move-to)))\n    aps (do (am/selector2 \"chart.client\" \"airports\" aps :itself 130)\n            (defn handler2 [sel]\n	(am/ask-server {:whom \"direct\"\n		  :question \"move-to\"\n		  :airport sel})\n	(am/clear-dialog))) ))")
	(title "move-to [ins]"))

([FlightPro_Class430001] of  CloFunction

	(source "(let [sel (str \"<select onchange='javascript:\" ns \".handler2(this.value)' style='width:\" wid \"px'>\"\n                 \"<option value='-1'>\" header \"</option>\"\n                 (options lst typ)\n                 \"</select>\")]\n    (set-html! \"element2\" sel))")
	(title "selector2 [ns header lst typ wid]"))

([FlightPro_Class430002] of  CloFunction

	(source "(let [sel (str \"<select onchange='javascript:\" ns \".handler3(this.value)' style='width:\" wid \"px'>\"\n                 \"<option value='-1'>\" header \"</option>\"\n                 (options lst typ)\n                 \"</select>\")]\n    (set-html! \"element3\" sel))")
	(title "selector3 [ns header lst typ wid]"))

([FlightPro_Class430003] of  CloFunction

	(source "(let [sel (str \"<select onchange='javascript:\" ns \".handler4(this.value)' style='width:\" wid \"px'>\"\n                 \"<option value='-1'>\" header \"</option>\"\n                 (options lst typ)\n                 \"</select>\")]\n    (set-html! \"element4\" sel))")
	(title "selector4 [ns header lst typ wid]"))

([FlightPro_Class430010] of  Rule

	(lhs "?f1 (Flight id ?id time ?t1)\n(Flight age \"NEW\" time ?t2\n	(> (- ?t2 ?t1) 120))")
	(rhs "(es/put-off-map ?id)\n(retract ?f1)")
	(salience 0)
	(title "af:ForgetOldFlight"))

([FlightPro_Class440000] of  CloFuncall

	(source "(println 1)"))

([FlightPro_Class440007] of  RuleSet

	(templates [Question])
	(title "Commands"))

([FlightPro_Class450000] of  CloFunction

	(source "(set-html! \"element1\" \"\")\n(set-html! \"element2\" \"\")\n(set-html! \"element3\" \"\")\n(set-html! \"element4\" \"\")")
	(title "clear-dialog []"))

([FlightPro_Class450001] of  CloFuncall

	(source "(async.proc/one-out (:answer pro.commands/CHN))"))

([FlightPro_Class5] of  CloVar

	(source "(js/Cesium.CzmlDataSource.)")
	(title "CZM-SRC"))

([FlightPro_Class50000] of  CloFunction

	(source "(vswap! CAMERA assoc key val)")
	(title "camera [key val]"))

([FlightPro_Class50001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class10002]
		[FlightPro_Class8]
		[FlightPro_Class9]
		[FlightPro_Class10001]
		[FlightPro_Class50000]
		[FlightPro_Class10003])
	(cloNamespace [FlightPro_Class1])
	(cloVars
		[FlightPro_Class3]
		[FlightPro_Class4]
		[FlightPro_Class5]
		[FlightPro_Class0])
	(documentation [FlightPro_Class60000])
	(title "Cezium Client"))

([FlightPro_Class60000] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Cesium Client<br></b><br>API<br><br>1. fly-to [lat lon alt crs per]<br>2. camera [key val], keys: :view, :altitude, :pitch, :roll<br><br>CZML rendering support<br><br>Initialization: (init-3D-view)</body>\n</html>"))

([FlightPro_Class60001] of  CloNamespace

	(source "(:require\n  [csasync.proc :as asp]\n  [czm.core :as czm]\n  [view3d.controls :as ctl]\n  [carr.move :as mov]\n  [calc.core :as calc]\n  [calc.dynamic :as dyn]\n  [cognitect.transit :as t]\n  [ajax.core :refer (GET)]\n  [cljs.reader :as rdr]\n  [nightlight.repl-server])")
	(title "view3d.client"))

([FlightPro_Class7] of  CloVar

	(source "(js/EventSource. (str BSE-URL \"czml/\"))")
	(title "EVT-SRC"))

([FlightPro_Class70000] of  CloVar

	(source "\"http://localhost:\"")
	(title "HOST"))

([FlightPro_Class70001] of  CloFunction

	(source "(enable-console-print!)\n(GET (str (:command URL) \"terrain\")\n	{:handler (fn [response]\n		(czm/init-3D-view (:base URL) response))\n	 :error-handler error-handler})\n(asp/repeater mov/move CARRIER (:carrier TIO))\n(asp/repeater ctl/show-flight-data CARRIER (:display TIO))\n(asp/repeater receive-directives (:directives TIO))\n(ctl/show-controls)")
	(title "on-load []"))

([FlightPro_Class70002] of  CloProgram

	(cloFunctions
		[FlightPro_Class70007]
		[FlightPro_Class70004]
		[FlightPro_Class70005]
		[FlightPro_Class70006]
		[FlightPro_Class70010]
		[FlightPro_Class20010]
		[FlightPro_Class90000]
		[FlightPro_Class70011]
		[FlightPro_Class160018])
	(cloNamespace [FlightPro_Class70003])
	(title "Async Processing"))

([FlightPro_Class70003] of  CloNamespace

	(source "(:require \n  [clojure.core.async :refer [chan alts!! put! <! <!! go timeout close!]])")
	(title "async.proc"))

([FlightPro_Class70004] of  CloFunction

	(source "(when (not= @status \"RUN\") \n  (vreset! status \"RUN\")\n  (go (do \n          (while (and (= @status \"RUN\")\n                            (proc-fn))\n                (<! (timeout time-out)))\n          (vreset! status \"STOP\")))\n  @status)")
	(title "start-process [status proc-fn time-out]"))

([FlightPro_Class70005] of  CloFunction

	(source "(vreset! status \"FINISH\")")
	(title "stop-process [status]"))

([FlightPro_Class70006] of  CloFunction

	(source "(= @status \"RUN\")")
	(title "running? [status]"))

([FlightPro_Class70007] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([FlightPro_Class70008] of  ClsRequired

	(cloFunctions
		[FlightPro_Class70007]
		[FlightPro_Class70004]
		[FlightPro_Class70005]
		[FlightPro_Class70006]
		[FlightPro_Class160018]
		[FlightPro_Class310003])
	(cloNamespace [FlightPro_Class70009])
	(title "CS Async Processing"))

([FlightPro_Class70009] of  CloNamespace

	(source "(:require \n  [cljs.core.async :refer [<! timeout close!]])\n(:require-macros \n  [cljs.core.async.macros :refer [go]])")
	(title "csasync.proc"))

([FlightPro_Class70010] of  CloFunction

	(source "(put! chn val)")
	(title "pump-in [chn val]"))

([FlightPro_Class70011] of  CloFunction

	(source "(chan)")
	(title "mk-chan []"))

([FlightPro_Class8] of  CloFunction

	(source "(let [data (.-data e)\n       data (js/JSON.parse data)]\n  (.process CZM-SRC data))")
	(title "cz-processor [e]"))

([FlightPro_Class80000] of  CloFunction

	(source "(vswap! carr assoc :altitude alt)")
	(title "set-altitude [carr alt]"))

([FlightPro_Class80001] of  CloFunction

	(source "(GET (:directives URL) {:handler directives-handler\n                       :error-handler error-handler})")
	(title "receive-directives []"))

([FlightPro_Class80002] of  CloFunction

	(source "(let [{:keys [status status-text]} response]\n  (println (str \"AJAX ERROR: \" status \" \" status-text)))")
	(title "error-handler [response]"))

([FlightPro_Class80003] of  CloFunction

	(source "(doseq [{:keys [directive] :as dir} (read-transit response)]\n  ;;(println [:DIRECTIVE dir])\n  (condp = directive\n    :manual (do (if (= (:mode @CARRIER) \"?\")\n	  (carrier \"MANUAL\" (manual-vehicle))\n	  (vswap! CARRIER assoc :mode \"MANUAL\"))\n	(asp/start-process CAM-PROC #(camera-move CARRIER) (:camera TIO)))\n    :callsigns (let [{:keys [list]} dir]\n            (ctl/callsigns (conj list \"manual\")))\n    :carrier (let [{:keys [callsign vehicle]} dir]\n            (asp/stop-process CAM-PROC)\n            (carrier callsign vehicle)\n            (camera-move CARRIER))\n    :fly-onboard (let [{:keys [callsign vehicle old-course period]} dir]\n            (carrier callsign vehicle)\n            (camera-move CARRIER period)\n            (if (> (:altitude vehicle) 60)\n              (roll (dyn/bank old-course (:course vehicle) (:bank-params @CARRIER)))))\n    (println (str \"Unknown directive: \" [directive dir]))))")
	(title "directives-handler [response]"))

([FlightPro_Class80004] of  CloFunction

	(source "(t/read (t/reader :json) x)")
	(title "read-transit [x]"))

([FlightPro_Class9] of  CloFunction

	(source "(let [dest (js/Cesium.Cartesian3.fromDegrees lon lat alt)]\n  (.flyTo (.-camera VIEWER)\n            #js{:destination dest\n                  :orientation #js{:heading (js/Cesium.Math.toRadians hea)\n                                           :pitch   (js/Cesium.Math.toRadians pit)\n                                           :roll    (js/Cesium.Math.toRadians rol)}\n                  :duration per\n                  :easingFunction (fn [time] time)}))")
	(title "fly-control [lat lon alt hea pit rol per]"))

([FlightPro_Class90000] of  CloFunction

	(source "(loop [out []]\n  (if (empty? out)\n    (recur (<!! chn))\n    out))")
	(title "one-out [chn]"))

([FlightPro_Class90001] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (vswap! CARRIER assoc-in [:engine :accel] accel))")
	(title "accel-speed [accel]"))

([FlightPro_Class90002] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (vswap! CARRIER assoc-in [:elevator :accel] accel))")
	(title "accel-altitude [accel]"))

([FlightPro_Class90005] of  CloFunction

	(source "(loop [n 1 y z]\n  (if (seq y)\n    (let [[onb1 cs1 t1 crd1 a1 c1 s1 gnd1] (first y)\n           [onb2 cs2 t2 crd2 a2 c2 s2 gnd2] (second y)\n           dt (if (and t1 t2) (- t2 t1) -7777)\n           da (if (and a1 a2) (- a2 a1) -7777)\n           ds (if (and s1 s2) (- s2 s1) -7777)\n           va (if (and dt da) (/ da dt) -7777)\n           vs (if (and dt ds) (/ ds dt) -7777)]\n      (protege.core/ctpl [n onb2 cs2 t2 crd2 a2 c2 s2 gnd2 \n        (read-string (format \"%.1f\" (float va)))\n        (read-string (format \"%.2f\" (float vs)))])\n      (recur (inc n) (rest y))) ))")
	(title "proc [z]"))
