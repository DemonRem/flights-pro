; Sat Mar 25 18:37:24 MSK 2017
; 
;+ (version "3.5")
;+ (build "Build 663")

([FlightPro_Class0] of  CloVar

	(source "(volatile! {:view \"FORWARD\"\n                        :pitch -20\n                        :roll 0})")
	(title "CAMERA"))

([FlightPro_Class1] of  CloNamespace

	(source "(:require\n  [calc.dynamic :as dyn]\n  [calc.geo :as geo])")
	(title "czm.core"))

([FlightPro_Class10000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(ProServer)"))

([FlightPro_Class100000] of  WorkingPrograms

	(cloPrograms
		[FlightPro_Class390002]
		[FlightPro_Class230004]
		[FlightPro_Class70002]
		[FlightPro_Class20025]
		[FlightPro_Class480000]
		[FlightPro_Class180002]
		[RuleEngine_Class30000]
		[Example_Class10000]
		[GeoNamesWikipedia_Class0]
		[OSMData_Class1]
		[FlightPro_Class670000]
		[FlightPro_Class400000]
		[FlightPro_Class20000]
		[FlightPro_Class280000])
	(title "FlightPro Programs"))

([FlightPro_Class10001] of  CloFunction

	(source ";;(println [:CZ-FLY-TO lat lon alt crs per])\n(let [pitch (condp = (:view @CAMERA)\n                \"UP\" 90\n                \"DOWN\" -90\n                (:pitch @CAMERA))\n        roll (:roll @CAMERA)\n        head (geo/norm-crs (condp = (:view @CAMERA)\n                         \"BACKWARD\" (+ crs 180)\n                         \"RIGHT\" (+ crs 90)\n                         \"LEFT\" (- crs 90)\n                         \"FORWARD-RIGHT\" (+ crs 45)\n                         \"FORWARD-LEFT\" (- crs 45)\n                         \"BACKWARD-RIGHT\" (+ crs 135)\n                         \"BACKWARD-LEFT\" (- crs 135)\n                         crs))]\n    (fly-control lat lon alt head pitch roll per))")
	(title "fly-to [lat lon alt crs per]"))

([FlightPro_Class10002] of  CloFunction

	(source "(cond\n   (> x 360) (- x 360)\n   (< x 0) (+ x 360)\n   true x)")
	(title "norm-crs [x]"))

([FlightPro_Class100023] of  ClsRequired

	(cloFunctions
		[FlightPro_Class100026]
		[FlightPro_Class100027]
		[FlightPro_Class240001]
		[FlightPro_Class240002]
		[FlightPro_Class80000]
		[FlightPro_Class100028]
		[FlightPro_Class30026]
		[FlightPro_Class30027]
		[FlightPro_Class140027])
	(cloNamespace [FlightPro_Class100024])
	(cloVars
		[FlightPro_Class100029]
		[FlightPro_Class240000])
	(title "Carrier Movement"))

([FlightPro_Class100024] of  CloNamespace

	(source "(:require\n  [calc.dynamic :refer \n	[equalize\n	 course-closer\n	 step-closer]])")
	(title "carr.move"))

([FlightPro_Class100025] of  CloVar

	(source "(volatile! {:mode \"?\"\n               :coord [0 0]\n               :altitude 0\n               :speed 0\n               :course 0\n               :step-hrs (double (/ (:carrier TIO) 3600000))\n               :bank-params [12 16 64 2]\n               :rudder {:target 0\n                            :step 3\n	    :accel 1\n                            :time-out 1017}\n               :elevator {:target 0\n                            :step 4\n	    :accel 1\n                            :time-out 997}\n               :propeller {:target 0\n                            :step 1\n	    :accel 1\n                            :time-out 2003}})")
	(title "CARRIER"))

([FlightPro_Class100026] of  CloFunction

	(source "(let [cosphi1 (js/Math.cos phi1)\n       sinphi1 (js/Math.sin phi1)\n       cosaz (js/Math.cos az)\n       sinaz (js/Math.sin az)\n       sinc (js/Math.sin c)\n       cosc (js/Math.cos c)\n       phi2 (js/Math.asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (js/Math.atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n  [phi2 lam2])")
	(title "spherical-between-js [phi1 lambda0 c az]"))

([FlightPro_Class100027] of  CloFunction

	(source "([carr]\n  (let [car @carr]\n    (set-turn-point carr (:coord car) (:course car) (:speed car))))\n([carr [lat lon] crs spd]\n  (vswap! carr assoc :turn-point\n    {:phi (* lat PID180)\n     :lam (* lon PID180)\n     :dir (* crs PID180)\n     :rdh (* spd NMRAD)\n     :clk 0}))")
	(title "set-turn-point"))

([FlightPro_Class100028] of  CloFunction

	(source "(let [car @carr\n       tur (:turn-point car)\n       hrs (:step-hrs car)\n       elt (+ (:clk tur) hrs)\n       way (* (:rdh tur) elt)\n       [phi lam] (spherical-between-js (:phi tur) (:lam tur) way (:dir tur))]\n  (vswap! carr assoc :coord [(/ phi PID180) (/ lam PID180)]\n                                :turn-point (assoc tur :clk elt)))")
	(title "move [carr]"))

([FlightPro_Class100029] of  CloVar

	(source "(/ Math.PI 180)")
	(title "PID180"))

([FlightPro_Class10003] of  CloFunction

	(source "(if (= terra \"yes\")\n  (set! (.-terrainProvider VIEWER) TERR-PROV))\n(.add (.-dataSources VIEWER) CZM-SRC)\n(.addEventListener (js/EventSource. (str base-url \"czml/\")) \"czml\" cz-processor false)\n(println [:INIT-3D-VIEW :BASE base-url :TERRA terra])")
	(title "init-3D-view [base-url terra]"))

([FlightPro_Class110000] of  CloFunction

	(source "(letfn [(turn-right? [from to]\n	(let [dif (- to from)]\n	  (cond\n	    (> dif 0)\n	      (<= dif 180)\n	    (< dif 0) \n	      (< dif -180))))]\n  (if (= old-crs new-crs)\n    0\n    (let [arc (calc/abs (- old-crs new-crs))\n           arc (cond \n	(> arc 180) (- 360 arc)\n	(< arc - 180) (+ 360 arc)\n	(< arc 0) (- 0 arc)\n	true arc)\n           bnk (cond\n                  (< arc small-arc) (int (/ right-bank factor)) \n                  (> arc big-arc) (* right-bank factor)\n                  true right-bank)]\n      (if (turn-right? old-crs new-crs)\n          bnk\n          (- bnk)))))")
	(title "bank [old-crs new-crs [right-bank small-arc big-arc factor]]"))

([FlightPro_Class120000] of  CSS

	(source "#autopilot {\n  position:fixed;\n  bottom:160px;\n  right:40px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#accel {\n  position:fixed;\n  bottom:150px;\n  right:24px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#course {\n  position:fixed;\n  bottom:150px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#speed {\n  position:fixed;\n  bottom:130px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude {\n  position:fixed;\n  bottom:110px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#lat {\n  position:fixed;\n  bottom:90px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#lon {\n  position:fixed;\n  bottom:70px;\n  right:114px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#course-fld {\n  position:fixed;\n  bottom:150px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n}\n#speed-fld {\n  position:fixed;\n  bottom:130px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude-fld {\n  position:fixed;\n  bottom:110px;\n  right:66px;\n  padding:5px;\n  z-index:100;\n}\n#speed-acl {\n  position:fixed;\n  bottom:130px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude-acl {\n  position:fixed;\n  bottom:110px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#latitude-fld {\n  position:fixed;\n  bottom:90px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#longitude-fld {\n  position:fixed;\n  bottom:70px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n}\n#camera {\n  position:fixed;\n  bottom:140px;\n  left:60px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard {\n  position:fixed;\n  bottom:130px;\n  left:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard-fld {\n  position:fixed;\n  bottom:130px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#view {\n  position:fixed;\n  bottom:110px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#view-fld {\n  position:fixed;\n  bottom:110px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#pitch {\n  position:fixed;\n  bottom:90px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#pitch-fld {\n  position:fixed;\n  bottom:90px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#roll {\n  position:fixed;\n  bottom:70px;\n  left:48px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#roll-fld {\n  position:fixed;\n  bottom:70px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "cesium"))

([FlightPro_Class120002] of  CloProgram

	(cloFunctions [FlightPro_Class260000])
	(cloNamespace [Clojure_Class300001])
	(title "Clojure Work"))

([FlightPro_Class130000] of  HTML

	(source "<!DOCTYPE html>\n<html>\n<head>\n  <title>Chart View</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <link rel=\"stylesheet\" href=\"css/leaflet.css\" />\n  <link rel=\"stylesheet\" href=\"leaflet/leaflet.css\"/>\n  <script src=\"leaflet/leaflet.js\"></script>\n  <script src=\"js/leaflet.rotatedMarker.js\"></script>\n</head>\n<body>\n  <div id=\"map\"></div>\n  <div id=\"mousepos\"></div>\n  <div id=\"zoom\"></div>\n  <div id=\"commands-header\"></div>\n  <div id=\"commands\"></div>\n  <div id=\"element1\"></div>\n  <div id=\"element2\"></div>\n  <div id=\"element3\"></div>\n  <div id=\"element4\"></div>\n  <div id=\"element5\"></div>\n  <div id=\"element6\"></div>\n  <div id=\"element20\"></div>\n  <div id=\"element30\"></div>\n  <div id=\"element40\"></div>\n  <script src=\"js/chart.js\"></script>\n</body>\n</html>")
	(store-in "resources/public")
	(title "leaflet"))

([FlightPro_Class130001] of  CloFunction

	(source "(let [[rb sa ba fa :as bps] (:bank-params @carr)\n       bnk (dyn/bank (:course @carr) course bps)\n       spd (:speed @carr)]\n  (if (or (< spd 90) (= bnk 0))\n    (mov/turn carr course 1)\n    (let [accel (if (> (calc/abs bnk) rb) 2 1)]\n      (czm/camera :roll bnk)\n      (mov/turn carr course accel)\n      (dyn/check-diff-and-do carr\n        [:rudder :target]\n        [:course]\n        (get-in @carr [:rudder :step])\n        [:rudder :time-out]\n        #(czm/camera :roll 0)))))")
	(title "turn-and-bank [carr course]"))

([FlightPro_Class130003] of  CloFunction

	(source "(if (< x 0) (- x) x)")
	(title "abs [x]"))

([FlightPro_Class130004] of  CloFunction

	(source "(letfn [(proc-fn [cr]\n             (let [c @cr]\n               (if (<= (calc/abs (- (get-in c path1)\n                                           (get-in c path2))) limit)\n                 (do (final-fn) false)\n                 true)))]\n  (vswap! carr assoc :cdad-status (volatile! \"STOP\"))\n  (asp/start-process (:cdad-status @carr) \n                                 #(proc-fn carr)\n                                 (get-in @carr tio-pth)))")
	(title "check-diff-and-do [carr path1 path2 limit tio-pth final-fn]"))

([FlightPro_Class140000] of  CloVar

	(source "(volatile! {})")
	(title "VEHICLES"))

([FlightPro_Class140001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140008]
		[FlightPro_Class140005]
		[FlightPro_Class330006]
		[FlightPro_Class330005]
		[FlightPro_Class140004]
		[FlightPro_Class730000]
		[FlightPro_Class140003]
		[FlightPro_Class730001]
		[FlightPro_Class140007]
		[FlightPro_Class270001])
	(cloNamespace [FlightPro_Class140002])
	(title "Viev 3D Controls"))

([FlightPro_Class140002] of  CloNamespace

	(source "(:require\n [goog.string :as gstring]\n [goog.string.format])")
	(title "view3d.controls"))

([FlightPro_Class140003] of  CloFunction

	(source "(set-html! \"autopilot\" \"<h4>Autopilot</h4>\")\n(set-html! \"accel\" \"accel\")\n(set-html! \"course\" \"Course: 000\")\n(set-html! \"course-fld\" \n  \"<input value='180' style='width:38px' id='input-crs'\n                     onchange='javascript:view3d.client.course(this.value)'>\")\n(set-html! \"speed\" \"Speed: 000\")\n(set-html! \"speed-fld\" \n  \"<input value='210' style='width:38px' id='input-spd'\n               onchange='javascript:view3d.client.speed(this.value)'>\")\n(set-html! \"speed-acl\" \n  (str \"<select style='width:44px'\n                onchange='javascript:view3d.client.accel_speed(this.value)'>\"\n         (apply str (for [n (range 1 11)]\n                           (str \"<option value='\" n \"'>\" n \"</option>\")))))\n(set-html! \"altitude\" \"Altitude: 00000\")\n(set-html! \"altitude-fld\" \n  \"<input value='4000' style='width:38px' id='input-alt'\n               onchange='javascript:view3d.client.altitude(this.value)'>\")\n(set-html! \"altitude-acl\" \n  (str \"<select style='width:44px'\n                onchange='javascript:view3d.client.accel_altitude(this.value)'>\"\n         (apply str (for [n (range 1 11)]\n                           (str \"<option value='\" n \"'>\" n \"</option>\")))))\n(set-html! \"lat\" \"Latitude: 00.0000\")\n(set-html! \"latitude-fld\" \n  \"<input value='40.8' style='width:84px' id='input-lat'\n               onchange='javascript:view3d.client.latitude(this.value)'>\")\n(set-html! \"lon\" \"Longitude: 00.0000\")\n(set-html! \"longitude-fld\" \n  \"<input value='-74.0' style='width:84px' id='input-lon'\n               onchange='javascript:view3d.client.longitude(this.value)'>\")")
	(title "right-controls []"))

([FlightPro_Class140004] of  CloFunction

	(source "(set! (.-innerHTML (by-id id)) msg)")
	(title "set-html! [id msg]"))

([FlightPro_Class140005] of  CloFunction

	(source "(.getElementById js/document id)")
	(title "by-id  [id]"))

([FlightPro_Class140007] of  CloFunction

	(source "(let [{:keys [coord course speed altitude]} @carr]\n  (set-html! \"course\" (str \"Course: \" course))\n  (set-html! \"speed\" (str \"Speed: \" speed))\n  (set-html! \"altitude\" (str \"Altitude: \" altitude))\n  (set-html! \"lat\" (str \"Latitude: \" (format \"%.4f\" (first coord))))\n  (set-html! \"lon\" (str \"Longitude: \" (format \"%.4f\" (second coord)))))")
	(title "show-flight-data [carr]"))

([FlightPro_Class140008] of  CloFunction

	(source "(apply gstring/format fmt args)")
	(title "format [fmt & args]"))

([FlightPro_Class140019] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [crs (num-val crs)]\n    (if (<= 0 crs 360)\n      (turn-and-bank CARRIER crs))))")
	(title "course [crs]"))

([FlightPro_Class140020] of  CloFunction

	(source "(if (= call \"manual\")\n  (asp/stop-process CAM-PROC))\n(GET (str (:command URL) \"onboard?callsign=\" call)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "onboard [call]"))

([FlightPro_Class140021] of  CloFunction

	(source "(czm/camera :view dir)")
	(title "view [dir]"))

([FlightPro_Class140022] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :pitch deg)))")
	(title "pitch [deg]"))

([FlightPro_Class140023] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :roll deg)))")
	(title "roll [deg]"))

([FlightPro_Class140024] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (mov/accel CARRIER (num-val spd)))")
	(title "speed [spd]"))

([FlightPro_Class140025] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (mov/elevate CARRIER (num-val alt)))")
	(title "altitude [alt]"))

([FlightPro_Class140027] of  CloFunction

	(source "([carr altitude]\n  (vswap! carr assoc-in [:elevator :target] altitude)\n  (equalize carr :elevator set-altitude :altitude step-closer))\n([carr altitude accel]\n  (vswap! carr assoc-in [:elevator :accel] accel)\n  (elevate carr altitude))")
	(title "elevate"))

([FlightPro_Class150000] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140008]
		[FlightPro_Class140005]
		[FlightPro_Class140004]
		[FlightPro_Class160012]
		[FlightPro_Class220026]
		[FlightPro_Class820000])
	(cloNamespace [FlightPro_Class180001])
	(title "Chart Controls"))

([FlightPro_Class150001] of  CSS

	(source "#map {\n    position: absolute;\n    top: 0px;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: -1;\n}\n#mousepos {\n  position:fixed;\n  bottom:10px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#zoom {\n  position:fixed;\n  bottom:10px;\n  left:170px;\n  padding:5px;\n  z-index:100;\n}\n#commands-header {\n  position:fixed;\n  bottom:50px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#commands {\n  position:fixed;\n  bottom:40px;\n  left:10px;\n  padding:5px;\n  z-index:100;\n}\n#element1 {\n  position:fixed;\n  bottom:40px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element2 {\n  position:fixed;\n  bottom:60px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element3 {\n  position:fixed;\n  bottom:80px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element4 {\n  position:fixed;\n  bottom:100px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element5 {\n  position:fixed;\n  bottom:120px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element6 {\n  position:fixed;\n  bottom:140px;\n  left:160px;\n  padding:5px;\n  z-index:100;\n}\n#element20 {\n  position:fixed;\n  bottom:40px;\n  left:300px;\n  padding:5px;\n  z-index:100;\n}\n#element30 {\n  position:fixed;\n  bottom:40px;\n  left:440px;\n  padding:5px;\n  z-index:100;\n}\n#element40 {\n  position:fixed;\n  bottom:40px;\n  left:580px;\n  padding:5px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "leaflet"))

([FlightPro_Class150002] of  ClsMain

	(asset-path "js/out")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[FlightPro_Class80004]
		[FlightPro_Class160003]
		[FlightPro_Class160007]
		[FlightPro_Class220000]
		[FlightPro_Class160010]
		[FlightPro_Class160008]
		[FlightPro_Class160004]
		[FlightPro_Class670311]
		[FlightPro_Class580000]
		[FlightPro_Class670313]
		[FlightPro_Class310002]
		[FlightPro_Class360000]
		[FlightPro_Class380003]
		[FlightPro_Class370001]
		[FlightPro_Class370000]
		[FlightPro_Class690014]
		[FlightPro_Class690015]
		[FlightPro_Class690013]
		[FlightPro_Class580046]
		[FlightPro_Class170005]
		[FlightPro_Class170004]
		[FlightPro_Class430000]
		[FlightPro_Class440000]
		[FlightPro_Class690008]
		[FlightPro_Class220027]
		[FlightPro_Class160011]
		[FlightPro_Class160002]
		[FlightPro_Class180000]
		[FlightPro_Class380000]
		[FlightPro_Class380001])
	(cloNamespace [FlightPro_Class150003])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class330004]
		[FlightPro_Class160009]
		[FlightPro_Class160005]
		[FlightPro_Class140000]
		[FlightPro_Class670312]
		[FlightPro_Class690012]
		[FlightPro_Class80002]
		[FlightPro_Class200000])
	(css [FlightPro_Class150001])
	(epilogue "(set! (.-onload js/window) (on-load-chart))")
	(html [FlightPro_Class130000])
	(options "{:verbose false}")
	(output-dir "resources/public/js/out")
	(output-to "resources/public/js/chart.js")
	(required
		[FlightPro_Class70008]
		[FlightPro_Class100023]
		[FlightPro_Class230004]
		[FlightPro_Class390002]
		[FlightPro_Class30001]
		[FlightPro_Class150000]
		[FlightPro_Class420008])
	(store-in "src/cljs")
	(title "Chart Client"))

([FlightPro_Class150003] of  CloNamespace

	(source "(:require\n  [goog.string :as gstring]\n  [goog.string.format]\n  [csasync.proc :as asp]\n  [chart.controls :as ctl]\n  [carr.move :as mov]\n  [cognitect.transit :as t]\n  [ajax.core :refer [GET]]\n  [ask.master :as am])")
	(title "chart.client"))

([FlightPro_Class160000] of  CloFunction

	(source "(let [{:keys [n s w e]} @BBX]\n  (if-let [ff (json-web-data (str (:url-flights F24) \"?bounds=\" n \",\" s \",\" w \",\" e))]\n    (vreset! FLIGHTS \n      (->> ff\n        (filter #(vector? (second %)))\n        ;;(filter #(not (empty? (callsign (second %)))))\n        (apply concat)\n        (apply hash-map)\n        (merge-my-flights @mfs/CARRIERS)\n        (merge-my-flights @MANUAL-DATA)))))")
	(title "flights-in-bbx []"))

([FlightPro_Class160002] of  CloFunction

	(source "(enable-console-print!)\n(init-chart)\n(asp/repeater receive-instructions (:instructions TIO))\n(ctl/show-chart-controls)")
	(title "on-load-chart []"))

([FlightPro_Class160003] of  CloFunction

	(source "(when-let [vmp (@VEHICLES id)]\n  (mov/move vmp)\n  (let [mp @vmp\n         mrk (:marker mp)\n         [lat lon] (:coord mp)\n         pos (js/L.LatLng. lat lon)]\n    (.setLatLng mrk pos))\n  (vswap! VEHICLES assoc id vmp))")
	(title "move-vehicle [id]"))

([FlightPro_Class160004] of  CloFunction

	(source "(delete-vehicle id)\n(let [ms (volatile! \"START\")\n       mp (assoc mp :marker (create-update-marker nil mp)\n                              :step-hrs (double (/ (:vehicles TIO) 3600000))\n	        :movst ms\n                              :mover (asp/start-process ms #(move-vehicle id) (:vehicles TIO)))\n         carr (volatile! mp)]\n    (mov/set-turn-point carr)\n    (vswap! VEHICLES assoc id carr))")
	(title "create-update-vehicle [id mp]"))

([FlightPro_Class160005] of  CloVar

	(source "(volatile! {})")
	(title "CHART"))

([FlightPro_Class160007] of  CloFunction

	(source "(when-let [veh (@VEHICLES id)]\n  (asp/stop-process (:movst @veh))\n  (.removeLayer @CHART (:marker @veh))\n  (vswap! VEHICLES dissoc id))")
	(title "delete-vehicle [id]"))

([FlightPro_Class160008] of  CloFunction

	(source "(if mrk\n  (.removeLayer @CHART mrk))\n(let [[lat lon] (:coord mp)\n       pos (js/L.LatLng. lat lon)\n       ico (js/L.icon #js{:iconUrl (URL-ICO (:status mp)) \n                                  :iconSize #js[32, 32]})\n       opt #js{:icon ico \n                    :rotationAngle (:course mp)\n                    :rotationOrigin \"center center\"\n                    :title (:callsign mp)\n                    :draggable false}\n       mrk (-> js/L (.marker pos opt))]\n    (.on mrk \"click\"\n         (fn [e]\n           (info (ffirst (filter #(= (:marker @(second %)) (.-target e)) \n                                      (seq @VEHICLES))))))\n    (.addTo mrk @CHART)\n    mrk)")
	(title "create-update-marker [mrk mp]"))

([FlightPro_Class160009] of  CloVar

	(source "{\"INTERSECT\" 	(str HOST PORT \"/img/redpln32.png\")\n \"DESCEND\" 	(str HOST PORT \"/img/greenpln32.png\")\n \"CLIMB\" 	(str HOST PORT \"/img/bluepln32.png\")\n \"LEVEL\" 	(str HOST PORT \"/img/purplepln32.png\")\n \"GROUND\" 	(str HOST PORT \"/img/greypln32.png\")\n \"COUNTER\"	(str HOST PORT \"/img/r.png\")\n \"FOLLOWING\"	(str HOST PORT \"/img/b.png\")\n \"default\"	(str HOST PORT \"/img/info.png\")\n \"default-pois\"	(str HOST PORT \"/img/place3.jpeg\")\n \"landmark\"	(str HOST PORT \"/img/landmark.png\")\n \"edu\"	(str HOST PORT \"/img/edu.png\")\n \"mountain\"	(str HOST PORT \"/img/mountain.png\")\n \"river\"	(str HOST PORT \"/img/river.png\")\n \"railwaystation\" (str HOST PORT \"/img/railwaystation.png\")\n \"event\"	(str HOST PORT \"/img/event.png\")\n \"waterbody\"	(str HOST PORT \"/img/waterbody.png\")\n \"isle\"	(str HOST PORT \"/img/isle.png\")\n \"airport\"	(str HOST PORT \"/img/airport.png\")\n \"city\"	(str HOST PORT \"/img/city.png\")}")
	(title "URL-ICO"))

([FlightPro_Class160010] of  CloFunction

	(source "(GET (str (:command URL) \"info?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "info [id]"))

([FlightPro_Class160011] of  CloFunction

	(source "(println :INIT-CHART)\n(let [m (-> js/L\n              (.map \"map\")\n              (.setView (array 60.3, 25.0) 10)) ;; New York 40.8, -74.0\n        tile1 (-> js/L (.tileLayer \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n                                   #js{:maxZoom 20\n                                       :attribution \"Ru, OpenStreetMap &copy;\"}))\n        tile2 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile3 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile4 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        tile5 (-> js/L (.tileLayer \"http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"}))\n        base (clj->js {\"OpenStreetMap\" tile1\n                       \"Google Satellite\" tile2\n                       \"Google Streets\" tile3\n                       \"Google Hybrid\" tile4\n                       \"Google Terrain\" tile5})\n        ctrl (-> js/L (.control.layers base nil))]\n    (try\n      (.addTo tile1 m)\n      (catch js/Error e (println e)))\n    (.addTo ctrl m)\n    (.on m \"mousemove\"\n         (fn [e] (ctl/mouse-move (.. e -latlng -lat) (.. e -latlng -lng))))\n    (.on m \"zoomend\"\n         (fn [e] (ctl/display-zoom (.getZoom m))))\n    (ctl/display-zoom (.getZoom m))\n    (vreset! CHART m))")
	(title "init-chart []"))

([FlightPro_Class160012] of  CloFunction

	(source "(set-html! \"mousepos\" (str \"lat \" (format \"%.4f\" lat) \" lon \" (format \"%.4f\" lng)))")
	(title "mouse-move [lat lng]"))

([FlightPro_Class160018] of  CloFunction

	(source "(close! chn)")
	(title "close-chan [chn]"))

([FlightPro_Class170000] of  CloVar

	(source "(volatile! nil)")
	(title "AIRPORTS"))

([FlightPro_Class170004] of  CloFunction

	(source "(GET (:instructions URL) {:handler instructions-handler\n                       :error-handler error-handler})")
	(title "receive-instructions []"))

([FlightPro_Class170005] of  CloFunction

	(source "(doseq [{:keys [instruct] :as ins} (read-transit response)]\n  ;;(println [:INSTRUCT ins])\n  (condp = instruct\n    :create-update (let [{:keys [id vehicle]} ins]\n	(create-update-vehicle id vehicle))\n    :delete (let [{:keys [id]} ins]\n	(delete-vehicle id))\n    :clear (clear-vehicles)\n    :popup (let [{:keys [id lat lon html time width height]} ins]\n	(cond\n	  id (popup id html time)\n	  (and  width height lat lon) (popup lat lon html time width height)\n	  (and lat lon) (popup lat lon html time)))\n    :trail (let [{:keys [id points options time]} ins]\n	(add-trail id points options time))\n    :map-center (let [{:keys [coord zoom lock]} ins]\n	(map-center coord zoom lock))\n    :create-placemark (let [{:keys [iname tip lat lon feature url-ico]} ins]\n	(create-placemark iname tip lat lon feature url-ico))\n    :delete-placemark (let [{:keys [iname]} ins]\n	(delete-placemark iname))\n    :clear-placemarks (clear-placemarks)\n    :add-link (let [{:keys [ids options]} ins]\n	(add-link ids options))\n    :ask-user (let [{:keys [question]} ins]\n	(condp = \n	  \"airport\" (select-airport)))\n    (println (str \"Unknown instruction: \" [instruct ins]))))")
	(title "instructions-handler [response]"))

([FlightPro_Class180000] of  CloFunction

	(source "(GET (str (:command URL) \"follow?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "follow [id]"))

([FlightPro_Class180001] of  CloNamespace

	(source "(:require\n [goog.string :as gstring]\n [goog.string.format])")
	(title "chart.controls"))

([FlightPro_Class180002] of  CloProgram

	(cloFunctions
		[FlightPro_Class190007]
		[FlightPro_Class200007]
		[FlightPro_Class200010]
		[FlightPro_Class200011]
		[FlightPro_Class200012]
		[FlightPro_Class200013]
		[FlightPro_Class200014]
		[FlightPro_Class480005]
		[FlightPro_Class160000]
		[FlightPro_Class200015]
		[FlightPro_Class200016]
		[FlightPro_Class200002]
		[FlightPro_Class220007]
		[FlightPro_Class200017]
		[FlightPro_Class210008]
		[FlightPro_Class210009]
		[FlightPro_Class210012]
		[FlightPro_Class210013]
		[FlightPro_Class260002]
		[FlightPro_Class770011]
		[FlightPro_Class770000])
	(cloNamespace [FlightPro_Class180003])
	(cloVars
		[FlightPro_Class210011]
		[FlightPro_Class210007]
		[FlightPro_Class190001]
		[FlightPro_Class170000]
		[FlightPro_Class220008]
		[FlightPro_Class210010]
		[FlightPro_Class620001])
	(title "FlightRadar24 Client"))

([FlightPro_Class180003] of  CloNamespace

	(source "(:require\n  [org.httpkit.client :as client]\n  [clj-json.core :as json]\n  [async.proc :as asp]\n  [my.flights.move :as mfs]\n  [calc.geo :refer [distance-nm]]\n  [calc.core :refer [abs]])")
	(title "fr24.client"))

([FlightPro_Class190000] of  CloFunction

	(source "(let [crt (current-time)\n       fls (seq @fls)]\n  (println \"t:\" crt \"flights:\" (count fls))\n  (doseq [[k v] fls]\n    (let [alt (fr24/altitude v)\n           [lat lon :as crd] (fr24/coord v)]\n      (rete/assert-frame \n	['Flight\n	'id k\n	'callsign (fr24/callsign v)\n	'coord crd\n	'course (fr24/course v)\n	'speed (fr24/speed v)\n	'altitude alt\n	'time crt\n	'point4d [lat lon (int (/ alt 3.28084)) (czs/iso8601curt)]\n	'age \"NEW\"\n	'status (if (> alt APT-ALT)\n                                     \"LEVEL\"\n                                     \"GROUND\")])))\n  (rete/fire)\n  true)")
	(title "process-flights [fls]"))

([FlightPro_Class190001] of  CloVar

	(source "(volatile! {})")
	(title "FLIGHTS"))

([FlightPro_Class190007] of  CloFunction

	(source "(let [r @(client/get url)\n       s (:status r)]\n  (if (= s 200)\n    (try\n      (json/parse-string (:body r))\n      (catch Exception e\n        (println [:JSON-WEB-DATA :EXCEPTION e])\n        nil))\n    (do\n      (println [:JSON-WEB-DATA :STATUS s])\n      nil)))")
	(title "json-web-data [url]"))

([FlightPro_Class2] of  ClsMain

	(asset-path "js/out")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[FlightPro_Class310006]
		[FlightPro_Class80004]
		[FlightPro_Class130001]
		[FlightPro_Class140020]
		[FlightPro_Class300006]
		[FlightPro_Class140021]
		[FlightPro_Class140022]
		[FlightPro_Class140023]
		[FlightPro_Class140019]
		[FlightPro_Class140024]
		[FlightPro_Class140025]
		[FlightPro_Class90001]
		[FlightPro_Class90002]
		[FlightPro_Class300000]
		[FlightPro_Class320001]
		[FlightPro_Class290000]
		[FlightPro_Class320000]
		[FlightPro_Class80003]
		[FlightPro_Class80001]
		[FlightPro_Class600003]
		[FlightPro_Class70001])
	(cloNamespace [FlightPro_Class60001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class330004]
		[FlightPro_Class100025]
		[FlightPro_Class330002]
		[FlightPro_Class80002])
	(css [FlightPro_Class120000])
	(epilogue "(set! (.-onload js/window) (on-load))")
	(html [FlightPro_Class40000])
	(options "{:verbose false}")
	(output-dir "resources/public/js/out")
	(output-to "resources/public/js/main.js")
	(required
		[FlightPro_Class70008]
		[FlightPro_Class50001]
		[FlightPro_Class100023]
		[FlightPro_Class230004]
		[FlightPro_Class390002]
		[FlightPro_Class30001]
		[FlightPro_Class140001])
	(store-in "src/cljs")
	(title "View 3D Client"))

([FlightPro_Class20000] of  CloProgram

	(cloFunctions
		[FlightPro_Class20013]
		[FlightPro_Class20017]
		[FlightPro_Class20014]
		[FlightPro_Class20024]
		[FlightPro_Class20021]
		[FlightPro_Class20022]
		[FlightPro_Class20023])
	(cloNamespace [FlightPro_Class20001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class20002]
		[FlightPro_Class20006]
		[FlightPro_Class20007])
	(title "Pro Server"))

([FlightPro_Class200000] of  CloVar

	(source "{:handler (fn [response])\n :error-handler error-handler}")
	(title "no-handler"))

([FlightPro_Class200001] of  CloFunction

	(source "(asp/pump-in (:instructions  cmd/CHN)\n	{:instruct :delete\n	 :id id})")
	(title "put-off-map [id]"))

([FlightPro_Class200002] of  CloFunction

	(source "(letfn [(mk-airports [rows]\n            (reduce #(assoc %1\n                            (get %2 \"country\")\n                            (assoc (or (get %1 (get %2 \"country\")) {})\n                              (get %2 \"name\") \n                              %2)) \n                        {} \n                        rows))]\n  (or @AIRPORTS\n       (let [aps (json-web-data (:url-airports F24))\n              aps (mk-airports (get aps \"rows\"))]\n         (vreset! AIRPORTS aps)\n         aps)))")
	(title "airports-by-country []"))

([FlightPro_Class200007] of  CloFunction

	(source "(if (string? iod)\n  (@FLIGHTS iod)\n  iod)")
	(title "dat [iod]"))

([FlightPro_Class20001] of  CloNamespace

	(source "(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [async.proc :as asp]\n              [cesium.core :as czs]\n              [pro.commands :as cmd])\n(:import java.io.ByteArrayOutputStream)")
	(title "pro.server"))

([FlightPro_Class200010] of  CloFunction

	(source "(let [dd (dat iod)]\n  [(nth dd 1) (nth dd 2)])")
	(title "coord [iod]"))

([FlightPro_Class200011] of  CloFunction

	(source "(nth (dat iod) 3)")
	(title "course [iod]"))

([FlightPro_Class200012] of  CloFunction

	(source "(nth (dat iod) 5)")
	(title "speed [iod]"))

([FlightPro_Class200013] of  CloFunction

	(source "(nth (dat iod) 4)")
	(title "altitude [iod]"))

([FlightPro_Class200014] of  CloFunction

	(source "(nth (dat iod) 16)")
	(title "callsign [iod]"))

([FlightPro_Class200015] of  CloFunction

	(source "(if-let [flt (filter #(= cs (callsign (second %)))\n                         @FLIGHTS)]\n  (first flt))")
	(title "by-call [cs]"))

([FlightPro_Class200016] of  CloFunction

	(source "(if-let [[id dat] (by-call cs)]\n  id)")
	(title "id-by-call [cs]"))

([FlightPro_Class200017] of  CloFunction

	(source "(if-let [[id dat] (by-call cs)]\n  dat)")
	(title "dat-by-call [cs]"))

([FlightPro_Class20002] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([FlightPro_Class20004] of  CloVar

	(source "{:answer (asp/mk-chan)\n :directives (asp/mk-chan)\n :instructions (asp/mk-chan)}")
	(title "CHN"))

([FlightPro_Class20005] of  CloVar

	(source "4444")
	(title "PORT"))

([FlightPro_Class20006] of  CloVar

	(source "nil")
	(title "APP"))

([FlightPro_Class20007] of  CloVar

	(source "nil")
	(title "SERV"))

([FlightPro_Class20010] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([FlightPro_Class20013] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([FlightPro_Class20014] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (asp/pump-out chn)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "responseN [chn]"))

([FlightPro_Class20017] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (asp/one-out chn)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "response1 [chn]"))

([FlightPro_Class20021] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (str ROOT \"cezium.html\")))\n  (GET \"/chart\" [] (slurp (str ROOT \"leaflet.html\")))\n  (GET \"/czml/\" [] (czs/events))\n  (GET \"/question/\" [& params] (cmd/question params))\n  (GET \"/answer/\" [] (response1 (:answer cmd/CHN)))\n  (GET \"/directives/\" [] (responseN (:directives cmd/CHN)))\n  (GET \"/instructions/\" [] (responseN (:instructions cmd/CHN)))\n  (GET \"/manual-data/\" [& params] (cmd/get-manual-data params))\n  (GET \"/command/:cmd\" [cmd & params] \n    ((resolve (symbol (str \"pro.commands/\" cmd))) params))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([FlightPro_Class20022] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false})))")
	(title "start-server"))

([FlightPro_Class20023] of  CloFunction

	(source "(when-let [serv SERV]\n  (.stop serv)\n  (def SERV nil)\n  (println \"Server stopped!\"))")
	(title "stop-server []"))

([FlightPro_Class20024] of  CloFunction

	(source "(let [address (str HOST PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([FlightPro_Class20025] of  CloProgram

	(cloFunctions
		[FlightPro_Class20029]
		[FlightPro_Class20031]
		[FlightPro_Class20032]
		[FlightPro_Class20033]
		[FlightPro_Class20034]
		[FlightPro_Class20035]
		[FlightPro_Class20036]
		[FlightPro_Class20037]
		[FlightPro_Class830001])
	(cloNamespace [FlightPro_Class20026])
	(cloVars
		[FlightPro_Class20027]
		[FlightPro_Class20028])
	(title "Cesium Server"))

([FlightPro_Class20026] of  CloNamespace

	(source "(:require\n    [ring.util.response :as r]\n    [async.proc :as asp])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([FlightPro_Class20027] of  CloVar

	(source "(asp/mk-chan)")
	(title "CZ-CHAN"))

([FlightPro_Class20028] of  CloVar

	(source "true")
	(title "DOC-SND"))

([FlightPro_Class20029] of  CloFunction

	(source ";;(println [:CZ-EVT typ dat])\n(asp/pump-in CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([FlightPro_Class20031] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (asp/pump-out CZ-CHAN)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([FlightPro_Class20032] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([FlightPro_Class20033] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([FlightPro_Class20034] of  CloFunction

	(source "(str \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\",\\\"clock\\\":{\\\"currentTime\\\":\\\"\" (iso8601futt -16) \"\\\"}}\")")
	(title "doc []"))

([FlightPro_Class20035] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"availability\\\":\\\"\"\n               (iso8601curt) \"/\" (iso8601futt span-sec)\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\" \n               scale\n               \" ,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -24]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([FlightPro_Class20036] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([FlightPro_Class20037] of  CloFunction

	(source "(let [min-scl 0.25\n       scl (+ min-scl (* (- 1 min-scl) (- 1 (/ dist max-dist))))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 40))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([FlightPro_Class210000] of  CloFunction

	(source "(let [cosphi1 (Math/cos phi1)\n       sinphi1 (Math/sin phi1)\n       cosaz (Math/cos az)\n       sinaz (Math/sin az)\n       sinc (Math/sin c)\n       cosc (Math/cos c)\n       phi2 (Math/asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (Math/atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n   [phi2 lam2])")
	(title "spherical-between [^double phi1 ^double lambda0 ^double c ^double az]"))

([FlightPro_Class210001] of  CloFunction

	(source "([params]\n  (clear))\n([]\n  (fr24/clear-flights)\n  (rete/reset)\n  (asp/pump-in (:instructions CHN)\n      {:instruct :clear})\n  \"\")")
	(title "clear"))

([FlightPro_Class210007] of  CloVar

	(source "(volatile! {:n 0 :s 0 :w 0 :e 0 :z 0})")
	(title "BBX"))

([FlightPro_Class210008] of  CloFunction

	(source "([lat lon]\n  (let [{:keys [n s w e]} @BBX\n         hla (/ (abs (- n s)) 2)\n         hlo (/ (abs (- e w)) 2)]\n    (vswap! BBX merge {:n (+ lat hla) :s (- lat hla) :w (- lon hlo) :e (+ lon hlo)}))) \n([mp]\n  (vswap! BBX merge mp))")
	(title "set-bbx"))

([FlightPro_Class210009] of  CloFunction

	(source "(println [:FLIGHTS-PROCESS \n  (asp/start-process STATUS \n                               #(do (flights-in-bbx) (process-fn FLIGHTS) true)\n                               (:time-out F24))])")
	(title "start [process-fn]"))

([FlightPro_Class210010] of  CloVar

	(source "(volatile! \"START\")")
	(title "STATUS"))

([FlightPro_Class210011] of  CloVar

	(source "{:url-flights \"http://data-live.flightradar24.com/zones/fcgi/feed.js\"\n :url-airports \"http://www.flightradar24.com/_json/airports.php\"\n :url-flight-data \"http://data-live.flightradar24.com/clickhandler/?version=1.5&flight=\"\n :time-out 12000}")
	(title "F24"))

([FlightPro_Class210012] of  CloFunction

	(source "(asp/stop-process STATUS)")
	(title "stop []"))

([FlightPro_Class210013] of  CloFunction

	(source "(asp/running? STATUS)")
	(title "running? []"))

([FlightPro_Class220000] of  CloFunction

	(source "(doseq [veh (vals @VEHICLES)]\n  (asp/stop-process (:movst @veh))\n  (.removeLayer @CHART (:marker @veh)))\n(vreset! VEHICLES {})")
	(title "clear-vehicles []"))

([FlightPro_Class220001] of  Rule

	(lhs "(Flight time ?t\n           callsign ?cs\n           coord ?crd \n           course ?crs\n           speed ?spd\n           altitude ?alt)\n?ob1 (Onboard)\n?ob2 (Onboard callsign ?cs time 0\n	(not= ?cs \"STOP\"))")
	(rhs "(retract ?ob1)\n(modify ?ob2 time ?t)\n(es/go-onboard ?cs ?crd ?crs ?spd ?alt)")
	(salience 0)
	(title "af:SwitchOnboard"))

([FlightPro_Class220007] of  CloFunction

	(source "(json-web-data (str (:url-flight-data F24) id))")
	(title "fl-info [id]"))

([FlightPro_Class220008] of  CloVar

	(source "(volatile! {})")
	(title "FL-INFOS"))

([FlightPro_Class220026] of  CloFunction

	(source "(set-html! \"commands-header\" \"<h4>Commands</h4>\")\n(set-html! \"commands\"\n  \"<select onchange='javascript:chart.client.command(this.value)'>\n   <option value='commands'>Commands</option>\n   <option value='watch-visible'>Watch Visible Area</option>\n   <option value='move-to'>Move to Airport</option>\n   <option value='schedule'>Schedule Flight</option>\n   <option value='wikipedia'>Toggle Wikipedia</option>\n   <option value='question'>Ask Question</option>\n   <option value='clear'>Clear</option>\n   </select>\")")
	(title "show-chart-controls []"))

([FlightPro_Class220027] of  CloFunction

	(source "(condp = cmd\n  \"commands\" nil\n  \"watch-visible\" (let [bnd (.getBounds @CHART)\n	          prm (str \"?n=\" (.getNorth bnd)\n		\"&s=\" (.getSouth bnd)\n		\"&w=\" (.getWest bnd)\n		\"&e=\" (.getEast bnd)\n		\"&z=\" (.getZoom @CHART))]\n	       (GET (str (:command URL) cmd prm) no-handler))\n  \"move-to\" (move-to)\n  \"schedule\" (schedule)\n  \"question\" (question)\n  (GET (str (:command URL) cmd) no-handler))\n(ctl/show-chart-controls)")
	(title "command [cmd]"))

([FlightPro_Class220030] of  CloFunction

	(source "([]\n  (watch-visible @fr24/BBX))\n([params]\n  (println [:CMD-WATCH-VISIBLE params])\n  (fr24/set-bbx (reduce-kv #(assoc %1 %2 (read-string %3)) {} params))\n  (if (not= @fr24/STATUS \"RUN\")\n    (fr24/start process-flights))\n  \"\")")
	(title "watch-visible"))

([FlightPro_Class230000] of  CloFuncall

	(source "ext.data/COMM"))

([FlightPro_Class230001] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n       cosphi (Math/cos phi)]\n  (Math/atan2 (* cosphi (Math/sin ldiff))\n                      (- (* (Math/cos phi1) (Math/sin phi)) \n                          (* (Math/sin phi1) cosphi (Math/cos ldiff)))))")
	(title "spherical-azimuth [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([FlightPro_Class230003] of  Rule

	(lhs "(Flight time ?t\n           callsign ?cs\n           coord ?crd \n           course ?crs\n           speed ?spd\n           altitude ?alt)\n?ob (Onboard callsign ?cs time 0)\n(not Onboard)")
	(rhs "(modify ?ob time ?t)\n(es/go-onboard ?cs ?crd ?crs ?spd ?alt)")
	(salience 0)
	(title "af:StartOnboard"))

([FlightPro_Class230004] of  ClsRequired

	(cloFunctions
		[FlightPro_Class210000]
		[FlightPro_Class240006]
		[FlightPro_Class230001]
		[FlightPro_Class250002]
		[FlightPro_Class250003]
		[FlightPro_Class250004]
		[FlightPro_Class250005]
		[FlightPro_Class250006]
		[FlightPro_Class250007]
		[FlightPro_Class250008]
		[FlightPro_Class250009]
		[FlightPro_Class390001]
		[FlightPro_Class10002]
		[FlightPro_Class730004])
	(cloNamespace [FlightPro_Class240005])
	(title "Geo"))

([FlightPro_Class230005] of  CloFunction

	(source "(if (= @fr24/STATUS \"RUN\")\n  (watch-visible))")
	(title "update-watch-area []"))

([FlightPro_Class240000] of  CloVar

	(source "(/ Math.PI 10800)")
	(title "NMRAD"))

([FlightPro_Class240001] of  CloFunction

	(source "(let [car @carr]\n  (set-turn-point carr (:coord car) crs (:speed car))\n  (vswap! carr assoc :course crs))")
	(title "set-course [carr crs]"))

([FlightPro_Class240002] of  CloFunction

	(source "(let [car @carr]\n  (set-turn-point carr (:coord car) (:course car) spd)\n  (vswap! carr assoc :speed spd))")
	(title "set-speed [carr spd]"))

([FlightPro_Class240005] of  CloNamespace

	(title "calc.geo"))

([FlightPro_Class240006] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n       ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n       rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) ldiff ldiff)))]\n   (* 2.0 (Math/asin rval)))")
	(title "spherical-distance [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([FlightPro_Class250000] of  CloFunction

	(source ";; Calculates end point of turn\n(if (not= crs1 crs2)\n  (let [step (* crs-stp crs-acl)\n         tioh (/ crs-tio 3600000)]\n    (loop [crs crs1 point ipoint]\n      (if (< (Math/abs (- crs crs2)) step)\n        point\n        (recur (geo/norm-crs (course-closer crs crs2 step)) \n                  (geo/future-pos point crs spd tioh)))))\n  ipoint)")
	(title "turn-end-point [ipoint spd crs1 [crs2 crs-acl] crs-stp crs-tio]"))

([FlightPro_Class250001] of  CloFunction

	(source "(let [lnd (:landing spp)\n       tcrd (:finish-crd spp)\n       crs (:finish-run spp)		;; landing course\n       rcrs (geo/rev-bear crs)		;; reverse landing course\n       rgen (geo/rev-bear (:general-crs spp))	;; reverse general course\n       [x crsa] (:final-turn-course lnd)	;; landing course accel\n       [spd y spda] (:speed lnd)		;; final turn speed\n       omd (:outer-marker-distance lnd)\n       rudd (:rudder @mfs/CARRIER)\n       ftcrd (mfs/turn-end-point 	\n	(geo/future-pos tcrd rcrs omd 1) ;; outer-marker coordinates\n	spd \n	rcrs	\n	[rgen crsa] \n	(:step rudd) \n	(:time-out rudd))] \n    (merge lnd  {:final-turn-crd	ftcrd\n	:landing-crs	[crs crsa] 	\n     	:lannding-spd	[spd spda]}))")
	(title "landing-plan [spp]"))

([FlightPro_Class250002] of  CloFunction

	(source "(let [phi (Math/toRadians lat)\n       lam (Math/toRadians lon)\n       dir (Math/toRadians crs)\n       way (* spd tim)\n       way (Math/toRadians (/ way 60))\n       [phi2 lam2] (spherical-between phi lam way dir)]\n   [(Math/toDegrees phi2) (Math/toDegrees lam2)])")
	(title "future-pos [[lat lon] crs spd tim]"))

([FlightPro_Class250003] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n       ld1 (Math/toRadians lo1)\n       fi2 (Math/toRadians la2)\n       ld2 (Math/toRadians lo2)\n       rad (spherical-distance fi1 ld1 fi2 ld2)]\n   (* (Math/toDegrees rad) 60))")
	(title "distance-nm [[la1 lo1] [la2 lo2]]"))

([FlightPro_Class250004] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n       ld1 (Math/toRadians lo1)\n       fi2 (Math/toRadians la2)\n       ld2 (Math/toRadians lo2)\n       rad (spherical-azimuth fi1 ld1 fi2 ld2)\n       deg (Math/toDegrees rad)]\n  (cond\n    (< deg 0) (+ deg 360.0)\n    (> deg 360.0) (- deg 360.0)\n    true deg))")
	(title "bear-deg [[la1 lo1] [la2 lo2]]"))

([FlightPro_Class250005] of  CloFunction

	(source "(let [denom (- (* (- y4 y3) (- x2 x1)) (* (- x4 x3) (- y2 y1)))]\n  (if (not (== denom 0.0))\n      (let [ua (/ (- (* (- x4 x3) (- y1 y3)) (* (- y4 y3) (- x1 x3))) denom)\n             ub (/ (- (* (- x2 x1) (- y1 y3)) (* (- y2 y1) (- x1 x3))) denom)]\n        (if (and (<= 0.0 ua 1.0) (<= 0.0 ub 1.0))\n            [(+ y1 (* ua (- y2 y1))) (+ x1 (* ua (- x2 x1)))]))))")
	(title "seg-intersect [x1 y1 x2 y2 x3 y3 x4 y4]"))

([FlightPro_Class250006] of  CloFunction

	(source "(let [[la3 lo3] (future-pos [la1 lo1] crs1 spd1 tim)\n       [la4 lo4] (future-pos [la2 lo2] crs2 spd2 tim)]\n   (seg-intersect lo1 la1 lo3 la3 lo2 la2 lo4 la4))")
	(title "future-intersect [[la1 lo1] crs1 spd1 [la2 lo2] crs2 spd2 tim]"))

([FlightPro_Class250007] of  CloFunction

	(source "(let [rb (+ b 180)]\n  (if (> rb 360) (- rb 360) rb))")
	(title "rev-bear [b]"))

([FlightPro_Class250008] of  CloFunction

	(source "(let [bea (bear-deg [lat1 lon1] [lat2 lon2])\n       ca1 (- bea crs)]\n  (cond\n    (> ca1 180) (- ca1 360)\n    (< ca1 -180) (+ ca1 360)\n    true ca1))")
	(title "course-angle [crs [lat1 lon1] [lat2 lon2]]"))

([FlightPro_Class250009] of  CloFunction

	(source "(let [ca (course-angle crs crd1 crd2)]\n   (or (> ca 90) (< ca -90)))")
	(title "abaft [crs crd1 crd2]"))

([FlightPro_Class250010] of  Rule

	(lhs "?ob (Onboard time ?t0 callsign ?cs)\n(Flight age \"CURRENT\" time ?t1 callsign ?cs\n	(<= ?t0 ?t1))\n(Flight age \"NEW\"\n           callsign ?cs\n           course ?crs2 \n           coord ?crd2 \n           speed ?spd2 \n           altitude ?alt2\n           status ?s2\n           time ?t2)")
	(rhs "(modify ?ob time ?t2)\n(es/fly-onboard-to ?cs ?crs2 ?crd2 ?spd2 ?alt2 (- ?t2 ?t1))")
	(salience 0)
	(title "af:FlyOnboardTo"))

([FlightPro_Class250011] of  CloFunction

	(source "(if (not ONB-PAUSE)\n  (let [crd3 (geo/future-pos crd2 crs2 spd2 (/ per 3600))\n         per3 (* 2 per)]\n    (asp/pump-in (:directives cmd/CHN)\n	{:directive :fly-onboard\n	 :callsign csn\n	 :vehicle {\n	   :coord crd2\n	   :altitude (if (= alt2 0) cmd/APT-ALT alt2)\n	   :speed spd2\n	   :course crs2}\n	 :period per3})))")
	(title "fly-onboard-to [csn crs2 crd2 spd2 alt2 per]"))

([FlightPro_Class260000] of  CloFunction

	(source "(println \"Loading Clojure Programs...\")\n(if-let [wps (ClojureTab/findAnnotated (cls-instances \"WorkingPrograms\") nil)]\n  (loop [i 1 pins (svs wps \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins))))\n  (println \"  Annotated instance of WorkingPrograms not found!\"))\n(println\"Starting Pro Server...\")\n(eval '(pro.server/start-server))\n(println\"Starting My Flights Movement...\")\n(eval '(my.flights.move/start-movement))\n(println\"Starting Expert System...\")\n(eval '(ru.rules/run-engine \"Flights Pro Run\"))\n(println\"Go Initial Airport...\")\n(eval '(pro.commands/go-initial-airport))")
	(title "clojure-work []"))

([FlightPro_Class260002] of  CloFunction

	(source "(vreset! FLIGHTS {})")
	(title "clear-flights []"))

([FlightPro_Class260003] of  CloFunction

	(source "(def ONB-PAUSE true)\n(asp/delayer #(def ONB-PAUSE false) 8000)\n(asp/pump-in (:directives cmd/CHN)\n	{:directive :carrier\n	 :callsign csg\n	 :vehicle {:coord crd\n	               :course crs\n	               :speed spd\n	               :altitude (if (= alt 0) cmd/APT-ALT alt)}})")
	(title "go-onboard [csg crd crs spd alt]"))

([FlightPro_Class270000] of  CloFunction

	(source "(println [:CMD-ONBOARD params])\n(let [cls (:callsign params)]\n  (condp = cls\n    \"manual\" (do (asp/pump-in (:directives CHN)\n	{:directive :manual})\n                     (rete/assert-frame ['Onboard 'callsign \"STOP\"]))\n   \"select\" (let [lst (vec (sort (map fr24/callsign (keys @fr24/FLIGHTS))))\n                       lst (filter #(not (empty? %)) lst)]\n                  (asp/pump-in (:directives CHN)\n	{:directive :callsigns\n	 :list lst}))\n    (rete/assert-frame ['Onboard 'callsign cls 'time 0])))\n\"\"")
	(title "onboard [params]"))

([FlightPro_Class270001] of  CloFunction

	(source "(set-html! \"onboard-fld\" \n  (str \"<select onchange='javascript:view3d.client.onboard(this.value)' style='width:96px'>\"\n          (if (empty? list)\n            (str \"<option value='callsign'>callsign</option>\n                   <option value='select'>select</option>\")\n            (str \"<option value='select'>select</option>\"\n              (apply str (for [e list]\n                                (str \"<option value='\" e \"'>\" e \"</option>\")))))\n        \"</select>\"))")
	(title "callsigns [list]"))

([FlightPro_Class270002] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"CRUISE\"\n	vertical-status \"OFF\"\n	cruise ?cru)")
	(rhs "(println [:ClimbStart ?id ?cru])\n(my.flights.move/control ?id my.flights.move/elevate (:altitude ?cru))\n(my.flights.move/control ?id my.flights.move/accel (:speed ?cru))\n(modify ?fp vertical-status \"CLIMB\")")
	(salience 0)
	(title "mf:ClimbStart"))

([FlightPro_Class270003] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	vertical-status \"CLIMB\"\n	cruise ?cru)\n(Flight age \"CURRENT\" \n	id ?id\n	altitude ?alt\n	speed ?spd\n	((= ?alt (:altitude ?cru))\n	 (= ?spd (:spdeed ?cru))))")
	(rhs "(println [:ClimbDone ?id ?alt])\n(modify ?fp vertical-status \"LEVEL\")")
	(salience 0)
	(title "mf:ClimbDone"))

([FlightPro_Class280000] of  CloProgram

	(cloFunctions
		[FlightPro_Class620010]
		[FlightPro_Class290006]
		[FlightPro_Class200001]
		[FlightPro_Class250011]
		[FlightPro_Class260003]
		[FlightPro_Class90005]
		[FlightPro_Class490000]
		[FlightPro_Class530000]
		[FlightPro_Class500000]
		[FlightPro_Class520001]
		[FlightPro_Class620004]
		[FlightPro_Class620003]
		[FlightPro_Class490002]
		[FlightPro_Class540017]
		[FlightPro_Class250001]
		[FlightPro_Class690004]
		[FlightPro_Class690009]
		[FlightPro_Class690010]
		[FlightPro_Class850007])
	(cloNamespace [FlightPro_Class280001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class160009]
		[FlightPro_Class550000]
		[FlightPro_Class590001]
		[FlightPro_Class690005]
		[FlightPro_Class690006])
	(title "ES Functions"))

([FlightPro_Class280001] of  CloNamespace

	(source "(:use protege.core)\n(:require\n  [pro.commands :as cmd]\n  [async.proc :as asp]\n  [cesium.core :as czs]\n  [calc.core :as calc]\n  [calc.geo :as geo]\n  [fr24.client :as fr24]\n  [my.flights.move :as mfs]\n  [rete.core :as rt])\n(:import\n  java.util.Calendar)")
	(title "es"))

([FlightPro_Class280040] of  CloFunction

	(source "(when-let [dati (.getInstance *kb* (.substring id 2))]\n  ;;(decorate-instance dati)\n  (point-out-place {:instance dati})\n  (asp/pump-in (:ins-chn @COMM) \n	(placemark-popup-instruct dati)))")
	(title "placemark-info [id]"))

([FlightPro_Class280085] of  POIRequest

	(lat 60.1667)
	(lng 24.9333)
	(max-rows 50)
	(poi-req-butt "Get Points Of Interest/osm.data/poi-request")
	(radius 1.0))

([FlightPro_Class280086] of  TypeClass

	(name "shop")
	(url "/img/shop2.jpeg"))

([FlightPro_Class280087] of  TypeName

	(name "hifi"))

([FlightPro_Class280089] of  TypeName

	(name "convenience"))

([FlightPro_Class280091] of  TypeClass

	(name "amenity")
	(url "/img/amenity2.png"))

([FlightPro_Class280092] of  TypeName

	(name "fast_food"))

([FlightPro_Class280094] of  TypeName

	(name "vending_machine"))

([FlightPro_Class280096] of  TypeName

	(name "art"))

([FlightPro_Class280098] of  TypeClass

	(name "man_made")
	(url "/img/man_made1.png"))

([FlightPro_Class280099] of  TypeName

	(name "surveillance"))

([FlightPro_Class280101] of  TypeName

	(name "nightclub"))

([FlightPro_Class280105] of  TypeName

	(name "pub"))

([FlightPro_Class280107] of  TypeName

	(name "restaurant"))

([FlightPro_Class280109] of  TypeName

	(name "kiosk"))

([FlightPro_Class280113] of  TypeName

	(name "cinema"))

([FlightPro_Class280115] of  TypeName

	(name "hairdresser"))

([FlightPro_Class280118] of  TypeName

	(name "bar"))

([FlightPro_Class280120] of  TypeName

	(name "hardware"))

([FlightPro_Class280123] of  TypeName

	(name "pharmacy"))

([FlightPro_Class280125] of  TypeName

	(name "toilets"))

([FlightPro_Class280128] of  TypeName

	(name "school"))

([FlightPro_Class280131] of  TypeName

	(name "greengrocer"))

([FlightPro_Class280136] of  TypeName

	(name "post_box"))

([FlightPro_Class280139] of  TypeClass

	(name "tourism")
	(url "/img/tourism1.png"))

([FlightPro_Class280140] of  TypeName

	(name "hotel"))

([FlightPro_Class280146] of  TypeName

	(name "second_hand"))

([FlightPro_Class280148] of  TypeName

	(name "fire_hydrant"))

([FlightPro_Class280150] of  TypeName

	(name "travel_agency"))

([FlightPro_Class280161] of  TypeName

	(name "nail_salon"))

([FlightPro_Class280164] of  CloFunction

	(source "(if (instance? Instance pois)\n  (let [ins {:instruct :create-placemark\n	:iname (.getName pois)\n	:tip (or (sv pois \"name\")\n	            (if-let [ntn (sv (sv pois \"typeName\") \"name\")]\n		ntn\n		\"unnamed\"))\n	:lat (sv pois \"lat\")\n	:lon (sv pois \"lng\")}]\n    (if-let [url (sv (sv pois \"typeName\") \"url\")]\n      (assoc ins :url-ico url)\n      (if-let [url (sv (sv pois \"typeClass\") \"url\")]\n        (assoc ins :url-ico url)\n        (assoc ins :feature \"default-pois\"))))\n  (map pois-instruct pois))")
	(title "pois-instruct [pois]"))

([FlightPro_Class280167] of  CloFuncall

	(source "(def ins (first (cls-instances \""))

([FlightPro_Class280168] of  CloFuncall

	(source "(def ins (first (cls-instances \"POIRequest\")))"))

([FlightPro_Class280169] of  CloFuncall

	(source "(def inst (first (cls-instances \"POIRequest\")))"))

([FlightPro_Class280170] of  CloFuncall

	(source "inst"))

([FlightPro_Class280171] of  CloFuncall

	(source "(def inst (second (cls-instances \"POIRequest\")))"))

([FlightPro_Class280172] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) (pois-instruct (sv inst \"osm-respnses\")))"))

([FlightPro_Class280173] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) (pois-instruct (sv inst \"osm-responses\")))"))

([FlightPro_Class280174] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) (pois-instruct (svs inst \"osm-responses\")))"))

([FlightPro_Class280175] of  CloFuncall

	(source "(type (svs inst \"osm-responses\"))"))

([FlightPro_Class280176] of  CloFuncall

	(source "(seq? (svs inst \"osm-responses\"))"))

([FlightPro_Class280177] of  CloFuncall

	(source "(map async.proc/pump-in (:instructions pro.commands/CHN) (pois-instruct (svs inst \"osm-responses\")))"))

([FlightPro_Class280178] of  CloFuncall

	(source "(doseq [poi (pois-instruct (svs inst \"osm-responses\"))] (async.proc/pump-in (:instructions pro.commands/CHN) poi))"))

([FlightPro_Class280179] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) {:instruct :map-center :coord [60 30] :zoom 18})"))

([FlightPro_Class280180] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) {:instruct :map-center :coord [60.1667 30] :zoom 18})"))

([FlightPro_Class280181] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) {:instruct :map-center :coord [60.1667 24.9333] :zoom 19})"))

([FlightPro_Class280182] of  CloFunction

	(source "(let [mp (into {} hm)\n       lat (mp \"lat\")\n       lon (mp \"lng\")\n       zoo 15\n       chn (:ins-chn @COMM)\n       rss (mp \"osm-responses\")]\n  (map-view-ctrl :server)\n  (asp/pump-in chn\n	{:instruct :map-center\n	 :coord [lat lon]\n	 :zoom zoo\n	 :lock true})\n  (doseq [rs rss]\n    (asp/pump-in chn (pois-instruct rs))))")
	(title "show-on-map [hm inst]"))

([FlightPro_Class280183] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class280085])
	(%3AANNOTATION-TEXT "Current")
	(%3ACREATION-TIMESTAMP "2017.03.10 18:56:41.210 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class280184] of  CloFuncall

	(source "(pump-feature-pois nil nil \"city\" \"Helsinki"))

([FlightPro_Class280185] of  CloFuncall

	(source "(pump-feature-pois nil nil \"city\" \"Helsinki)"))

([FlightPro_Class280186] of  CloFuncall

	(source "(pump-feature-pois nil nil \"city\" \"Helsinki\")"))

([FlightPro_Class280188] of  CloFuncall

	(source "(def hel (fifos \""))

([FlightPro_Class280189] of  CloFuncall

	(source "(def hel (fifos \"WikiArticle\" \"title\" \"Helsinki\"))"))

([FlightPro_Class280190] of  CloFuncall

	(source "hel"))

([FlightPro_Class280191] of  CloFuncall

	(source "(.setDirectType hel (cls \"WikiArticleDetails\"))"))

([FlightPro_Class280192] of  CloFuncall

	(source "(.setDirectType hel (cls \"WikiArticle\"))"))

([FlightPro_Class280198] of  CloFunction

	(source "(condp = (typ dati)\n  \"WikiArticle\"	(invoke-later (do\n	  (.setDirectType dati (cls \"WikiArticleDetails\"))\n	  (ssv dati \"max-rows\" (int 50))\n	  (ssv dati \"radius\" (float 1))\n	  (ssv dati \"poi-req-butt\" \n	    (first (.getDefaultValues (slt \"poi-req-butt\"))))\n	  (ssv dati \"butt-show-pois\" \n	    \"Show on Map/ext.data/show-on-map\")\n	  (ssv dati \"butt-del-pois\" \n	    \"Delete POIs/ext.data/delete-pois\")\n	  (ssv dati \"butt-return\" \n	    \"Return to Flight/ext.data/ret-to-flight\")\n	  (let [frm (.show *prj* dati)]\n	    (.setLocationRelativeTo frm nil)\n	    (.setAlwaysOnTop frm true)\n	    (.setVisible frm true))))\n  false)")
	(title "decorate-instance [dati]"))

([FlightPro_Class290000] of  CloFunction

	(source "([carr]\n  (camera-move carr (/ (:camera TIO) 1000)))\n([carr period]\n  (let [car @carr\n         [lat lon] (:coord car)\n         crs (:course car)\n         alt (int (/ (:altitude car) 3.28084))\n         alt (if (< alt 20) 20 alt)]\n      (czm/fly-to lat lon alt crs period))\n  true)")
	(title "camera-move"))

([FlightPro_Class290001] of  CloFunction

	(source "(println [:CMD-FOLLOW params])\n(let [id (:id params)]\n  (if (fr24/dat id)\n    (rete/assert-frame ['Follow 'id id 'time 0])))")
	(title "follow [params]"))

([FlightPro_Class290003] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2016.11.24 18:22:25.919 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class290004] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class100000])
	(%3ACREATION-TIMESTAMP "2016.11.24 18:24:16.125 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class290005] of  Rule

	(lhs "(Flight id ?id\n           callsign ?cs\n           coord ?crd\n           course ?crs\n           speed ?spd\n           status ?sts\n           age \"NEW\")")
	(rhs "(es/put-on-map ?id ?cs ?crd ?crs ?spd ?sts)")
	(salience 0)
	(title "af:PutFlightOnMap"))

([FlightPro_Class290006] of  CloFunction

	(source "(asp/pump-in (:instructions  cmd/CHN)\n	{:instruct :create-update\n	 :id id\n	 :vehicle {:callsign cs\n	               :coord crd\n	               :course crs\n	               :speed spd\n	               :status sts}})")
	(title "put-on-map [id cs crd crs spd sts]"))

([FlightPro_Class290041] of  TypeName

	(name "town"))

([FlightPro_Class290043] of  TypeClass

	(name "power")
	(url "/img/power2.jpeg"))

([FlightPro_Class290044] of  TypeName

	(name "pole"))

([FlightPro_Class290046] of  TypeName

	(name "buffer_stop"))

([FlightPro_Class290052] of  TypeName

	(name "tower"))

([FlightPro_Class3] of  CloVar

	(source "(js/Cesium.CesiumTerrainProvider.\n  #js{:url \"//assets.agi.com/stk-terrain/world\"\n        :requestWaterMask false\n        :requestVertexNormals false})")
	(title "TERR-PROV"))

([FlightPro_Class30000] of  CloFunction

	(source "(letfn [(proc-fn [cr]\n                      (let [c @cr\n                             g (get c gear)\n                             target (:target g)\n                             step (* (:accel g) (:step g))]\n                        (if (calc/approx= (param c) target step)\n                            (do (param-fn cr target)\n                                  false)\n                            (do (param-fn cr (closer (param c) target step))\n                                  true))))]\n  (vswap! carr assoc-in [gear :eqz-status] (volatile! \"STOP\"))\n  (let [g (get @carr gear)]\n    (asp/start-process (:eqz-status g) \n                                   #(proc-fn carr) \n                                   (:time-out g))))")
	(title "equalize [carr gear param-fn param closer]"))

([FlightPro_Class300000] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [car @CARRIER\n         lat (num-val lat)\n         [_ lon] (:coord car)]\n    (mov/set-turn-point CARRIER [lat lon] (:course car) (:speed car))))")
	(title "latitude [lat]"))

([FlightPro_Class300001] of  RuleSet

	(rules
		[FlightPro_Class690000]
		[FlightPro_Class730002]
		[FlightPro_Class750009]
		[FlightPro_Class780020]
		[FlightPro_Class810007]
		[FlightPro_Class840000]
		[FlightPro_Class690007]
		[FlightPro_Class850005]
		[FlightPro_Class580045]
		[FlightPro_Class580050])
	(templates [Question])
	(title "Questions"))

([FlightPro_Class300006] of  CloFunction

	(source "(if (not= callsign (:mode @CARRIER))\n  (vswap! CARRIER assoc :mode callsign))\n(let [old-crs (:course @CARRIER)\n       new-crs (:course vehicle)]\n  (vswap! CARRIER merge (dissoc vehicle :course))\n  (mov/set-turn-point CARRIER)\n  (if (not= new-crs old-crs)\n    (turn-and-bank CARRIER new-crs)))")
	(title "carrier [callsign vehicle]"))

([FlightPro_Class30001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class30007]
		[FlightPro_Class30011]
		[FlightPro_Class30000]
		[FlightPro_Class130004]
		[FlightPro_Class110000])
	(cloNamespace [FlightPro_Class30002])
	(title "Dynamic"))

([FlightPro_Class30002] of  CloNamespace

	(source "(:require\n  [csasync.proc :as asp]\n  [calc.core :as calc]\n  [calc.geo :as geo])")
	(title "calc.dynamic"))

([FlightPro_Class30003] of  CloFunction

	(source "(float (+ y1 (/ (* (- y2 y1) (- x x1)) (- x2 x1))))")
	(title "linint [x [x1 y1] [x2 y2]]"))

([FlightPro_Class30004] of  CloFunction

	(source ";; left and right borders in table are exclusive\n(let [[lo hi] (split-with #(< (first %) x) table)]\n  (if (seq lo)\n    (if (seq hi)\n      (linint x (last lo) (first hi))\n      [:UB (second (last table))])\n    [:LB (second (first table))]))")
	(title "tabfun [x table]"))

([FlightPro_Class30005] of  CloFunction

	(source ";; inverse function, only for monotone(!!!) functions\n(tabfun y (map #(vector (second %)(first %)) table))")
	(title "i-mono-tabfun [y table]"))

([FlightPro_Class30006] of  CloFunction

	(source "(let [res (tabfun x table)]\n  (if (vector? res) (second res) res))")
	(title "smooth-tabfun [x table]"))

([FlightPro_Class30007] of  CloFunction

	(source "(cond\n (< from to) (+ from step)\n (> from to) (- from step)\n true to)")
	(title "step-closer [from to step]"))

([FlightPro_Class30011] of  CloFunction

	(source "(let [dif (- to from)]\n  (cond \n    (> dif 0)\n      (if (<= dif 180)\n        (+ from step)\n        (geo/norm-crs (- from step)))\n    (< dif 0) \n      (if (>= dif -180)\n        (- from step)\n        (geo/norm-crs (+ from step)))\n    true to))")
	(title "course-closer [from to step]"))

([FlightPro_Class30025] of  CloFunction

	(source "(cond\n  (> x y) (< (- x y) eps)\n  (< x y) (< (- y x) eps)\n  true true)")
	(title "approx= [x y eps]"))

([FlightPro_Class30026] of  CloFunction

	(source "([carr course]\n  (vswap! carr assoc-in [:rudder :target] course)\n  (equalize carr :rudder set-course :course course-closer))\n([carr course accel]\n  (vswap! carr assoc-in [:rudder :accel] accel)\n  (turn carr course))")
	(title "turn"))

([FlightPro_Class30027] of  CloFunction

	(source "([carr speed]\n  (vswap! carr assoc-in [:propeller :target] speed)\n  (equalize carr :propeller set-speed :speed step-closer))\n([carr speed acl]\n  (vswap! carr assoc-in [:propeller :accel] acl)\n  (accel carr speed))")
	(title "accel"))

([FlightPro_Class310000] of  CloFunction

	(source "(println [:CMD-INFO params])\n(let [id (:id params)]\n  (if (.startsWith id \"pm\")\n    (exd/placemark-info id)\n    (let [inf (or (get @MY-INFOS id) (fr24/fl-info id))\n           cal (if-let[d (fr24/dat id)]\n                   (fr24/callsign d)\n                   id)]\n      (if inf\n        (let [apt (inf \"airport\")\n               acr (inf \"aircraft\")\n               tim (inf \"time\")\n               img (get (first (get-in acr [\"images\" \"thumbnails\"])) \"src\")\n               [lat lon] (fr24/coord id)\n               dat   [[\"from\" (or (get-in apt [\"origin\" \"name\"]) \"-\")]\n	[\"to\" (or (get-in apt [\"destination\" \"name\"]) \"-\")]\n	[\"airline\" (or (get-in inf [\"airline\" \"short\"]) \"-\")]\n	[\"real-departure\" (or (get-in tim [\"real\" \"departure\"]) \"-\")]\n	[\"scheduled-arrival\" (or (get-in tim [\"scheduled\" \"arrival\"]) \"-\")]\n	[\"aircraft\" (or (get-in acr [\"model\" \"text\"]) \"-\")]\n	[\"latitude\" (or lat \"-\")]\n	[\"longitude\" (or lon \"-\")]\n	[\"course\" (or (fr24/course id) \"-\")]\n	[\"speed\" (or (fr24/speed id) \"-\")]\n	[\"altitude\" (or (fr24/altitude id) \"-\")]\n	[(str \"<input type='button' style='color:purple' value='Trail'\n		onclick='chart.client.trail(\\\"\" id \"\\\")' >\")\n	 (str \"<input type='button' style='color:blue' value='Follow'\n		onclick='chart.client.follow(\\\"\" id \"\\\")' >\")]\n	[\"\"\n	 \"<input type='button' style='color:red' value='Stop'\n		onclick='chart.client.stopfollow()' >\"]]\n                       htm (make-info-html cal img dat)]\n          (asp/pump-in (:instructions CHN)\n            {:instruct :popup\n             :id (:id params)\n             :html htm\n             :time (:popup TIM)}))))))\n\"\"")
	(title "info [params]"))

([FlightPro_Class310001] of  CloVar

	(source "{:popup 30000\n :trail 30000}")
	(title "TIM"))

([FlightPro_Class310002] of  CloFunction

	(source "([id html time]\n  (let [vmp (@VEHICLES id)\n         [lat lon] (:coord @vmp)]\n    (popup lat lon html time)))\n([lat lon html time]\n  (popup lat lon html time 240 480))\n([lat lon html time w h]\n  (let [pop (-> js/L (.popup #js{:maxWidth w :maxHeight h})\n                (.setLatLng (array lat lon))\n                (.setContent html))]\n    (.addLayer @CHART pop)\n    (if (> time 0)\n        (asp/delayer #(.removeLayer @CHART pop) time))))")
	(title "popup"))

([FlightPro_Class310003] of  CloFunction

	(source "(go (<! (timeout time))\n  (func))")
	(title "delayer [func time]"))

([FlightPro_Class310005] of  CloFunction

	(source "(let [head (str \"<h3>\" call \"</h3>\")\n       itag (str \"<img src=\\\"\" img \"\\\">\")\n       rows (for [[k v] dat]\n                 (str \"<tr><td>\" k \"</td><td>\" v \"</td></tr>\"))\n      rows (apply str rows)]\n  (str head itag \"<table>\" rows \"</table>\"))")
	(title "make-info-html [call img dat]"))

([FlightPro_Class310006] of  CloFunction

	(source "(if (number? x) x (rdr/read-string x))")
	(title "num-val [x]"))

([FlightPro_Class320000] of  CloFunction

	(source "{:coord   [(num-val (ctl/get-value \"input-lat\"))\n               (num-val (ctl/get-value \"input-lon\"))]\n :course   (num-val (ctl/get-value \"input-crs\"))\n :speed    (num-val (ctl/get-value \"input-spd\"))\n :altitude (num-val (ctl/get-value \"input-alt\"))}")
	(title "manual-vehicle []"))

([FlightPro_Class320001] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (let [car @CARRIER\n         lon (num-val lon)\n         [lat _] (:coord car)]\n    (mov/set-turn-point CARRIER [lat lon] (:course car) (:speed car))))")
	(title "longitude [lon]"))

([FlightPro_Class320010] of  RuleSet

	(rules
		[FlightPro_Class320011]
		[FlightPro_Class410002]
		[FlightPro_Class410001]
		[FlightPro_Class370003]
		[FlightPro_Class430010]
		[FlightPro_Class290005]
		[FlightPro_Class320013]
		[FlightPro_Class320012]
		[FlightPro_Class320013]
		[FlightPro_Class350001]
		[FlightPro_Class230003]
		[FlightPro_Class370002]
		[FlightPro_Class220001]
		[FlightPro_Class250010]
		[FlightPro_Class390000])
	(templates
		[Flight]
		[Onboard]
		[Follow])
	(title "All Flights"))

([FlightPro_Class320011] of  Rule

	(lhs "?of1 (Flight id ?id age \"OLD\" time ?t1)\n?of2 (Flight id ?id age \"OLD\" time ?t2\n	(> ?t2 ?t1))")
	(rhs "(retract ?of1)")
	(salience 1)
	(title "af:FlightHistory3"))

([FlightPro_Class320012] of  Rule

	(lhs "(Flight id ?id altitude ?a1 age \"OLD\")\n(Flight id ?id altitude ?a2 age \"CURRENT\")\n?fl (Flight id ?id altitude ?a3 age \"NEW\"\n	callsign ?cs\n	status ?s3 \n	coord ?crd3 \n	course ?crs3\n	speed ?spd3\n	((not= ?s3 \"DESCEND\")\n	 (> ?a1 ?a2 ?a3)))")
	(rhs "(modify ?fl status \"DESCEND\")\n(es/put-on-map ?id ?cs ?crd3 ?crs3 ?spd3 ?s3)")
	(salience 0)
	(title "af:DescendMark"))

([FlightPro_Class320013] of  Rule

	(lhs "(Flight id ?id altitude ?a1 age \"OLD\")\n(Flight id ?id altitude ?a2 age \"CURRENT\")\n?fl (Flight id ?id altitude ?a3 age \"NEW\"\n	callsign ?cs\n	status ?s3 \n	coord ?crd3 \n	course ?crs3\n	speed ?spd3\n	((not= ?s3 \"CLIMB\")\n	 (< ?a1 ?a2 ?a3)))")
	(rhs "(modify ?fl status \"CLIMB\")\n(es/put-on-map ?id ?cs ?crd3 ?crs3 ?spd3 ?s3)")
	(salience 0)
	(title "af:ClimbMark"))

([FlightPro_Class320014] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(mode run)
	(rule-sets
		[FlightPro_Class320010]
		[FlightPro_Class410000]
		[FlightPro_Class300001])
	(steps 1)
	(title "Flights Pro Run"))

([FlightPro_Class320015] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class320014])
	(%3ACREATION-TIMESTAMP "2016.11.23 17:10:20.165 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class320016] of  CloFunction

	(source "(let [cal @CALLS\n       onb @ONBOARD]\n  (doseq [[k v] (seq @fls)]\n    (let [cls (fr24/callsign v)\n           veh {:coord (fr24/coord v)\n                   :course (fr24/course v)\n                   :speed (fr24/speed v)\n                   :altitude (fr24/altitude v)\n                   :status \"LEVEL\"}]\n      (if (= cls onb)\n        (asp/pump-in DIR-CHN\n          {:directive :carrier\n           :callsign cls\n           :vehicle veh}))\n      (asp/pump-in INS-CHN\n        {:instruct :create-update\n         :id k\n         :vehicle veh})))\n  (if (and (empty? cal) (= onb \"select\"))\n    (let [cal (map fr24/callsign (keys @fls))]\n      (vreset! CALLS cal)\n      (async.proc/pump-in DIR-CHN \n        {:directive :callsigns :list cal}))))")
	(title "process-flights0 [fls]"))

([FlightPro_Class320022] of  CloFunction

	(source "(int (/ (System/currentTimeMillis) 1000))")
	(title "current-time []"))

([FlightPro_Class330000] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"INITIAL-TURN\"\n	takeoff ?tof)\n(Flight age \"CURRENT\" \n	id ?id\n	course ?crs\n	(= ?crs (first (:to-crs ?tof))))")
	(rhs "(println [:TakeoffDone ?id ?crs])\n(modify ?fp takeoff \"DONE\"\n	status \"CRUISE\")")
	(salience 0)
	(title "mf:TakeoffDone"))

([FlightPro_Class330001] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	start-time ?stm\n	takeoff ?tof\n	((number? ?stm)\n	 (map? ?tof)))\n(Flight age \"CURRENT\"\n	id ?id\n	time ?tim\n	(>= ?tim ?stm))")
	(rhs "(println [:TakeoffStart ?id ?tof])\n(my.flights.move/control ?id my.flights.move/elevate (:altitude ?tof))\n(my.flights.move/control ?id my.flights.move/accel (:speed ?tof))\n(modify ?fp start-time \"PASSED\"\n	status \"TAKEOFF\")")
	(salience 0)
	(title "mf:TakeoffStart"))

([FlightPro_Class330002] of  CloVar

	(source "(volatile! \"STOP\")")
	(title "CAM-PROC"))

([FlightPro_Class330003] of  CloVar

	(source "{:base (str HOST PORT \"/\")\n :chart (str HOST PORT \"/chart/\")\n :directives (str HOST PORT \"/directives/\")\n :instructions (str HOST PORT \"/instructions/\")\n :command (str HOST PORT \"/command/\")\n :question (str HOST PORT \"/question/\")\n :answer (str HOST PORT \"/answer/\")\n :manual-data (str HOST PORT \"/manual-data/\")}")
	(title "URL"))

([FlightPro_Class330004] of  CloVar

	(source "{:carrier 1000\n :camera 2222\n :directives 911\n :instructions 979\n :vehicles 200\n :display 831\n :manual-data 6000\n :ext-data-popup 60000}")
	(title "TIO"))

([FlightPro_Class330005] of  CloFunction

	(source "(.-innerHTML (by-id id))")
	(title "get-html [id]"))

([FlightPro_Class330006] of  CloFunction

	(source "(.-value (by-id id))")
	(title "get-value [id]"))

([FlightPro_Class330040] of  TypeName

	(name "utility_pole"))

([FlightPro_Class330042] of  TypeName

	(name "ice_cream"))

([FlightPro_Class330045] of  TypeName

	(name "taxi"))

([FlightPro_Class330048] of  TypeName

	(name "flagpole"))

([FlightPro_Class330052] of  TypeClass

	(name "railway")
	(url "/img/railway2.png"))

([FlightPro_Class330053] of  TypeName

	(name "tram_stop"))

([FlightPro_Class330056] of  TypeName

	(name "supermarket"))

([FlightPro_Class330058] of  TypeName

	(name "station"))

([FlightPro_Class330062] of  TypeName

	(name "bicycle"))

([FlightPro_Class330066] of  TypeName

	(name "atm"))

([FlightPro_Class330068] of  TypeName

	(name "subway_entrance"))

([FlightPro_Class330073] of  TypeName

	(name "bank"))

([FlightPro_Class330085] of  TypeName

	(name "cafe"))

([FlightPro_Class330093] of  TypeClass

	(name "place")
	(url "/img/place1.png"))

([FlightPro_Class330094] of  TypeName

	(name "locality"))

([FlightPro_Class330105] of  TypeName

	(name "alcohol"))

([FlightPro_Class330107] of  TypeClass

	(name "leisure")
	(url "/img/leisure1.jpeg"))

([FlightPro_Class330108] of  TypeName

	(name "sports_centre"))

([FlightPro_Class330113] of  TypeName

	(name "recycling"))

([FlightPro_Class330116] of  TypeName

	(name "hospital"))

([FlightPro_Class330118] of  TypeName

	(name "library"))

([FlightPro_Class330120] of  TypeName

	(name "survey_point"))

([FlightPro_Class340000] of  CloFunction

	(source "(println [:CMD-TERRAIN params])\n(println \"Terrain: \" TERRAIN)\nTERRAIN")
	(title "terrain [params]"))

([FlightPro_Class340002] of  Rule

	(lhs "?sd (Schedule callsign ?csn\n	time ?tim\n	from ?frm\n	to ?to)")
	(rhs "(if-let [stm (es/start-time ?tim)]\n  (let [spp (es/specific-plan es/GENPLAN ?frm ?to)]\n     (my.flights.move/add-my-flight \n	?csn ?csn (:start-crd spp) (:start-run spp) 0 (:start-alt spp))\n     (asser FlightPlan id ?csn\n	start-time stm\n	spec-plan spp\n	takeoff (es/takeoff-plan spp)\n	cruise (es/cruise-plan spp)\n	landing (es/landing-plan spp)\n	status \"READY\"\n	vertical-status \"OFF\")\n     (pro.commands/set-my-flight-info ?csn ?tim ?frm ?to)))")
	(salience 0)
	(title "mf:FlightPlan"))

([FlightPro_Class350000] of  CloFunction

	(source "(let [pts (if (not (empty? trail))\n               trail\n               (if-let [inf (fr24/fl-info id)]\n                   (mapcat #(list (% \"lat\") (% \"lng\") (% \"alt\")) (inf \"trail\"))))]\n  (if pts\n    (asp/pump-in (:instructions CHN)\n        {:instruct :trail\n         :id id\n         :points pts\n         :options {:weight 3\n                        :color \"purple\"}\n         :time (:trail TIM)})))")
	(title "do-trail [id trail]"))

([FlightPro_Class350001] of  Rule

	(lhs "?f (Follow id ?id time ?t0)\n(Flight id ?id coord ?crd1 altitude ?alt1 age \"OLD\" time ?t1\n	(<= ?t0 ?t1))\n(Flight id ?id coord ?crd2 altitude ?alt2 age \"CURRENT\")\n(Flight id ?id coord ?crd3 altitude ?alt3 age \"NEW\" time ?t3 callsign ?cs)")
	(rhs "(println [:FOLLOW ?cs])\n(let [[lat1 lon1] ?crd1\n       [lat2 lon2] ?crd2\n       [lat3 lon3] ?crd3]\n  (pro.commands/set-map-view ?crd3)\n  (pro.commands/do-trail ?id \n	[lat3 lon3 ?alt3\n	 lat2 lon2 ?alt2\n	 lat1 lon1 ?alt1])\n  (modify ?f time ?t3))")
	(salience 0)
	(title "af:FollowFlight"))

([FlightPro_Class360000] of  CloFunction

	(source "(let [ops (clj->js options)\n       pts (map #(js/L.LatLng. (first %) (second %)) (partition 3 points))\n       pts (clj->js pts)\n       trl (js/L.polyline pts ops)]\n    (.addLayer @CHART trl)\n    (if (> time 0)\n        (asp/delayer #(.removeLayer @CHART trl)\n                            time)))")
	(title "add-trail [id points options time]"))

([FlightPro_Class370000] of  CloFunction

	(source "(let [cen (js/L.LatLng. lat lon)\n        zom (or zoom (.getZoom @CHART))]\n  (.setView @CHART cen zom {})\n  (if (not lock)\n    (new-visible)))")
	(title "map-center [[lat lon] zoom lock]"))

([FlightPro_Class370001] of  CloFunction

	(source "(let [[n s w e] (visible-map)\n        z (.getZoom @CHART)\n        url (str (:command URL) \"visible?z=\" z\n		\"&n=\" n \n		\"&s=\" s \n		\"&w=\" w \n		\"&e=\" e)]\n    (GET url {:handler (fn [response])\n              :error-handler error-handler}))")
	(title "new-visible []"))

([FlightPro_Class370002] of  Rule

	(lhs "?ob1 (Onboard)\n?ob2 (Onboard callsign \"STOP\")")
	(rhs "(retract ?ob1 ?ob2)")
	(salience 0)
	(title "af:StopOnboard"))

([FlightPro_Class370003] of  Rule

	(lhs "?f1 (Follow  id ?id1 time ?t1)\n?f2 (Follow  id ?id2 time 0\n	(not= ?id1 ?id2))")
	(rhs "(retract ?f1)\n(if (= ?id2 \"STOP\")\n   (retract ?f2))")
	(salience 1)
	(title "af:StopOrSwitchFollow"))

([FlightPro_Class370004] of  CloFunction

	(source "(if (= (:fr24-bbx-ctrl @exd/COMM) :client)\n  (asp/pump-in (:instructions CHN)\n	{:instruct :map-center\n	 :coord coord})\n  (fr24/set-bbx (first coord) (second coord)))")
	(title "set-map-view [coord]"))

([FlightPro_Class380000] of  CloFunction

	(source "(GET (str (:command URL) \"stopfollow\")\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "stopfollow []"))

([FlightPro_Class380001] of  CloFunction

	(source "(GET (str (:command URL) \"trail?id=\" id)\n  {:handler (fn [response])\n   :error-handler error-handler})")
	(title "trail [id]"))

([FlightPro_Class380002] of  CloFunction

	(source "(println [:CMD-TRAIL params])\n(do-trail (:id params) [])\n\"\"")
	(title "trail [params]"))

([FlightPro_Class380003] of  CloFunction

	(source "(let [bnd (.getBounds @CHART)]\n  [(.getNorth bnd)\n   (.getSouth bnd)\n   (.getWest bnd)\n   (.getEast bnd)])")
	(title "visible-map []"))

([FlightPro_Class380004] of  CloFunction

	(source "(println [:CMD-VISIBLE params])\n(let [bbz (reduce-kv #(assoc %1 %2 (read-string %3)) {} params)]\n  (vswap! exd/COMM assoc \n	:visible [(:n bbz) (:s  bbz) (:w bbz) (:e bbz)]\n	:ins-chn (:instructions CHN))\n  (if (:wiki @exd/COMM)\n    (exd/pump-wiki))\n  (fr24/set-bbx bbz))\n\"\"")
	(title "visible [params]"))

([FlightPro_Class390000] of  Rule

	(lhs "(Onboard callsign ?cs1)\n(Flight callsign ?cs1 coord ?c1 course ?crs1 age \"NEW\")\n(Flight id ?id2 coord ?c2 altitude ?a2 age \"CURRENT\" point4d ?p2 callsign ?cs2)\n(Flight id ?id2 coord ?c3 altitude ?a3 age \"NEW\" point4d ?p3 course ?crs3 \n	(< (calc.geo/distance-nm ?c1 ?c3) 10)))")
	(rhs "(cesium.core/leg ?cs2\n	(if (calc.geo/following? ?crs1 ?crs3)\n	  (es/URL-ICO \"FOLLOWING\")\n	  (es/URL-ICO \"COUNTER\")) \n	(calc.core/smooth-tabfun (calc.geo/distance-nm ?c1 ?c3) [[0 1.0][20 0.1]])\n	?p2\n	?p3)")
	(salience 0)
	(title "af:CZML-LegGeneration"))

([FlightPro_Class390001] of  CloFunction

	(source "(let [dif (Math/abs (- crs2 crs1))]\n   (or (< dif 90) (> dif 270)))")
	(title "following? [crs1 crs2]"))

([FlightPro_Class390002] of  ClsRequired

	(cloFunctions
		[FlightPro_Class130003]
		[FlightPro_Class30025]
		[FlightPro_Class30003]
		[FlightPro_Class30004]
		[FlightPro_Class30005]
		[FlightPro_Class30006])
	(cloNamespace [FlightPro_Class400003])
	(title "Calculus"))

([FlightPro_Class390003] of  CloFunction

	(source "(println [:CMD-STOPFOLLOW params])\n(rete/assert-frame ['Follow 'id \"STOP\" 'time 0])\n\"\"")
	(title "stopfollow [params]"))

([FlightPro_Class4] of  CloVar

	(source "(js/Cesium.Viewer. \n  \"cesiumContainer\" \n  #js{:animation false})")
	(title "VIEWER"))

([FlightPro_Class40000] of  HTML

	(source "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Cockpit View</title>\n    <link rel=\"stylesheet\" href=\"css/cesium.css\" />\n    <script src=\"Cesium/Cesium.js\"></script>\n    <style>\n      @import url(Cesium/Widgets/widgets.css);\n      #cesiumContainer {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        overflow: hidden;\n        padding: 0;\n        font-family: sans-serif;\n      }\n      html {\n        height: 100%;\n      }\n      body {\n        padding: 0;\n        margin: 0;\n        overflow: hidden;\n        height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"cesiumContainer\"></div>\n    <div id=\"autopilot\"></div>\n    <div id=\"course\"></div><div id=\"course-fld\"></div><div id=\"accel\"></div>\n    <div id=\"speed\"></div><div id=\"speed-fld\"></div><div id=\"speed-acl\"></div>\n    <div id=\"altitude\"></div><div id=\"altitude-fld\"></div><div id=\"altitude-acl\"></div>\n    <div id=\"lat\"></div></div><div id=\"latitude-fld\"></div>\n    <div id=\"lon\"></div></div><div id=\"longitude-fld\"></div>\n    <div id=\"camera\"></div>\n    <div id=\"onboard\"></div><div id=\"onboard-fld\"></div>\n    <div id=\"view\"></div><div id=\"view-fld\"></div>\n    <div id=\"pitch\"></div><div id=\"pitch-fld\"></div>\n    <div id=\"roll\"></div><div id=\"roll-fld\"></div>\n    <script>\n      Cesium.BingMapsApi.defaultKey = 'Au5mRx6ODcM1h4EAWNyK8wWoyaTjeLuvGkacr7WRZgmAt4QtmyV03OrN1TYb-cr7';\n    </script>\n    <script type=\"text/javascript\" src=\"js/main.js\"></script>\n  </body>\n</html>")
	(store-in "resources/public")
	(title "cezium"))

([FlightPro_Class400000] of  CloProgram

	(cloFunctions
		[FlightPro_Class20013]
		[FlightPro_Class320022]
		[FlightPro_Class190000]
		[FlightPro_Class210001]
		[FlightPro_Class310005]
		[FlightPro_Class220030]
		[FlightPro_Class380004]
		[FlightPro_Class230005]
		[FlightPro_Class350000]
		[FlightPro_Class370004]
		[FlightPro_Class310000]
		[FlightPro_Class270000]
		[FlightPro_Class340000]
		[FlightPro_Class290001]
		[FlightPro_Class380002]
		[FlightPro_Class390003]
		[FlightPro_Class610013]
		[FlightPro_Class610012]
		[FlightPro_Class500003]
		[FlightPro_Class500002]
		[FlightPro_Class460001]
		[FlightPro_Class420000]
		[FlightPro_Class640008]
		[FlightPro_Class420021]
		[FlightPro_Class460002]
		[FlightPro_Class510000]
		[FlightPro_Class590000]
		[FlightPro_Class660024]
		[FlightPro_Class640001]
		[FlightPro_Class830000])
	(cloNamespace [FlightPro_Class400001])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class20004]
		[FlightPro_Class310001]
		[FlightPro_Class510001]
		[FlightPro_Class610000]
		[FlightPro_Class630000])
	(title "Pro Commands"))

([FlightPro_Class400001] of  CloNamespace

	(source "(:use protege.core)\n(:require \n  [compojure.core :refer [GET]]\n  [fr24.client :as fr24]\n  [async.proc :as asp]\n  [rete.core :as rete]\n  [cesium.core :as czs]\n              [cognitect.transit :as t]\n  [ext.data :as exd])\n(:import java.io.ByteArrayOutputStream)")
	(title "pro.commands"))

([FlightPro_Class400003] of  CloNamespace

	(title "calc.core"))

([FlightPro_Class410000] of  RuleSet

	(rules
		[FlightPro_Class340002]
		[FlightPro_Class330001]
		[FlightPro_Class520003]
		[FlightPro_Class330000]
		[FlightPro_Class270002]
		[FlightPro_Class270003]
		[FlightPro_Class500001]
		[FlightPro_Class540000]
		[FlightPro_Class550002]
		[FlightPro_Class540018]
		[FlightPro_Class540019]
		[FlightPro_Class540020]
		[FlightPro_Class560000]
		[FlightPro_Class570001])
	(templates
		[Flight]
		[FlightPlan]
		[Schedule])
	(title "My Flights"))

([FlightPro_Class410001] of  Rule

	(lhs "?nf1 (Flight id ?id age \"NEW\" time ?t1)\n?nf2 (Flight id ?id age \"NEW\" time ?t2\n	(> ?t2 ?t1))")
	(rhs "(modify ?nf1 age \"CURRENT\")")
	(salience 1)
	(title "af:FlightHistory1"))

([FlightPro_Class410002] of  Rule

	(lhs "?cf1 (Flight id ?id age \"CURRENT\" time ?t1)\n?cf2 (Flight id ?id age \"CURRENT\" time ?t2\n	(> ?t2 ?t1))")
	(rhs "(modify ?cf1 age \"OLD\")")
	(salience 1)
	(title "af:FlightHistory2"))

([FlightPro_Class410020] of  Rule

	(lhs "(Flight id ?id age \"OLD\" time ?t1)\n?f (Follow id ?id time 0)\n(not Follow)")
	(rhs "(modify ?f time ?t1)")
	(salience 0)
	(title "af:StartFollow"))

([FlightPro_Class420000] of  CloFunction

	(source ";;(println [:QUESTION pp])\n(write-transit \n  (condp = (:question pp)\n    \"es\"	(ask-es (:predicate pp) (:subject pp) (:object pp) (:adjunct pp))\n    \"countries\"	(->> (fr24/airports-by-country)\n	  keys\n	  sort)\n    \"airports\"	(->> (get (fr24/airports-by-country) (:country pp))\n	  keys\n	  sort)\n    \"predicates\" (predicates \n	  (fainst (cls-instances \"QuestionTree\") nil))\n    \"subjects\"	(subjects \n	  (:predicate pp) \n	  (fainst (cls-instances \"QuestionTree\") nil))\n    \"objects\"	(objects\n	  (:predicate pp)  \n	  (:subject pp) \n	  (fainst (cls-instances \"QuestionTree\") nil))\n    \"adjuncts\"	(adjuncts\n	  (:predicate pp)  \n	  (:subject pp) \n	  (:object pp)\n	  (fainst (cls-instances \"QuestionTree\") nil))\n    false))")
	(title "question [pp]"))

([FlightPro_Class420008] of  ClsRequired

	(cloFunctions
		[FlightPro_Class140005]
		[FlightPro_Class140004]
		[FlightPro_Class420010]
		[FlightPro_Class440001]
		[FlightPro_Class420011]
		[FlightPro_Class600000]
		[FlightPro_Class420020]
		[FlightPro_Class450000])
	(cloNamespace [FlightPro_Class420009])
	(cloVars
		[FlightPro_Class70000]
		[FlightPro_Class20005]
		[FlightPro_Class330003]
		[FlightPro_Class80002])
	(title "Ask Master"))

([FlightPro_Class420009] of  CloNamespace

	(source "(:require \n  [ajax.core :refer [GET]]\n  [chart.controls :refer [show-chart-controls]])")
	(title "ask.master"))

([FlightPro_Class420010] of  CloFunction

	(source "(condp = typ\n    :itself (apply str (for [e lst]\n                         (str \"<option value='\" e \"'>\" e \"</option>\")))\n    :count  (apply str (for [i (range (count lst))]\n                            (str \"<option value='\" i \"'>\" (nth lst i) \"</option>\"))))")
	(title "options [lst typ]"))

([FlightPro_Class420011] of  CloFunction

	(source "(let [sel (str \"<select onchange='javascript:\" ns \".handler\" k \"(this.value)' style='width:\" wid \"px'>\"\n                 \"<option value='-1'>\" header \"</option>\"\n                 (options lst typ)\n                 \"</select>\")]\n  (set-html! (str element k) sel))")
	(title "selector [element k ns header lst typ wid]"))

([FlightPro_Class420020] of  CloFunction

	(source "(GET (:answer URL) \n  {:handler handler\n   :error-handler error-handler\n   :response-format :transit})")
	(title "get-answer [handler]"))

([FlightPro_Class420021] of  CloFunction

	(source "(println [:CMD-MOVE-TO params])\n(let [{:keys [country airport]} params]\n  (if-let [apt (get-in (fr24/airports-by-country) [country airport])]\n    (let [iata (apt \"iata\")\n           alt (apt \"alt\")\n           crd [(apt \"lat\") (apt \"lon\")]]\n      (foc-apt-ins apt)\n      (if (= TERRAIN \"yes\")\n        (def APT-ALT alt)) \n      (set-map-view crd)\n      (println :Airport country airport iata crd alt))))\n\"\"")
	(title "move-to [params]"))

([FlightPro_Class430000] of  CloFunction

	(source "([]\n  (am/ask-server {:question \"countries\"}\n	move-to))\n([cns]\n  (am/selector \"element\" 1 \"chart.client\" \"countries\" cns :itself 130)\n  (defn handler1 [sel]\n    (am/ask-server {:question \"airports\"\n	       :country sel}\n	#(move-to sel %))))\n([cnt aps]\n  (am/selector \"element\" 2 \"chart.client\" \"airports\" aps :itself 130)\n  (defn handler2 [sel]\n    (let [prm (str \"?country=\" cnt\n	\"&airport=\" sel)]\n      (GET (str (:command URL) \"move-to\" prm) no-handler)\n      (am/clear-dialog))))")
	(title "move-to"))

([FlightPro_Class430010] of  Rule

	(lhs "?f1 (Flight id ?id time ?t1)\n(Flight age \"NEW\" time ?t2\n	(> (- ?t2 ?t1) 120))")
	(rhs "(es/put-off-map ?id)\n(retract ?f1)")
	(salience 0)
	(title "af:ForgetOldFlight"))

([FlightPro_Class440000] of  CloFunction

	(source "([]\n  (am/input \"element\" 1 \"chart.client\" \"new callsign\" 80)\n  (defn handler1 [call]\n    (am/input \"element\" 2 \"chart.client\" \"hh:mm\" 80)\n      (defn handler2 [tim]\n        (schedule call tim))))\n([call tim]\n  (am/ask-server {:question \"countries\"}\n	#(schedule call tim %)))\n([call tim cns1]\n  (am/selector \"element\" 3 \"chart.client\" \"from country\" cns1 :itself 130)\n  (defn handler3 [sel]\n    (am/ask-server {:question \"airports\"\n	       :country sel}\n	#(schedule call tim sel %))))\n([call tim cnt1 aps1]\n  (am/selector \"element\" 4 \"chart.client\" \"from airport\" aps1 :itself 130)\n  (defn handler4 [sel]\n    (am/ask-server {:question \"countries\"}\n	#(schedule call tim cnt1 sel %))))\n([call tim cnt1 apt1 cns2]\n  (am/selector \"element\" 5 \"chart.client\" \"to county\" cns2 :itself 130)\n  (defn handler5 [sel]\n    (am/ask-server {:question \"airports\"\n	       :country sel}\n	#(schedule call tim cnt1 apt1 sel %))))\n([call tim cnt1 apt1 cnt2 aps2]\n  (am/selector \"element\" 6 \"chart.client\" \"to airport\" aps2 :itself 130)\n  (defn handler6 [sel]\n    (let [prm (str \"?callsign=\" call\n	\"&time=\" tim\n	\"&country1=\" cnt1\n	\"&airport1=\" apt1\n	\"&country2=\" cnt2\n	\"&airport2=\" sel)]\n      (GET (str (:command URL) \"schedule\" prm) no-handler)\n      (am/clear-dialog))))")
	(title "schedule"))

([FlightPro_Class440001] of  CloFunction

	(source "(let [inp (str \"<input type='text' onchange='javascript:\" ns \".handler\" k \"(this.value)'\n	style='width:\" wid \"px' \n	value='\" header \"'>\")]\n  (set-html! (str element k) inp))")
	(title "input [element k ns header wid]"))

([FlightPro_Class450000] of  CloFunction

	(source "(set-html! \"element1\" \"\")\n(set-html! \"element2\" \"\")\n(set-html! \"element3\" \"\")\n(set-html! \"element4\" \"\")\n(set-html! \"element5\" \"\")\n(set-html! \"element6\" \"\")\n(set-html! \"element20\" \"\")\n(set-html! \"element30\" \"\")\n(set-html! \"element40\" \"\")\n(show-chart-controls)")
	(title "clear-dialog []"))

([FlightPro_Class460000] of  Airport

	(altitude 280)
	(coord 62.06362 -7.27721)
	(country "Faroe Islands")
	(iata "FAE")
	(icao "EKVG")
	(runways 0)
	(title "Vagar Airport"))

([FlightPro_Class460001] of  CloFunction

	(source "(map #(sv % \"name\") (svs qt \"branches\"))")
	(title "predicates [qt]"))

([FlightPro_Class460002] of  CloFunction

	(source "(println [:CMD-SCHEDULE params])\n(let [{:keys [callsign time country1 airport1 country2 airport2]} params\n       abc (fr24/airports-by-country)\n       apf (get-in abc [country1 airport1])\n       apt (get-in abc [country2 airport2])\n       mes \"Airport not found: \"]\n  (if (and apf apt)\n    (do (foc-apt-ins apf)\n      (foc-apt-ins apt)\n      (rete/assert-frame ['Schedule \n	'callsign callsign\n	'time time\n	'from apf\n	'to apt]))\n    (do (if (nil? apf)\n            (println mes country1 airport1))\n          (if (nil? apt)\n            (println mes country2 airport2)))))\n\"\"")
	(title "schedule [params]"))

([FlightPro_Class470000] of  CloVar

	(source "(defonce CARRIERS (volatile! {}))")
	(title "defCARRIERS"))

([FlightPro_Class470001] of  CloFunction

	(source "(letfn [(move-all [carrs]\n	(doseq [carr (vals @carrs)]\n	  (move carr)))]\n  (asp/repeater move-all CARRIERS (:carrier TIO))\n  (println (str \"  My Flights Movement Interval: \" (:carrier TIO))))")
	(title "start-movement []"))

([FlightPro_Class470002] of  CloFunction

	(source "(let [carr (volatile! (assoc (merge {} @CARRIER)\n	:mode call\n   	:coord coord\n   	:course crs\n   	:speed spd\n   	:altitude alt))]\n  (set-turn-point carr)\n  (vswap! CARRIERS assoc id carr))")
	(title "add-my-flight [id call coord crs spd alt]"))

([FlightPro_Class470003] of  CloFunction

	(source "(vswap! CARRIERS dissoc id)")
	(title "rem-my-flight [id]"))

([FlightPro_Class470004] of  CloFunction

	(source "(if-let [carr (get @CARRIERS id)]\n  (if (vector? arg)\n    (func carr (first arg) (second arg))\n    (func carr arg)))")
	(title "control [id func arg]"))

([FlightPro_Class480000] of  CloProgram

	(cloFunctions
		[FlightPro_Class100027]
		[FlightPro_Class240001]
		[FlightPro_Class240002]
		[FlightPro_Class80000]
		[FlightPro_Class480002]
		[FlightPro_Class30007]
		[FlightPro_Class30011]
		[FlightPro_Class30000]
		[FlightPro_Class30027]
		[FlightPro_Class140027]
		[FlightPro_Class30026]
		[FlightPro_Class470002]
		[FlightPro_Class470003]
		[FlightPro_Class470004]
		[FlightPro_Class470001]
		[FlightPro_Class250000]
		[FlightPro_Class520000]
		[FlightPro_Class560001])
	(cloNamespace [FlightPro_Class480001])
	(cloVars
		[FlightPro_Class480003]
		[FlightPro_Class480004]
		[FlightPro_Class330004]
		[FlightPro_Class100025]
		[FlightPro_Class470000])
	(title "My Flights Movement"))

([FlightPro_Class480001] of  CloNamespace

	(source "(:require\n  [calc.core :as calc]\n  [calc.geo :as geo]\n  [async.proc :as asp])")
	(title "my.flights.move"))

([FlightPro_Class480002] of  CloFunction

	(source "(let [car @carr\n       tur (:turn-point car)\n       hrs (:step-hrs car)\n       elt (+ (:clk tur) hrs)\n       way (* (:rdh tur) elt)\n       [phi lam] (geo/spherical-between (:phi tur) (:lam tur) way (:dir tur))]\n  (vswap! carr assoc :coord [(/ phi PID180) (/ lam PID180)]\n                                :turn-point (assoc tur :clk elt)))")
	(title "move [carr]"))

([FlightPro_Class480003] of  CloVar

	(source "(/ Math/PI 180)")
	(title "PID180"))

([FlightPro_Class480004] of  CloVar

	(source "(/ Math/PI 10800)")
	(title "NMRAD"))

([FlightPro_Class480005] of  CloFunction

	(source "(loop [mff (seq mff) ff ff]\n  (if (seq mff)\n    (let [[id mf] (first mff)\n           mf @mf\n           [lat lon] (:coord mf)]\n      (recur (rest mff) \n        (assoc ff id \n	[0 lat lon (:course mf) (:altitude mf) (:speed mf) \n	 6 7 8 9 10 11 12 13 14 15\n	 (:mode mf)])))\n    ff))")
	(title "merge-my-flights [mff ff]"))

([FlightPro_Class490000] of  CloFunction

	(source ";;(println [:START-TIME tim])\n(let [[h m :as hm] (seq (.split tim \":\"))]\n  (if (and (seq hm) (= (count hm) 2))\n    (let [h (read-string h)\n           m (if (.startsWith m \"0\") (.substring m 1) m)\n           m (read-string m)]\n      (if (and (number? h) (number? m) (<= 0 h 23) (<= 0 m 59))\n        (let [cld (Calendar/getInstance)]\n          (.set cld Calendar/HOUR_OF_DAY h)\n          (.set cld Calendar/MINUTE m)\n          (.set cld Calendar/SECOND 0)\n          (int (/ (.getTimeInMillis cld) 1000)))))))")
	(title "start-time [tim]"))

([FlightPro_Class490002] of  CloFunction

	(source "(let [tof (:takeoff spp)\n       [x crsa] (:initial-turn-course tof)]\n    (merge tof   {:from-crs 	[(:start-run spp) crsa]\n	:to-crs 	[(:general-crs spp) crsa]}))")
	(title "takeoff-plan [spp]"))

([FlightPro_Class5] of  CloVar

	(source "(js/Cesium.CzmlDataSource.)")
	(title "CZM-SRC"))

([FlightPro_Class50000] of  CloFunction

	(source "(vswap! CAMERA assoc key val)")
	(title "camera [key val]"))

([FlightPro_Class500000] of  CloFunction

	(source "(letfn [(corr1 [[x y]]\n	[x (+ y elv)])]\n  (vec (map corr1 atab)))")
	(title "corr-alt-tab [atab elv]"))

([FlightPro_Class500001] of  Rule

	(lhs "(FlightPlan id ?id\n	status \"CRUISE\"\n	landing ?lnd\n	cruise ?cru)\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd\n	course ?crs\n	(not= ?crs (int (calc.geo/bear-deg ?crd (:final-turn-crd ?lnd)))))")
	(rhs "(let [newc (int (calc.geo/bear-deg ?crd (:final-turn-crd ?lnd)))]\n  (println [:Cruise ?id newc])\n  (my.flights.move/control ?id my.flights.move/turn [newc 1]))")
	(salience 0)
	(title "mf:Cruise"))

([FlightPro_Class500002] of  CloFunction

	(source "(if-let [flt (seq (filter #(= (sv % \"name\") pred) (svs qt \"branches\")))]\n  (map #(sv % \"name\") (svs (first flt) \"branches\")))")
	(title "subjects [pred qt]"))

([FlightPro_Class500003] of  CloFunction

	(source "(if-let [flt (seq (filter #(= (sv % \"name\") pred) (svs qt \"branches\")))]\n  (if-let [flt (seq (filter #(= (sv % \"name\") subj) (svs (first flt) \"branches\")))]\n    (if-let [bb (seq (svs (first flt) \"branches\"))]\n      (map #(sv % \"name\") bb)\n      (ask-es pred subj nil nil))))")
	(title "objects [pred subj qt]"))

([FlightPro_Class500004] of  TypeName

	(name "seafood"))

([FlightPro_Class500007] of  TypeName

	(name "chemist"))

([FlightPro_Class50001] of  ClsRequired

	(cloFunctions
		[FlightPro_Class10002]
		[FlightPro_Class8]
		[FlightPro_Class9]
		[FlightPro_Class10001]
		[FlightPro_Class50000]
		[FlightPro_Class10003])
	(cloNamespace [FlightPro_Class1])
	(cloVars
		[FlightPro_Class3]
		[FlightPro_Class4]
		[FlightPro_Class5]
		[FlightPro_Class0])
	(documentation [FlightPro_Class60000])
	(title "Cezium Client"))

([FlightPro_Class500011] of  TypeName

	(name "electronics"))

([FlightPro_Class500013] of  TypeName

	(name "outdoor"))

([FlightPro_Class500016] of  TypeName

	(name "doityourself"))

([FlightPro_Class500026] of  TypeName

	(name "butcher"))

([FlightPro_Class500028] of  TypeName

	(name "sauna"))

([FlightPro_Class500031] of  TypeName

	(name "grassland"))

([FlightPro_Class500042] of  TypeName

	(name "mast"))

([FlightPro_Class500045] of  TypeName

	(name "chimney"))

([FlightPro_Class500050] of  TypeName

	(name "car_repair"))

([FlightPro_Class510000] of  CloFunction

	(source "(vswap! MY-INFOS assoc csoid\n  {\"airport\" {\"origin\" {\"name\" (fapt \"name\") \"code\" {\"iata\" (fapt \"iata\")}}\n                  \"destination\" {\"name\" (tapt \"name\") \"code\" {\"iata\" (tapt \"iata\")}}}\n\n   \"aircraft\" {\"model\" {\"text\" \"Ru Lentokone\"}\n                   \"images\" {\"thumbnails\" [{\"src\" (str \"img/\" (int  (rand 7)) \".jpg\")}]}}\n\n   \"time\" {\"real\" {\"departure\" dept}\n               \"scheduled\" {\"arrival\" \"unk\"}}\n\n   \"airline\" {\"short\" \"Ru Airlines\"}})")
	(title "set-my-flight-info [csoid dept fapt tapt]"))

([FlightPro_Class510001] of  CloVar

	(source "(volatile! {\"MANUAL\"\n  {\"airport\" {\"origin\" {\"name\" \"unk\" \"code\" {\"iata\" \"unk\"}}\n                  \"destination\" {\"name\" \"unk\" \"code\" {\"iata\" \"unk\"}}}\n\n   \"aircraft\" {\"model\" {\"text\" \"Ru Lentokone\"}\n                   \"images\" {\"thumbnails\" [{\"src\" \"img/5.jpg\"}]}}\n\n   \"time\" {\"real\" {\"departure\" \"unk\"}\n               \"scheduled\" {\"arrival\" \"unk\"}}\n\n   \"airline\" {\"short\" \"Ru Airlines\"}}})")
	(title "MY-INFOS"))

([FlightPro_Class510004] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class510032])
	(%3ACREATION-TIMESTAMP "2017.03.20 22:47:13.432 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class510024] of  QuestionTree

	(branches [FlightPro_Class510026])
	(name "How many"))

([FlightPro_Class510026] of  QuestionTree

	(branches
		[FlightPro_Class510027]
		[FlightPro_Class510028]
		[FlightPro_Class570000])
	(name "airplanes"))

([FlightPro_Class510027] of  QuestionTree

	(branches
		[FlightPro_Class790000]
		[FlightPro_Class790001]
		[FlightPro_Class850020])
	(name "in the air"))

([FlightPro_Class510028] of  QuestionTree

	(name "on the ground"))

([FlightPro_Class510029] of  QuestionTree

	(branches [FlightPro_Class510030])
	(name "How far"))

([FlightPro_Class510030] of  QuestionTree

	(name "airport"))

([FlightPro_Class510032] of  QuestionTree

	(branches
		[FlightPro_Class510029]
		[FlightPro_Class510024]
		[FlightPro_Class510033]
		[FlightPro_Class510038])
	(name "QTree"))

([FlightPro_Class510033] of  QuestionTree

	(branches
		[FlightPro_Class510034]
		[FlightPro_Class510035])
	(name "What"))

([FlightPro_Class510034] of  QuestionTree

	(name "Intersections"))

([FlightPro_Class510035] of  QuestionTree

	(branches
		[FlightPro_Class510036]
		[FlightPro_Class510037])
	(name "weather"))

([FlightPro_Class510036] of  QuestionTree

	(name "by GeoNames"))

([FlightPro_Class510037] of  QuestionTree

	(name "by Weather2"))

([FlightPro_Class510038] of  QuestionTree

	(branches
		[FlightPro_Class510039]
		[FlightPro_Class510040])
	(name "Where"))

([FlightPro_Class510039] of  QuestionTree

	(name "we are"))

([FlightPro_Class510040] of  QuestionTree

	(branches
		[FlightPro_Class510041]
		[FlightPro_Class510042]
		[FlightPro_Class510044]
		[FlightPro_Class510045]
		[FlightPro_Class510046]
		[FlightPro_Class510047]
		[FlightPro_Class510048]
		[FlightPro_Class510049]
		[FlightPro_Class580132])
	(name "nearest"))

([FlightPro_Class510041] of  QuestionTree

	(name "airports"))

([FlightPro_Class510042] of  QuestionTree

	(name "island"))

([FlightPro_Class510044] of  QuestionTree

	(name "lake"))

([FlightPro_Class510045] of  QuestionTree

	(name "mountine"))

([FlightPro_Class510046] of  QuestionTree

	(name "road"))

([FlightPro_Class510047] of  QuestionTree

	(name "bank"))

([FlightPro_Class510048] of  QuestionTree

	(name "shoal"))

([FlightPro_Class510049] of  QuestionTree

	(name "coast"))

([FlightPro_Class510052] of  QTreeChart

	(chart
		[FlightPro_Class510026]
		[FlightPro_Class510030]
		[FlightPro_Class510041]
		[FlightPro_Class510047]
		[FlightPro_Class510036]
		[FlightPro_Class510037]
		[FlightPro_Class510049]
		[FlightPro_Class510029]
		[FlightPro_Class510024]
		[FlightPro_Class510027]
		[FlightPro_Class510034]
		[FlightPro_Class510042]
		[FlightPro_Class510044]
		[FlightPro_Class510045]
		[FlightPro_Class510040]
		[FlightPro_Class510028]
		[FlightPro_Class510032]
		[FlightPro_Class510046]
		[FlightPro_Class510048]
		[FlightPro_Class510039]
		[FlightPro_Class510035]
		[FlightPro_Class510033]
		[FlightPro_Class510038]
		[FlightPro_Class790000]
		[FlightPro_Class790001]
		[FlightPro_Class850020]
		[FlightPro_Class570000]
		[FlightPro_Class580132]))

([FlightPro_Class520000] of  CloFunction

	(source ";; Calculates time (hrs) and distance (nm)\n(if (= ini-spd fin-spd)\n  [0 0]\n  (let [step (* spd-stp spd-acl)\n         tioh (float (/ spd-tio 3600000))\n         [func pred] (if (> ini-spd fin-spd) [- <=] [+ >=])]\n    (loop [spd ini-spd tim 0 dist 0]\n      (if (pred spd fin-spd)\n        [tim dist]\n        (recur (func spd step) (+ tioh tim) (+ (* spd tioh) dist))))))")
	(title "speed-variation [[ini-spd x] [fin-spd spd-acl] spd-stp spd-tio]"))

([FlightPro_Class520001] of  CloFunction

	(source "(let [[a aa] alt]\n  [(+ a elv) aa])")
	(title "corr-alt [alt elv]"))

([FlightPro_Class520003] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"TAKEOFF\"\n	takeoff ?tof)\n(Flight age \"CURRENT\" \n	id ?id\n	altitude ?alt\n	speed ?spd\n	((>= ?alt (first (:altitude ?tof)))\n	 (>= ?spd (first (:speed ?tof)))))")
	(rhs "(println [:InitialTurnStart ?id (:to-crs ?tof) ?alt ?spd])\n(my.flights.move/control ?id my.flights.move/turn (:to-crs ?tof))\n(modify ?fp status \"INITIAL-TURN\")")
	(salience 0)
	(title "mf:InitialTurnStart"))

([FlightPro_Class530000] of  CloFunction

	(source "(let [rw (if-let [ins (fifos \"Airport\" \"iata\" iata)]\n              (let [rws (vec (svs ins \"runways\"))\n                     idx (int (rand (count rws)))]\n                (nth rws idx))\n              0)]\n  (if (> (rand 1) 0.5)\n    rw\n    (geo/norm-crs (+ rw 180))))")
	(title "runway [iata]"))

([FlightPro_Class540000] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	landing ?lnd\n	cruise ?cru\n	vertical-status  ?vst\n	[(= ?vst \"CLIMB\")\n	 (= ?vst \"LEVEL\")])\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd\n	(<= (calc.geo/distance-nm ?crd (:final-turn-crd ?lnd))\n	  (:descend-dist ?cru)))")
	(rhs "(println [:DescendStart ?id ?dnd])\n(my.flights.move/control ?id my.flights.move/elevate (:altitude ?lnd))\n(modify ?fp vertical-status \"DESCEND\")")
	(salience 0)
	(title "mf:DescendStart"))

([FlightPro_Class540017] of  CloFunction

	(source "(let [tof (:takeoff spp)\n       cru (:cruise spp)\n       lnd (:landing spp)\n       car @mfs/CARRIER\n       [ddist bdist calt cspd] \n         (adjust-cruise\n	(calc.geo/distance-nm (:start-crd spp) (:finish-crd spp))\n	(:altitude cru)\n	(:speed cru)\n	(:altitude lnd)\n	(:speed lnd) \n	(:elevator car)\n	(:propeller car)\n	(:min-alt cru)\n	(:min-spd cru))]\n    (merge cru  {:altitude calt\n	:speed cspd\n	:descend-dist ddist\n	:brake-dist bdist}))")
	(title "cruise-plan [spp]"))

([FlightPro_Class540018] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"CRUISE\"\n	landing ?lnd\n	cruise ?cru)\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd\n	course ?crs\n	(calc.geo/abaft ?crs ?crd (:final-turn-crd ?lnd)))")
	(rhs "(println [:CruiseDone ?id ?crd ?cru])\n(modify ?fp cruise \"DONE\"\n	status \"FINAL-TURN\")")
	(salience 0)
	(title "mf:CruiseDone"))

([FlightPro_Class540019] of  Rule

	(lhs "(FlightPlan id ?id\n	status \"FINAL-TURN\"\n	landing ?lnd)")
	(rhs "(println [:FinalTurnStart ?id ?lnd])\n(my.flights.move/control ?id my.flights.move/accel (:lannding-spd ?lnd))\n(my.flights.move/control ?id my.flights.move/turn (:landing-crs ?lnd))")
	(salience 0)
	(title "mf:FinalTurnStart"))

([FlightPro_Class540020] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"FINAL-TURN\"\n	landing ?lnd)\n(Flight age \"CURRENT\" \n	id ?id\n	altitude ?alt\n	speed ?spd\n	course ?crs\n	(= ?crs (first (:landing-crs ?lnd))))")
	(rhs "(println [:LandingStart ?id ?alt ?spd ?crs])\n(modify ?fp status \"LANDING\")")
	(salience 0)
	(title "mf:LandingStart"))

([FlightPro_Class550000] of  CloVar

	(source "{:takeoff \n  {:speed [220 8]\n   :altitude [1500 6]\n   :initial-turn-course [-1 2]}\n :cruise \n  {:speed [500 1]\n   :altitude [33000 8]\n   :min-spd 220\n   :min-alt 4000}\n :landing \n  {:speed [180 1 6]\n   :altitude [2000 8]\n   :outer-marker-distance 7\n   :final-turn-course [-1 1]\n   :altitude-graph\n     [[0.1 0][0.5 15][2 600][7 2000]] ;; x - dist, y - alt\n   :spdeed-graph\n     [[0.0 0][0.1 10][0.5 100][3 120]]} ;; x - dist, y - spd\n}")
	(title "GENPLAN"))

([FlightPro_Class550002] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	landing ?lnd\n	cruise ?cru\n	vertical-status \"DESCEND\")\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd\n	(<= (calc.geo/distance-nm ?crd (:final-turn-crd ?lnd))\n	  (:brake-dist ?cru)))")
	(rhs "(println [:BrakeStart ?id ?dnd])\n(my.flights.move/control ?id my.flights.move/accel (:speed ?lnd))\n(modify ?fp vertical-status \"DESCEND&BRAKE\")")
	(salience 0)
	(title "mf:BrakeStart"))

([FlightPro_Class560000] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"LANDING\"\n	landing ?lnd\n	spec-plan ?spp)\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd)")
	(rhs "(let [fcrd (:finish-crd ?spp)\n       dist (calc.geo/distance-nm ?crd fcrd)\n       bear (int (calc.geo/bear-deg ?crd fcrd))\n       alt (int (calc.core/smooth-tabfun dist (:altitude-graph ?lnd)))\n       spd (int (calc.core/smooth-tabfun dist (:spdeed-graph ?lnd)))]\n   (my.flights.move/control ?id my.flights.move/turn [bear 2])\n   (my.flights.move/control ?id my.flights.move/elevate [alt 8])\n   (my.flights.move/control ?id my.flights.move/accel [spd 10]))")
	(salience 0)
	(title "mf:OnLandingCourse"))

([FlightPro_Class560001] of  CloFunction

	(source ";; Calculates time (hrs)\n(if (= ini-alt fin-alt)\n  0\n  (let [step (* alt-stp alt-acl)\n         tioh (float (/ alt-tio 3600000))\n         adif (if (> ini-alt fin-alt) (- ini-alt fin-alt) (- fin-alt ini-alt))]\n    (* (/ adif step) tioh)))")
	(title "altitude-variation [[ini-alt x] [fin-alt alt-acl] alt-stp alt-tio]"))

([FlightPro_Class570000] of  QuestionTree

	(name "all"))

([FlightPro_Class570001] of  Rule

	(lhs "?fp (FlightPlan id ?id\n	status \"LANDING\"\n	spec-plan ?spp\n	landing ?lnd)\n(Flight age \"CURRENT\" \n	id ?id\n	coord ?crd\n	course ?crs\n	speed ?spd\n                        [(= ?spd 0)\n	 (calc.geo/abaft ?crs ?crd (:finish-crd ?spp))])")
	(rhs "(println [:LandingDone ?id ?crd])\n(es/put-off-map ?id)\n(my.flights.move/rem-my-flight ?id)\n(modify ?fp status \"GROUND\" \n	landing \"DONE\")")
	(salience 1)
	(title "mf:LandingDone"))

([FlightPro_Class580000] of  CloFunction

	(source "(when-let [mrk (@PLACEMARKS iname)]\n  (.removeLayer @CHART mrk)\n  (vswap! PLACEMARKS dissoc iname))")
	(title "delete-placemark [iname]"))

([FlightPro_Class580001] of  CloFuncall

	(source "(rete.core/facts 'Flight)"))

([FlightPro_Class580002] of  CloFuncall

	(source "(rete.core/fact-list 'Flight)"))

([FlightPro_Class580003] of  Airport

	(altitude 591)
	(coord 41.61 -87.41)
	(country "United States")
	(iata "GYY")
	(icao "KGYY")
	(runways 0)
	(title "Chicago Gary International"))

([FlightPro_Class580004] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 30)
	(feature "landmark")
	(lang "en")
	(lat 51.4337)
	(lng -0.2141)
	(rank 100)
	(summary "The Championships, Wimbledon, commonly known as \"Wimbledon\", is the oldest tennis tournament in the world, and is widely considered the most prestigious. It has been held at the All England Club in Wimbledon, London since 1877 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/123000/thumb-122329-100.jpg")
	(title "The Championships, Wimbledon")
	(wikipediaUrl "http://en.wikipedia.org/wiki/The_Championships%2C_Wimbledon"))

([FlightPro_Class580005] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 20)
	(feature "landmark")
	(lang "en")
	(lat 51.5034)
	(lng -0.1276)
	(rank 100)
	(summary "10 Downing Street, colloquially known in the United Kingdom as \"Number 10\", is the headquarters of the executive branch of the British Government and the official residence and office of the First Lord of the Treasury, a post which, for much of the 18th and 19th centuries and ever since 1905, is (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/149000/thumb-148771-100.jpg")
	(title "10 Downing Street")
	(wikipediaUrl "http://en.wikipedia.org/wiki/10_Downing_Street"))

([FlightPro_Class580006] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 11)
	(feature "landmark")
	(lang "en")
	(lat 51.4748)
	(lng -0.2962)
	(rank 100)
	(summary "Kew Gardens is the world's largest collection of living plants. Founded in 1840 from the exotic garden at Kew Park in the London Borough of Richmond upon Thames, UK, its living collections include more than 30,000 different kinds of plants, while the herbarium, which is one of the largest in the (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/74000/thumb-73182-100.jpg")
	(title "Kew Gardens")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Kew_Gardens"))

([FlightPro_Class580007] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 108)
	(feature "landmark")
	(lang "en")
	(lat 51.4223)
	(lng -0.0758)
	(rank 100)
	(summary "The Crystal Palace was a cast-iron and plate-glass structure erected in Hyde Park, London, England, to house the Great Exhibition of 1851. More than 14,000 exhibitors from around the world gathered in its exhibition space to display examples of technology developed in the Industrial Revolution (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/44000/thumb-43036-100.jpg")
	(title "The Crystal Palace")
	(wikipediaUrl "http://en.wikipedia.org/wiki/The_Crystal_Palace"))

([FlightPro_Class580008] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation 23)
	(feature "landmark")
	(lang "en")
	(lat 51.4967)
	(lng -0.1719)
	(rank 100)
	(summary "The Victoria and Albert Museum (often abbreviated as the V&A), London, is the world's largest museum of decorative arts and design, housing a permanent collection of over 4.5 million objects. It was founded in 1852 and named after Queen Victoria and Prince Albert (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/81000/thumb-80971-100.jpg")
	(title "Victoria and Albert Museum")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Victoria_and_Albert_Museum"))

([FlightPro_Class580009] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 41)
	(feature "landmark")
	(lang "en")
	(lat 51.5153)
	(lng -0.142)
	(rank 100)
	(summary "Oxford Street is a major road in the City of Westminster in the West End of London. It is Europe's busiest shopping street, with around half a million daily visitors, and as of 2012 had approximately 300 shops. It is designated as part of the A40, a major road between London and Fishguard, though it (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/13000/thumb-12716-100.jpg")
	(title "Oxford Street")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Oxford_Street"))

([FlightPro_Class580010] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation 36)
	(feature "landmark")
	(lang "en")
	(lat 51.5099)
	(lng -0.1345)
	(rank 100)
	(summary "Piccadilly Circus is a road junction and public space of London's West End in the City of Westminster, built in 1819 to connect Regent Street with Piccadilly. In this context, a circus, from the Latin word meaning \"circle\", is a round open space at a street junction (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/145000/thumb-144173-100.jpg")
	(title "Piccadilly Circus")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Piccadilly_Circus"))

([FlightPro_Class580011] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 60)
	(feature "landmark")
	(lang "en")
	(lat 51.5555)
	(lng -0.2797)
	(rank 100)
	(summary "Wembley Stadium (formerly known as the Empire Stadium) was a football stadium located in Wembley, London, England, that stood on the site now occupied by the new Wembley Stadium. It was famous for hosting the annual FA Cup finals, five European Cup finals, the 1948 Summer Olympics, the 1966 World (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/15000/thumb-14511-100.jpg")
	(title "Wembley Stadium (1923)")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Wembley_Stadium_%281923%29"))

([FlightPro_Class580012] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 8)
	(feature "adm1st")
	(lang "en")
	(lat 51.4966)
	(lng -0.086)
	(rank 100)
	(summary "The London Borough of Southwark \"Southwark\", in The Columbia Lippincott Gazetteer of the World (1952), New York: Columbia University Press. in south London, England forms part of Inner London and is connected by bridges across the River Thames to the City of London (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/38000/thumb-37850-100.jpg")
	(title "London Borough of Southwark")
	(wikipediaUrl "http://en.wikipedia.org/wiki/London_Borough_of_Southwark"))

([FlightPro_Class580013] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 14)
	(feature "adm1st")
	(lang "en")
	(lat 51.4167)
	(lng -0.3333)
	(rank 100)
	(summary "The London Borough of Richmond upon Thames (pronunciation) in south-west London, England, forms part of Outer London and is the only London borough on both sides of the River Thames. It was created in 1965 when three smaller council areas amalgamated under the London Government Act 1963 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/146000/thumb-145782-100.jpg")
	(title "London Borough of Richmond upon Thames")
	(wikipediaUrl "http://en.wikipedia.org/wiki/London_Borough_of_Richmond_upon_Thames"))

([FlightPro_Class580014] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "DE")
	(elevation 10)
	(feature "adm1st")
	(lang "en")
	(lat 51.4929)
	(lng -0.2258)
	(rank 100)
	(summary "The London Borough of Hammersmith and Fulham (pronunciation) is a London borough in West London, and forms part of Inner London. Traversed by the east-west main roads of the A4 Great West Road and the A40 Westway, many international corporations have offices in the borough (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/37000/thumb-36664-100.jpg")
	(title "London Borough of Hammersmith and Fulham")
	(wikipediaUrl "http://en.wikipedia.org/wiki/London_Borough_of_Hammersmith_and_Fulham"))

([FlightPro_Class580015] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 37)
	(feature "landmark")
	(lang "en")
	(lat 51.5357)
	(lng -0.1558)
	(rank 100)
	(summary "London Zoo is the world's oldest scientific zoo. It was opened in London on April 27, 1828, and was originally intended to be used as a collection for scientific study. It was eventually opened to the public in 1847 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/155000/thumb-154916-100.png")
	(title "London Zoo")
	(wikipediaUrl "http://en.wikipedia.org/wiki/London_Zoo"))

([FlightPro_Class580016] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 14)
	(feature "edu")
	(lang "en")
	(lat 51.4984)
	(lng -0.1284)
	(rank 100)
	(summary "Westminster School is an independent school within the precincts of Westminster Abbey, England, which has the highest Oxford and Cambridge acceptance rates of any secondary school or college in the world.http://www.parliament.uk/briefing-papers/sn00616 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/156000/thumb-155018-100.jpg")
	(title "Westminster School")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Westminster_School"))

([FlightPro_Class580017] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 27)
	(feature "landmark")
	(lang "en")
	(lat 51.456)
	(lng -0.3416)
	(rank 100)
	(summary "Twickenham Stadium (; usually known as Twickenham or Twickers)Nicky Campbell ', The Guardian 1 February 2007 is a stadium in Twickenham, south west London, England. It is primarily a venue for rugby union and hosts England's home test matches, the Middlesex Sevens, the Aviva Premiership final, the (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/67000/thumb-66092-100.jpg")
	(title "Twickenham Stadium")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Twickenham_Stadium"))

([FlightPro_Class580018] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 16)
	(feature "landmark")
	(lang "en")
	(lat 51.4961)
	(lng -0.1397)
	(rank 100)
	(summary "Westminster Cathedral in London is the mother church of the Catholic Church in England and Wales. The site on which the cathedral stands in the City of Westminster was purchased by the Archdiocese of Westminster in 1885 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/80000/thumb-79428-100.jpg")
	(title "Westminster Cathedral")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Westminster_Cathedral"))

([FlightPro_Class580019] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 28)
	(feature "landmark")
	(lang "en")
	(lat 51.5103)
	(lng -0.1303)
	(rank 100)
	(summary "Leicester Square is a pedestrianised square in the West End of London, England. It was laid out in 1670 and is named after the contemporary Leicester House, itself named after Robert Sidney, 2nd Earl of Leicester (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/19000/thumb-18011-100.jpg")
	(title "Leicester Square")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Leicester_Square"))

([FlightPro_Class580020] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 44)
	(feature "adm1st")
	(lang "en")
	(lat 51.5886)
	(lng -0.0118)
	(rank 100)
	(summary "The London Borough of Waltham Forest is a London borough in North East London, England. The south of the borough contrasts markedly with the north (split by the North Circular Road) in terms of its mixed ethnicity and socio-economic indicators (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/3000/thumb-2717-100.jpg")
	(title "London Borough of Waltham Forest")
	(wikipediaUrl "http://en.wikipedia.org/wiki/London_Borough_of_Waltham_Forest"))

([FlightPro_Class580021] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 5)
	(feature "landmark")
	(lang "en")
	(lat 51.5422)
	(lng -0.0033)
	(rank 100)
	(summary "Stratford is a major multilevel interchange station serving the district of Stratford in the London Borough of Newham, east London. It is served by the London Underground, London Overground, Docklands Light Railway (DLR) and is also a National Rail station on the Great Eastern Main Line, down-line (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/117000/thumb-116347-100.jpg")
	(title "Stratford station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Stratford_station"))

([FlightPro_Class580022] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 36)
	(feature "landmark")
	(lang "en")
	(lat 51.522)
	(lng -0.157)
	(rank 100)
	(summary "Baker Street is a station on the London Underground at the junction of Baker Street and the Marylebone Road. The station lies in Travelcard Zone 1 and is served by five different lines. It is one of the original stations of the Metropolitan Railway (MR), the world's first underground railway, opened (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/115000/thumb-114027-100.jpg")
	(title "Baker Street tube station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Baker_Street_tube_station"))

([FlightPro_Class580023] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 36)
	(feature "landmark")
	(lang "en")
	(lat 51.5144)
	(lng -0.0803)
	(rank 100)
	(summary "30 St Mary Axe (widely known informally as The Gherkin and previously as the Swiss Re Building) is a commercial skyscraper in London's primary financial district, the City of London. It was completed in December 2003 and opened in April 2004 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/35000/thumb-34352-100.jpg")
	(title "30 St Mary Axe")
	(wikipediaUrl "http://en.wikipedia.org/wiki/30_St_Mary_Axe"))

([FlightPro_Class580024] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 19)
	(feature "landmark")
	(lang "en")
	(lat 51.4986)
	(lng -0.1331)
	(rank 100)
	(summary "Scotland Yard (officially New Scotland Yard) is a metonym for the headquarters of the Metropolitan Police Service, the territorial police force responsible for policing most of London. The name derives from the location of the original Metropolitan Police headquarters at 4 Whitehall Place, which had (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/66000/thumb-65894-100.jpg")
	(title "Scotland Yard")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Scotland_Yard"))

([FlightPro_Class580025] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 23)
	(feature "city")
	(lang "en")
	(lat 51.519)
	(lng -0.102)
	(rank 98)
	(summary "Smithfield is a locality in the ward of Farringdon Without situated at the City of London's northwest in central London, England. The principal street of the area is West Smithfield.Renamed in 1889 to avoid confusion with the Smithfield in Tower Hamlets, nowadays called East Smithfield (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/129000/thumb-128872-100.jpg")
	(title "Smithfield, London")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Smithfield%2C_London"))

([FlightPro_Class580026] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 89)
	(feature "landmark")
	(lang "en")
	(lat 51.5686)
	(lng -0.1911)
	(rank 98)
	(summary "Hampstead Heath (locally known as \"the Heath\") is a large, ancient London park, covering . This grassy public space sits astride a sandy ridge, one of the highest points in London, running from Hampstead to Highgate, which rests on a band of London Clay (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/72000/thumb-71291-100.jpg")
	(title "Hampstead Heath")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Hampstead_Heath"))

([FlightPro_Class580027] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 46)
	(feature "landmark")
	(lang "en")
	(lat 51.5223)
	(lng -0.1634)
	(rank 98)
	(summary "Marylebone station , also known as London Marylebone, is a central London railway terminus and London Underground complex. It stands midway between the main line stations at Euston and Paddington, about 1 mile (1.6 km) from each (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/56000/thumb-55473-100.jpg")
	(title "Marylebone station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Marylebone_station"))

([FlightPro_Class580028] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation 27)
	(feature "landmark")
	(lang "en")
	(lat 51.507)
	(lng -0.1803)
	(rank 98)
	(summary "Kensington Gardens, once the private gardens of Kensington Palace, are one of the Royal Parks of London, lying immediately to the west of Hyde Park. It is shared between the City of Westminster and the Royal Borough of Kensington and Chelsea, lying within western central London (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/91000/thumb-90305-100.jpg")
	(title "Kensington Gardens")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Kensington_Gardens"))

([FlightPro_Class580029] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 6)
	(feature "city")
	(lang "en")
	(lat 51.4887)
	(lng -0.0186)
	(rank 98)
	(summary "The Isle of Dogs is an area in the East End of London that is bounded on three sides (east, south and west) by one of the largest meanders in the River Thames. The northern boundary has never been clearly or consistently defined (the name Isle of Dogs had no official status until 1987, with the (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/24000/thumb-23230-100.jpg")
	(title "Isle of Dogs")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Isle_of_Dogs"))

([FlightPro_Class580030] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 26)
	(feature "landmark")
	(lang "en")
	(lat 51.5113)
	(lng -0.0906)
	(rank 98)
	(summary "Cannon Street, also known as London Cannon Street, is a central London railway terminus and connected London Underground station located on Cannon Street in the City of London. It was built on the site of the medieval Steelyard, the trading base in England of the Hanseatic League, and it opened in (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/76000/thumb-75647-100.jpg")
	(title "Cannon Street station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Cannon_Street_station"))

([FlightPro_Class580031] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 32)
	(feature "landmark")
	(lang "en")
	(lat 51.5133)
	(lng -0.0886)
	(rank 98)
	(summary "Bank and Monument are interlinked London Underground and Docklands Light Railway stations that form a public transport complex spanning the length of King William Street in the City of London. Bank station, named after the Bank of England, opened in 1900 at Bank junction and is served by the (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/127000/thumb-126526-100.jpg")
	(title "Bank and Monument stations")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bank_and_Monument_stations"))

([FlightPro_Class580032] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 39)
	(feature "landmark")
	(lang "en")
	(lat 51.505)
	(lng -0.0196)
	(rank 98)
	(summary "One Canada Square is a skyscraper in Canary Wharf, London. It was the tallest building in the United Kingdom from 1990 to 2010, standing at above ground levelAviation charts issued by the Civil Aviation Authority and containing 50 storeys (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/119000/thumb-118837-100.jpg")
	(title "One Canada Square")
	(wikipediaUrl "http://en.wikipedia.org/wiki/One_Canada_Square"))

([FlightPro_Class580033] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 34)
	(feature "landmark")
	(lang "en")
	(lat 51.5132)
	(lng -0.1589)
	(rank 98)
	(summary "Marble Arch is a 19th-century white marble faced triumphal arch and London landmark. The structure was designed by John Nash in 1827 to be the state entrance to the cour d'honneur of Buckingham Palace; it stood near the site of what is today the three bayed, central projection of the palace (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/102000/thumb-101311-100.jpg")
	(title "Marble Arch")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Marble_Arch"))

([FlightPro_Class580034] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation 12)
	(feature "landmark")
	(lang "en")
	(lat 51.4818)
	(lng -0.1447)
	(rank 98)
	(summary "Battersea Power Station is a decommissioned coal-fired power station located on the south bank of the River Thames, in Nine Elms, Battersea, an inner-city district of South West London. It comprises two individual power stations, built in two stages in the form of a single building (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/45000/thumb-44239-100.jpg")
	(title "Battersea Power Station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Battersea_Power_Station"))

([FlightPro_Class580035] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 20)
	(feature "landmark")
	(lang "en")
	(lat 51.5032)
	(lng -0.1274)
	(rank 98)
	(summary "Downing Street in London, England, has for more than three hundred years housed the official residences of two of the most senior British Cabinet ministers: the First Lord of the Treasury, an office now synonymous with that of Prime Minister of the United Kingdom; and the Second Lord of the (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/54000/thumb-53157-100.jpg")
	(title "Downing Street")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Downing_Street"))

([FlightPro_Class580036] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 35)
	(feature "landmark")
	(lang "en")
	(lat 51.5186)
	(lng -0.0886)
	(rank 98)
	(summary "Moorgate, also known as London Moorgate, is a central London railway terminus and connected London Underground station on Moorgate in the City of London. Weekday main line railway services for Hertford, Welwyn Garden City and Letchworth are operated by Great Northern, while the Underground station (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/123000/thumb-122144-100.jpg")
	(title "Moorgate station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Moorgate_station"))

([FlightPro_Class580037] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 12)
	(feature "landmark")
	(lang "en")
	(lat 51.5116)
	(lng -0.103)
	(rank 98)
	(summary "Blackfriars, also known as London Blackfriars, is a central London railway station and connected London Underground station located in the City of London. Its platforms span the River Thames, occupying the length of Blackfriars Railway Bridge, a short distance downstream from Blackfriars Bridge (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/73000/thumb-72196-100.jpg")
	(title "Blackfriars station")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Blackfriars_station"))

([FlightPro_Class580038] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 33)
	(feature "landmark")
	(lang "en")
	(lat 51.5158)
	(lng -0.1019)
	(rank 98)
	(summary "The Central Criminal Court of England and Wales, commonly known as the Old Bailey from the street on which it stands, is a court in London and one of a number of buildings housing the Crown Court. Part of the present building stands on the site of the medieval Newgate gaol, on a road named Old (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/36000/thumb-35526-100.jpg")
	(title "Old Bailey")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Old_Bailey"))

([FlightPro_Class580039] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 23)
	(feature "landmark")
	(lang "en")
	(lat 51.5089)
	(lng -0.1269)
	(rank 98)
	(summary "St Martin-in-the-Fields is an English Anglican church at the north-east corner of Trafalgar Square in the City of Westminster, London. It is dedicated to Saint Martin of Tours. There has been a church on the site since the medieval period (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/119000/thumb-118306-100.jpg")
	(title "St Martin-in-the-Fields")
	(wikipediaUrl "http://en.wikipedia.org/wiki/St_Martin-in-the-Fields"))

([FlightPro_Class580040] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 20)
	(feature "landmark")
	(lang "en")
	(lat 51.4975)
	(lng -0.1747)
	(rank 98)
	(summary "The Science Museum is a major museum on Exhibition Road in South Kensington, London. It was founded in 1857 and today is one of the city's major tourist attractions, attracting 3.3 million visitors annually. Like other publicly funded national museums in the United Kingdom, the Science Museum does (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/97000/thumb-96969-100.jpg")
	(title "Science Museum, London")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Science_Museum%2C_London"))

([FlightPro_Class580041] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 48)
	(feature "landmark")
	(lang "en")
	(lat 51.4767)
	(lng 1.0E-4)
	(rank 98)
	(summary "Greenwich Park is a former hunting park in Greenwich and one of the largest single green spaces in south-east London. One of the Royal Parks of London, and the first to be enclosed (in 1433), it covers , and is part of the Greenwich World Heritage Site (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/14000/thumb-13333-100.jpg")
	(title "Greenwich Park")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Greenwich_Park"))

([FlightPro_Class580042] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 39)
	(feature "landmark")
	(lang "en")
	(lat 51.5258)
	(lng -0.145)
	(rank 98)
	(summary "The Royal College of Physicians, sometimes referred to as the Royal College of Physicians of London to differentiate it from other similarly-named bodies, is a British professional body of Doctors and Physician Associates of general medicine and its subspecialties (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/149000/thumb-148794-100.jpg")
	(title "Royal College of Physicians")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Royal_College_of_Physicians"))

([FlightPro_Class580043] of  WikiArticleDetails

	(butt-del-pois "Delete POIs/ext.data/delete-pois")
	(butt-return "Return to Flight/ext.data/ret-to-flight")
	(butt-show-pois "Show on Map/ext.data/show-on-map")
	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "GB")
	(elevation 68)
	(feature "landmark")
	(lang "en")
	(lat 51.5486)
	(lng -0.535)
	(max-rows 50)
	(poi-req-butt "Get Points Of Interest/osm.data/poi-request")
	(radius 1.0)
	(rank 98)
	(summary "Pinewood Studios is a British film studio and television studio situated in Iver Heath, Buckinghamshire, England, approximately west of central London. It is run by The Pinewood Studios Group. The studios have been the base for many productions over the years from big-budget films to television (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/151000/thumb-150340-100.jpg")
	(title "Pinewood Studios")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Pinewood_Studios"))

([FlightPro_Class580044] of  CloFuncall

	(source "(ru.rules/pp 'Question)"))

([FlightPro_Class580045] of  Rule

	(lhs "?q (Question predicate \"How far\"\n	subject \"airport\")\n(not Question predicate \"User Answer\")")
	(rhs "(async.proc/pump-in \n	(:instructions pro.commands/CHN)\n	{:instruct :ask-user :question \"airport\"})")
	(salience 0)
	(title "qq:HowFarAirport1"))

([FlightPro_Class580046] of  CloFunction

	(source "([]\n  (am/ask-server {:question \"countries\"}\n	select-airport))\n([cns]\n  (am/selector \"element\" 1 \"chart.client\" \"countries\" cns :itself 130)\n  (defn handler1 [sel]\n    (am/ask-server {:question \"airports\"\n	       :country sel}\n	#(select-airport sel %))))\n([cnt aps]\n  (am/selector \"element\" 2 \"chart.client\" \"airports\" aps :itself 130)\n  (defn handler2 [sel]\n    (am/ask-server {:question \"es\"\n	      :predicate \"User Answer\"\n	      :subject \"selected airport\"\n	      :object sel\n                              :adjunct cnt} \n	(fn [r]))\n    (am/clear-dialog)))")
	(title "select-airport"))

([FlightPro_Class580047] of  CloFuncall

	(source "(pro.commands/pump-in (:instructions pro.commands/CHN) {:instruct :ask-user :question \"airport\"})"))

([FlightPro_Class580048] of  CloFuncall

	(source "(async.proc/pump-in (:instructions pro.commands/CHN) {:instruct :ask-user :question \"airport\"})"))

([FlightPro_Class580049] of  CloFuncall

	(source "fr24.client/STATUS"))

([FlightPro_Class580050] of  Rule

	(lhs "?q1 (Question predicate \"How far\"\n	subject \"airport\")\n?q2 (Question predicate \"User Answer\"\n	subject \"selected airport\"\n	object ?apt\n	adjunct ?cnt)")
	(rhs "(ext.data/pump-far-airport ?cnt ?apt)\n(retract ?q1 ?q2)")
	(salience 0)
	(title "qq:HowFarAirport2"))

([FlightPro_Class580051] of  CloFunction

	(source "(if-let [apt (get-in (fr24/airports-by-country) [cnt apt])]\n  (let [[lat1 lon1] (our-center)\n         lat2 (apt \"lat\") \n         lon2 (apt \"lon\")\n         dis (geo/distance-nm [lat1 lon1] [lat2 lon2])\n         bea (geo/bear-deg [lat1 lon1] [lat2 lon2])\n         html (str \"<h3>\" (apt \"name\") \"</h3>\"\n	\"country: \" cnt \"<br>\"\n	\"latitude: \" lat2 \"<br>\"\n	\"longitude: \" lon2 \"<br>\"\n	\"direction: \" (gn/direction bea)\n	\"<h4>\" (format \"distance: %.1f\" dis) \" NM</h4>\")]\n    (asp/pump-in (:ins-chn @COMM)\n	{:instruct :popup\n	 :lat lat1\n	 :lon lon1\n	 :html html\n	 :width 1200\n	 :height 1000\n	 :time (:ext-data-popup TIO)})))")
	(title "pump-far-airport [cnt apt]"))

([FlightPro_Class580052] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 228)
	(feature "adm1st")
	(lang "en")
	(lat 45.2167)
	(lng -62.7)
	(rank 100)
	(summary "Nova Scotia (\"New Scotland\", pronounced ; ;) is one of Canada's three Maritime provinces and constitutes one of the four Atlantic Canada provinces. Located almost exactly halfway between the Equator and the North Pole (44º 39' N Latitude), its provincial capital is Halifax (...)")
	(title "Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Nova_Scotia"))

([FlightPro_Class580053] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 21)
	(lang "en")
	(lat 45.2806)
	(lng -66.0761)
	(rank 100)
	(summary "Saint John is the largest city in the Canadian province of New Brunswick, and the second largest in the maritime provinces. It is known as the Fundy City due to its location on the north shore of the Bay of Fundy at the mouth of the Saint John River, as well as being the only city on the bay (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/11000/thumb-10143-100.jpg")
	(title "Saint John, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Saint_John%2C_New_Brunswick"))

([FlightPro_Class580054] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 17)
	(feature "city")
	(lang "en")
	(lat 44.6479)
	(lng -63.5716)
	(rank 100)
	(summary "The Halifax Regional Municipality (; commonly Halifax or HRM) is the capital of the province of Nova Scotia, Canada. The Regional Municipality had a population of 390,096 in 2011 Canadian Census and the urban area had a population of 297,943 (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/93000/thumb-92456-100.jpg")
	(title "Halifax Regional Municipality")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Halifax_Regional_Municipality"))

([FlightPro_Class580056] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 0)
	(feature "landmark")
	(lang "en")
	(lat 44.6692)
	(lng -63.5964)
	(rank 98)
	(summary "The Halifax Explosion occurred in Halifax, Nova Scotia, Canada, on the morning of December 6, 1917. SS Mont-Blanc, a French cargo ship fully loaded with wartime explosives, collided with the Norwegian vessel SS ImoThe ship had been named with the initials - JMO - after the senior owner of the (...)")
	(title "Halifax Explosion")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Halifax_Explosion"))

([FlightPro_Class580058] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 13)
	(feature "city")
	(lang "en")
	(lat 44.3784)
	(lng -64.3172)
	(rank 98)
	(summary "Lunenburg is a Canadian port town in Lunenburg County, Nova Scotia. Situated on the province's South Shore, Lunenburg is located at the western side of Mahone Bay. The town is approximately 90 kilometres southwest of the county boundary with the Halifax Regional Municipality (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/51000/thumb-50234-100.jpg")
	(title "Lunenburg, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Lunenburg%2C_Nova_Scotia"))

([FlightPro_Class580059] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 56)
	(feature "edu")
	(lang "en")
	(lat 44.6369)
	(lng -63.5917)
	(rank 98)
	(summary "Dalhousie University (commonly known as Dalhousie or Dal) is a public research university in Nova Scotia, Canada, with three campuses in Halifax, and a fourth in Bible Hill. Dalhousie offers more than 3,700 courses and 190 degree programs in twelve undergraduate, graduate, and professional faculties (...)")
	(title "Dalhousie University")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Dalhousie_University"))

([FlightPro_Class580062] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(lang "en")
	(lat 45.083)
	(lng -67.04)
	(rank 98)
	(summary "Saint Andrews (2011 population: 1,889) is a Canadian town in Charlotte County, New Brunswick. It is sometimes referred to in tourism marketing by its unofficial nickname \"St. Andrews-by-the-sea\".  (...)")
	(title "St. Andrews, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/St._Andrews%2C_New_Brunswick"))

([FlightPro_Class580063] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 137)
	(feature "airport")
	(lang "en")
	(lat 44.8797)
	(lng -63.5103)
	(rank 98)
	(summary "Halifax/Robert L. Stanfield International Airport, or Halifax Stanfield International Airport is an airport in Enfield, Nova Scotia, a community inside the Halifax Regional Municipality, Canada.\".\" Halifax Regional Municipality. Retrieved on March 2, 2011 (...)")
	(title "Halifax Stanfield International Airport")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Halifax_Stanfield_International_Airport"))

([FlightPro_Class580064] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 5)
	(lang "en")
	(lat 45.1923)
	(lng -67.2772)
	(rank 97)
	(summary "This article is about the town, you may also want Saint Stephen Parish St. Stephen (2011 population: 4,817) is a Canadian town in Charlotte County, New Brunswick, situated on the east bank of the St. Croix River at around the intersection of Route 170 and the southern terminus of Route 3.  (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/160000/thumb-159094-100.jpg")
	(title "St. Stephen, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/St._Stephen%2C_New_Brunswick"))

([FlightPro_Class580065] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 22)
	(feature "city")
	(lang "en")
	(lat 45.7236)
	(lng -65.5108)
	(rank 97)
	(summary "Sussex (2011 population: 4,312) is a Canadian town in Kings County, New Brunswick. Sussex straddles the Kennebecasis River, northeast of Saint John, and is a major dairy products producer in the province. It is home to Atlantic Canada's largest hot air balloon festival.  (...)")
	(title "Sussex, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Sussex%2C_New_Brunswick"))

([FlightPro_Class580066] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 63)
	(feature "city")
	(lang "en")
	(lat 44.67)
	(lng -63.61)
	(rank 97)
	(summary "The City of Halifax was an incorporated city in Nova Scotia, Canada, which was established as the Town of Halifax in 1749, and incorporated as a city in 1842. On April 1, 1996, the government of Nova Scotia dissolved the City of Halifax, and amalgamated the four municipalities within Halifax County (...)")
	(title "Halifax (former city)")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Halifax_%28former_city%29"))

([FlightPro_Class580067] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 36)
	(feature "city")
	(lang "en")
	(lat 45.8477)
	(lng -66.4707)
	(rank 97)
	(summary "Oromocto (2011 population: 8,932) is a Canadian town in Sunbury County, New Brunswick. The town is located on the west bank of the St. John River at the mouth of the Oromocto River, approximately 20 kilometres southeast of Fredericton (...)")
	(title "Oromocto")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Oromocto"))

([FlightPro_Class580068] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 20)
	(feature "city")
	(lang "en")
	(lat 45.3888)
	(lng -65.9944)
	(population 11505)
	(rank 97)
	(summary "Rothesay (or) is a Canadian town located in Kings County, New Brunswick. It is a suburb of Saint John along the Kennebecasis River.  (...)")
	(title "Rothesay, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Rothesay%2C_New_Brunswick"))

([FlightPro_Class580069] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 15)
	(feature "city")
	(lang "en")
	(lat 44.3761)
	(lng -64.5177)
	(rank 97)
	(summary "Bridgewater is a town in Lunenburg County, Nova Scotia, Canada, at the navigable limit of the LaHave River. It is the largest town in the South Shore region. While the majority of the South Shore's economy is based upon the tourist trade, Bridgewater is more a commercial and industrial centre and (...)")
	(title "Bridgewater, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bridgewater%2C_Nova_Scotia"))

([FlightPro_Class580070] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 24)
	(feature "city")
	(lang "en")
	(lat 45.166)
	(lng -67.2424)
	(rank 97)
	(summary "Calais is a city in Washington County, Maine, United States. As of the 2010 census, it had a population of 3,123. The city has three United States border crossings (also known as a Port of entry) over the St. Croix River bordering St. Stephen, New Brunswick, Canada (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/47000/thumb-46667-100.jpg")
	(title "Calais, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Calais%2C_Maine"))

([FlightPro_Class580072] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 64)
	(lang "en")
	(lat 45.3637)
	(lng -66.2582)
	(rank 97)
	(summary "Grand Bay–Westfield (2011 population: 5,117) is a Canadian suburb of Saint John in the western part of Kings County, New Brunswick. The town is an amalgamation of the original town of Grand Bay and the neighbouring village of Westfield immediately to the north (...)")
	(title "Grand Bay–Westfield")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Grand_Bay%E2%80%93Westfield"))

([FlightPro_Class580073] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 21)
	(feature "city")
	(lang "en")
	(lat 45.3649)
	(lng -63.2798)
	(rank 97)
	(summary "Truro is a town in central Nova Scotia, Canada. Truro is the shire town of Colchester County and is located on the south side of the Salmon River floodplain, close to the river's mouth at the eastern end of Cobequid Bay.  (...)")
	(title "Truro, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Truro%2C_Nova_Scotia"))

([FlightPro_Class580074] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 31)
	(feature "city")
	(lang "en")
	(lat 44.6701)
	(lng -63.5775)
	(rank 97)
	(summary "Dartmouth (2001 pop.: 65,741) founded in 1750, is a former city and planning area of the Halifax Regional Municipality, Nova Scotia. Located on the eastern shore of Halifax Harbour, Dartmouth has been nicknamed the City of Lakes after the large number of lakes located in the city (...)")
	(title "Dartmouth, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Dartmouth%2C_Nova_Scotia"))

([FlightPro_Class580075] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 31)
	(lang "en")
	(lat 45.1319)
	(lng -66.8202)
	(rank 97)
	(summary "St. George is a Canadian town in Charlotte County, New Brunswick.  (...)")
	(title "St. George, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/St._George%2C_New_Brunswick"))

([FlightPro_Class580076] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 22)
	(feature "city")
	(lang "en")
	(lat 45.8316)
	(lng -64.2092)
	(rank 97)
	(summary "Amherst (2011 population 9,717; UA population 9,547) is a Canadian town in northwestern Cumberland County, Nova Scotia. Located at the northeast end of the Cumberland Basin, an arm of the Bay of Fundy, Amherst is strategically situated on the eastern boundary of the Tantramar Marshes 3 kilometres (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/138000/thumb-137656-100.jpg")
	(title "Amherst, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Amherst%2C_Nova_Scotia"))

([FlightPro_Class580077] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 18)
	(feature "city")
	(lang "en")
	(lat 44.9911)
	(lng -64.1318)
	(rank 97)
	(summary "Windsor (2011 population: 3,785) is a Canadian town located in Hants County, Nova Scotia. It is a service centre for the western part of the county and is situated on Highway 101. The town has a history dating back to its use by the Mi'kmaq Nation for several millennia prior to European discovery (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/87000/thumb-86537-100.jpg")
	(title "Windsor, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Windsor%2C_Nova_Scotia"))

([FlightPro_Class580078] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 16)
	(feature "landmark")
	(lang "en")
	(lat 45.1106)
	(lng -64.3789)
	(rank 96)
	(summary "This is a list of National Historic Sites of Canada in the province of Nova Scotia. There are 87 National Historic Sites designated in Nova Scotia, of which 26 are administered by Parks Canada., National Historic Sites of Canada - administered by Parks Canada This list uses names designated by the (...)")
	(title "List of National Historic Sites of Canada in Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/List_of_National_Historic_Sites_of_Canada_in_Nova_Scotia"))

([FlightPro_Class580080] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 33)
	(feature "adm2nd")
	(lang "en")
	(lat 45.1)
	(lng -63.9)
	(rank 96)
	(summary "Hants County is a county in the Canadian province of Nova Scotia which was the home of Henry Alline, Thomas Chandler Haliburton, Alden Nowlan and Noel Doiron. The county of Hants was created June 17, 1781, and consisted of the townships of Windsor, Falmouth and Newport (...)")
	(title "Hants County, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Hants_County%2C_Nova_Scotia"))

([FlightPro_Class580081] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 7)
	(lang "en")
	(lat 45.1089)
	(lng -64.3092)
	(rank 96)
	(summary "Grand-Pré is a Canadian rural community in Kings County, Nova Scotia. Its French name translates to \"Great Meadow\" and the community lies at the eastern edge of the Annapolis Valley several kilometres east of the town of Wolfville on a peninsula jutting into the Minas Basin surrounded by extensive (...)")
	(title "Grand-Pré, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Grand-Pr%C3%A9%2C_Nova_Scotia"))

([FlightPro_Class580083] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 231)
	(feature "adm2nd")
	(lang "en")
	(lat 45.0)
	(lng -64.6)
	(rank 96)
	(summary "Kings County is a county in the Canadian province of Nova Scotia. It is in central Nova Scotia on the shore of the Bay of Fundy, with its northeastern part forming the western shore of the Minas Basin.  (...)")
	(title "Kings County, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Kings_County%2C_Nova_Scotia"))

([FlightPro_Class580084] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 345)
	(feature "adm2nd")
	(lang "en")
	(lat 45.7639)
	(lng -64.8836)
	(rank 96)
	(summary "Albert County (2011 population 28,846) is a county located in southeastern New Brunswick, Canada on the Chignecto Bay of the Bay of Fundy. Prior to the abolition of county government in 1967, the county seat was Hopewell Cape (...)")
	(title "Albert County, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Albert_County%2C_New_Brunswick"))

([FlightPro_Class580085] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 10)
	(feature "city")
	(lang "en")
	(lat 44.0353)
	(lng -64.7203)
	(rank 96)
	(summary "Liverpool is a Canadian community and former town located along the Atlantic Ocean of the Province of Nova Scotia's South Shore. It is situated within the Region of Queens Municipality which is the local governmental unit that comprises all of Queens County, Nova Scotia (...)")
	(title "Liverpool, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Liverpool%2C_Nova_Scotia"))

([FlightPro_Class580086] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(feature "landmark")
	(lang "en")
	(lat 44.4091)
	(lng -63.9736)
	(rank 96)
	(summary "Swissair Flight 111 (SR111, SWR111) was a Swissair McDonnell Douglas MD-11 on a scheduled airline flight from John F. Kennedy International Airport in New York City, United States to Cointrin International Airport in Geneva, Switzerland. This flight was also a codeshare flight with Delta Air Lines (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/106000/thumb-105264-100.jpg")
	(title "Swissair Flight 111")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Swissair_Flight_111"))

([FlightPro_Class580087] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 83)
	(feature "adm2nd")
	(lang "en")
	(lat 45.7)
	(lng -64.1)
	(rank 96)
	(summary "Cumberland County is a county in the Canadian province of Nova Scotia.  (...)")
	(title "Cumberland County, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Cumberland_County%2C_Nova_Scotia"))

([FlightPro_Class580089] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 23)
	(feature "adm2nd")
	(lang "en")
	(lat 45.4)
	(lng -63.3)
	(rank 96)
	(summary "Colchester County is a county in the Canadian province of Nova Scotia.  (...)")
	(title "Colchester County, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Colchester_County%2C_Nova_Scotia"))

([FlightPro_Class580090] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 85)
	(feature "adm2nd")
	(lang "en")
	(lat 45.6604)
	(lng -65.7898)
	(rank 96)
	(summary "Kings County (2011 population 69,665) is located in southern New Brunswick, Canada. Its historical shire town is Hampton. Both the Saint John and Kennebecasis rivers pass through the county. Dairy farming is an important industry in the area (...)")
	(title "Kings County, New Brunswick")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Kings_County%2C_New_Brunswick"))

([FlightPro_Class580092] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 41)
	(feature "city")
	(lang "en")
	(lat 44.8108)
	(lng -68.7831)
	(rank 100)
	(summary "Bangor is a city in and the county seat of Penobscot County, Maine, and the major commercial and cultural center for eastern and northern Maine. The population of the city was 33,039 at the 2010 United States Census; the Bangor Metropolitan Statistical Area, 153,923.http://2010.census (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/3000/thumb-2233-100.jpg")
	(title "Bangor, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bangor%2C_Maine"))

([FlightPro_Class580093] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 38)
	(feature "city")
	(lang "en")
	(lat 44.3106)
	(lng -69.78)
	(rank 100)
	(summary "Augusta is the capital of the US state of Maine, county seat of Kennebec County, and center of population for Maine. The city's population was 19,136 at the 2010 census, making it the third-smallest state capital after Montpelier, Vermont and Pierre, South Dakota (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/93000/thumb-92165-100.jpg")
	(title "Augusta, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Augusta%2C_Maine"))

([FlightPro_Class580094] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(lang "en")
	(lat 45.0)
	(lng -65.8)
	(rank 100)
	(summary "The Bay of Fundy is a bay on the Atlantic coast of North America, on the northeast end of the Gulf of Maine between the Canadian provinces of New Brunswick and Nova Scotia, with a small portion touching the U.S. state of Maine (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/52000/thumb-51441-100.jpg")
	(title "Bay of Fundy")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bay_of_Fundy"))

([FlightPro_Class580095] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 13)
	(feature "city")
	(lang "en")
	(lat 43.8429)
	(lng -66.1192)
	(rank 98)
	(summary "Yarmouth is a town and port located on the Gulf of Maine in southwestern Nova Scotia, Canada. Yarmouth is the shire town of Yarmouth County and is largest population centre in the region. Long connected to fishing due to its proximity to Georges Bank, the town is located in the heart of the world's (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/41000/thumb-40872-100.jpg")
	(title "Yarmouth, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Yarmouth%2C_Nova_Scotia"))

([FlightPro_Class580096] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 13)
	(feature "city")
	(lang "en")
	(lat 44.7417)
	(lng -65.5153)
	(rank 98)
	(summary "Annapolis Royal is a small Canadian town located in the western part of Annapolis County, Nova Scotia, and was known as Port Royal until the Conquest of Acadia in 1710 by Britain. The town was the capital of Acadia and later Nova Scotia for almost 150 years, until the founding of Halifax in 1749 (...)")
	(title "Annapolis Royal")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Annapolis_Royal"))

([FlightPro_Class580097] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 18)
	(feature "city")
	(lang "en")
	(lat 44.4058)
	(lng -68.8069)
	(rank 98)
	(summary "Castine is a town in Hancock County, Maine, United States and served as the capital of Acadia (1670–1674).See Brenda Dunn. Port Royal/ Annapolis Royal. 2004. Nimbus Publishing. The population was 1,366 at the 2010 census (...)")
	(title "Castine, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Castine%2C_Maine"))

([FlightPro_Class580098] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 96)
	(feature "isle")
	(lang "en")
	(lat 44.6979)
	(lng -66.8223)
	(rank 98)
	(summary "Grand Manan Island (also simply Grand Manan) is a Canadian island, and the largest of the Fundy Islands in the Bay of Fundy. It is also the primary island in the Grand Manan Archipelago, sitting at the boundary between the Bay of Fundy and the Gulf of Maine on the Atlantic coast (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/138000/thumb-137644-100.jpg")
	(title "Grand Manan Island")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Grand_Manan_Island"))

([FlightPro_Class580099] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 93)
	(lang "en")
	(lat 44.5642)
	(lng -69.6631)
	(rank 98)
	(summary "Colby College is a private liberal arts college located on Mayflower Hill in Waterville, Maine, USA. Founded in 1813, it is the 12th-oldest independent liberal arts college in the United States. Colby was the first all-male college in New England to accept female students in 1871.http://www.colby (...)")
	(title "Colby College")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Colby_College"))

([FlightPro_Class580100] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 18)
	(feature "city")
	(lang "en")
	(lat 43.9164)
	(lng -69.8225)
	(rank 98)
	(summary "Bath is a city in Sagadahoc County, Maine, in the United States. The population was 8,514 at the 2010 census. It is the county seat of Sagadahoc County. Bath is a port of entry with a good harbor formed by the Kennebec River estuary (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/157000/thumb-156134-100.jpg")
	(title "Bath, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bath%2C_Maine"))

([FlightPro_Class580101] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 93)
	(feature "adm2nd")
	(lang "en")
	(lat 44.41)
	(lng -69.77)
	(rank 98)
	(summary "Kennebec County is a county located in the U.S. state of Maine. In 2010, its population was 122,151. Its county seat is Augusta. The center of population of Maine is located in Kennebec County, in the city of Augusta.http://www.census.gov/geo/www/cenpop/statecenters (...)")
	(title "Kennebec County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Kennebec_County%2C_Maine"))

([FlightPro_Class580102] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 238)
	(lang "en")
	(lat 44.35)
	(lng -68.2167)
	(rank 98)
	(summary "Acadia National Park is a National Park located in the U.S. state of Maine. It reserves much of Mount Desert Island, and associated smaller islands, off the Atlantic coast. Originally created as Lafayette National Park in 1919, the oldest National Park east of the Mississippi River, it was renamed (...)")
	(title "Acadia National Park")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Acadia_National_Park"))

([FlightPro_Class580103] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 32)
	(feature "adm2nd")
	(lang "en")
	(lat 44.97)
	(lng -67.61)
	(rank 98)
	(summary "Washington County is a county located in the U.S. state of Maine. As of the 2010 census, its population was 32,856. Its county seat is Machias. It is sometimes referred to as \"Sunrise County\" because it is the easternmost county in the continental United States, and claims have been made that (...)")
	(title "Washington County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Washington_County%2C_Maine"))

([FlightPro_Class580104] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 2)
	(feature "landmark")
	(lang "en")
	(lat 43.9045)
	(lng -69.8147)
	(rank 98)
	(summary "Bath Iron Works (BIW) is a major American shipyard located on the Kennebec River in Bath, Maine, United States. Since its founding in 1884 (as Bath Iron Works, Limited), BIW has built private, commercial and military vessels, most of which have been ordered by the United States Navy (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/133000/thumb-132731-100.jpg")
	(title "Bath Iron Works")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bath_Iron_Works"))

([FlightPro_Class580105] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 27)
	(feature "adm2nd")
	(lang "en")
	(lat 44.57)
	(lng -68.37)
	(rank 98)
	(summary "Hancock County is a county located in the U.S. state of Maine. As of 2010, the population was 54,418. Its county seat is Ellsworth. It was incorporated on June 25, 1789. Hancock County was named for John Hancock, the first governor of the Commonwealth of Massachusetts (...)")
	(title "Hancock County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Hancock_County%2C_Maine"))

([FlightPro_Class580106] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 34)
	(feature "city")
	(lang "en")
	(lat 44.552)
	(lng -69.6317)
	(rank 97)
	(summary "Waterville is a city in Kennebec County, Maine, United States, on the west bank of the Kennebec River. The population was 15,722 at the 2010 census. Waterville is home to Colby College and Thomas College.  (...)")
	(title "Waterville, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Waterville%2C_Maine"))

([FlightPro_Class580107] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 14)
	(feature "city")
	(lang "en")
	(lat 44.1094)
	(lng -69.1147)
	(rank 97)
	(summary "Rockland is a city in Knox County, Maine, in the United States. As of the 2010 census, the city population was 7,297. It is the county seat of Knox County. The city is a popular tourist destination. It is a departure point for the Maine State Ferry Service to the islands of Penobscot Bay: (...)")
	(title "Rockland, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Rockland%2C_Maine"))

([FlightPro_Class580108] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 43)
	(feature "adm2nd")
	(lang "en")
	(lat 43.91)
	(lng -69.84)
	(rank 97)
	(summary "Sagadahoc County is a county located in the U.S. state of Maine. As of the 2010 census, the population was 35,293. Its county seat is Bath. In geographic area, it is the smallest county in Maine. Sagadahoc County is part of the Portland&ndash;South Portland&ndash;Biddeford, Maine Metropolitan (...)")
	(title "Sagadahoc County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Sagadahoc_County%2C_Maine"))

([FlightPro_Class580109] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 27)
	(feature "city")
	(lang "en")
	(lat 44.6844)
	(lng -67.4628)
	(rank 97)
	(summary "Machias is a town in and the county seat of Washington County in downeast Maine, United States. As of the 2010 census, the town population was 2,221. It is home to the University of Maine at Machias and Machias Valley Airport, a small public airport owned by the town (...)")
	(title "Machias, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Machias%2C_Maine"))

([FlightPro_Class580110] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 66)
	(feature "city")
	(lang "en")
	(lat 44.5722)
	(lng -68.476)
	(rank 97)
	(summary "Ellsworth is a city in and the county seat of Hancock County, Maine, United States. The 2010 Census determined it had a population of 7,741. Ellsworth was Maine's fastest growing city from 2000–2010 with a growth rate of nearly 20 percent (...)")
	(title "Ellsworth, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Ellsworth%2C_Maine"))

([FlightPro_Class580111] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(feature "adm2nd")
	(lang "en")
	(lat 44.03)
	(lng -69.03)
	(rank 97)
	(summary "Knox County is a county located in the U.S. state of Maine. As of 2010, the population was 39,736. Its county seat is Rockland. The county is named for American Revolutionary War general and Secretary of War Henry Knox, who lived in the county from 1795 until his death in 1806 (...)")
	(title "Knox County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Knox_County%2C_Maine"))

([FlightPro_Class580112] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 91)
	(feature "adm2nd")
	(lang "en")
	(lat 44.48)
	(lng -69.12)
	(rank 97)
	(summary "Waldo County is a county located in the U.S. state of Maine. As of the 2010 census, the population was 38,786. Its county seat is Belfast. Waldo County was founded on 7 February 1827 from a portion of Hancock County. It was named after Brigadier-General Samuel Waldo, proprietor of the Waldo Patent.  (...)")
	(title "Waldo County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Waldo_County%2C_Maine"))

([FlightPro_Class580113] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 47)
	(feature "city")
	(lang "en")
	(lat 44.2181)
	(lng -69.0819)
	(rank 97)
	(summary "Camden is a town in Knox County, Maine, United States. The population was 4,850 at the 2010 census. The population of the town more than triples during the summer months, due to tourists and summer residents. Camden is a famous summer colony in the Mid-Coast region of Maine (...)")
	(title "Camden, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Camden%2C_Maine"))

([FlightPro_Class580114] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(feature "waterbody")
	(lang "en")
	(lat 44.1872)
	(lng -68.9211)
	(rank 97)
	(summary "The Gulf of Maine is a large gulf of the Atlantic Ocean on the east coast of North America. It is delineated by Cape Cod at the eastern tip of Massachusetts in the southwest and Cape Sable at the southern tip of Nova Scotia in the northeast. It includes the entire coastlines of the U.S (...)")
	(title "Gulf of Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Gulf_of_Maine"))

([FlightPro_Class580115] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 17)
	(feature "city")
	(lang "en")
	(lat 44.0028)
	(lng -69.6659)
	(rank 97)
	(summary "Wiscasset is a town in and the county seat of Lincoln County, Maine, United States, in the Mid Coast region of the state. The population was 3,732 at the 2010 census. Home to the Chewonki Foundation, Wiscasset is a tourist destination noted for early architecture.  (...)")
	(title "Wiscasset, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Wiscasset%2C_Maine"))

([FlightPro_Class580116] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 19)
	(feature "city")
	(lang "en")
	(lat 44.3873)
	(lng -68.2053)
	(rank 97)
	(summary "Bar Harbor is a town on Mount Desert Island in Hancock County, Maine, United States. As of the 2010 census, its population is 5,235. Bar Harbor is a popular tourist destination in the Down East region of Maine, and home to the College of the Atlantic, Jackson Laboratory and Mount Desert Island (...)")
	(title "Bar Harbor, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Bar_Harbor%2C_Maine"))

([FlightPro_Class580117] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 34)
	(feature "city")
	(lang "en")
	(lat 44.9136)
	(lng -67.0039)
	(rank 97)
	(summary "Eastport is a small city (consisting entirely of islands) in Washington County, Maine, United States. The population was 1,331 at the 2010 census. The principal island is Moose Island, which is connected to the mainland by causeway (...)")
	(title "Eastport, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Eastport%2C_Maine"))

([FlightPro_Class580118] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 50)
	(feature "city")
	(lang "en")
	(lat 44.7648)
	(lng -69.7184)
	(population 8589)
	(rank 97)
	(summary "Skowhegan is the county seat of Somerset County, Maine, United States. As of the 2010 census, the town population was 8,589. Every August, Skowhegan hosts the annual Skowhegan State Fair, the oldest continuous state fair in the United States (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/131000/thumb-130096-100.jpg")
	(title "Skowhegan, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Skowhegan%2C_Maine"))

([FlightPro_Class580119] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 14)
	(lang "en")
	(lat 44.3428)
	(lng -68.3071)
	(rank 97)
	(summary "Mount Desert Island (often abbreviated MDI), in Hancock County, Maine, is the largest island off the coast of Maine. With an area of it is the 6th largest island in the contiguous United States. Though it is often claimed to be the third largest island on the eastern seaboard of the United States,: (...)")
	(title "Mount Desert Island")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Mount_Desert_Island"))

([FlightPro_Class580120] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 6)
	(feature "river")
	(lang "en")
	(lat 44.8267)
	(lng -68.6967)
	(rank 97)
	(summary "The Penobscot River is a U.S. Geological Survey. National Hydrography Dataset high-resolution flowline data. , accessed June 22, 2011 river in the U.S. state of Maine. Including the river's West Branch and South Branch increases the Penobscot's length to , making it the second longest river system (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/15000/thumb-14141-100.jpg")
	(title "Penobscot River")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Penobscot_River"))

([FlightPro_Class580121] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 46)
	(lang "en")
	(lat 44.0872)
	(lng -69.6183)
	(rank 97)
	(summary "This is a list of the National Register of Historic Places listings in Lincoln County, Maine. This is intended to be a complete list of the properties and districts on the National Register of Historic Places in Lincoln County, Maine, United States (...)")
	(title "National Register of Historic Places listings in Lincoln County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/National_Register_of_Historic_Places_listings_in_Lincoln_County%2C_Maine"))

([FlightPro_Class580122] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 13)
	(lang "en")
	(lat 44.742)
	(lng -65.5158)
	(rank 96)
	(summary "Port Royal can refer to two different contemporary communities in the Canadian province of Nova Scotia: * Port Royal is a rural farming community in Annapolis County which was the site of a 17th-century French colonization effort known as the Habitation at Port-Royal (...)")
	(title "Port Royal, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Port_Royal%2C_Nova_Scotia"))

([FlightPro_Class580123] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 43)
	(feature "city")
	(lang "en")
	(lat 44.4258)
	(lng -69.0117)
	(rank 96)
	(summary "Belfast is a city in Waldo County, Maine, in the United States. As of the 2010 census, the city population was 6,668. Located at the mouth of the Passagassawakeag River estuary on Penobscot Bay, Belfast is the county seat of Waldo County (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/141000/thumb-140626-100.jpg")
	(title "Belfast, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Belfast%2C_Maine"))

([FlightPro_Class580124] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 45)
	(feature "city")
	(lang "en")
	(lat 44.943)
	(lng -68.6765)
	(rank 96)
	(summary "Old Town is a city in Penobscot County, Maine, United States. The population was 7,840 at the 2010 census. The city's developed area is chiefly located on relatively large Marsh Island, though its boundaries extend beyond that (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/52000/thumb-51480-100.jpg")
	(title "Old Town, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Old_Town%2C_Maine"))

([FlightPro_Class580125] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 5)
	(feature "city")
	(lang "en")
	(lat 43.7632)
	(lng -65.3247)
	(rank 96)
	(summary "Shelburne is a town located in southwestern Nova Scotia, Canada. It is the shire town of Shelburne County.  (...)")
	(thumbnailImg "http://www.geonames.org/img/wikipedia/57000/thumb-56427-100.jpg")
	(title "Shelburne, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Shelburne%2C_Nova_Scotia"))

([FlightPro_Class580126] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(elevation 18)
	(lang "en")
	(lat 44.3164)
	(lng -69.7744)
	(rank 96)
	(summary "This is a list of the National Register of Historic Places listings in Kennebec County, Maine. This is intended to be a complete list of the properties and districts on the National Register of Historic Places in Kennebec County, Maine, United States (...)")
	(title "National Register of Historic Places listings in Kennebec County, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/National_Register_of_Historic_Places_listings_in_Kennebec_County%2C_Maine"))

([FlightPro_Class580127] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 38)
	(lang "en")
	(lat 44.883)
	(lng -68.672)
	(rank 96)
	(summary "Orono is a town in Penobscot County, Maine, United States. It was first settled in 1774 and named in honor of Chief Joseph Orono of the Penobscot Nation. It is home to The University of Maine. The population was 10,362 at the 2010 census.  (...)")
	(title "Orono, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Orono%2C_Maine"))

([FlightPro_Class580128] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 240)
	(feature "adm2nd")
	(lang "en")
	(lat 44.7)
	(lng -65.2)
	(rank 96)
	(summary "Annapolis County is a county in the Canadian province of Nova Scotia located in the western part of the province on the Bay of Fundy. The county seat is Annapolis Royal.  (...)")
	(title "Annapolis County, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Annapolis_County%2C_Nova_Scotia"))

([FlightPro_Class580129] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(elevation 0)
	(feature "landmark")
	(lang "en")
	(lat 44.1115)
	(lng -69.1032)
	(rank 96)
	(summary "__NOTOC__ This is a complete List of National Historic Landmarks in Maine. The United States National Historic Landmark program is operated under the auspices of the National Park Service, and recognizes structures, districts, objects, and similar resources according to a list of criteria of (...)")
	(title "List of National Historic Landmarks in Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/List_of_National_Historic_Landmarks_in_Maine"))

([FlightPro_Class580130] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "US")
	(feature "city")
	(lang "en")
	(lat 44.0217)
	(lng -68.7936)
	(rank 96)
	(summary "Vinalhaven is a town located on the larger of the two Fox Islands in Knox County, Maine, United States. Vinalhaven is also used to refer to the Island itself. The population was 1,165 at the 2010 census. It is home to a thriving lobster fishery and hosts a summer colony (...)")
	(title "Vinalhaven, Maine")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Vinalhaven%2C_Maine"))

([FlightPro_Class580131] of  WikiArticle

	(button-open-site "Open Site/wiki.gis/open-site")
	(countryCode "CA")
	(elevation 12)
	(feature "city")
	(lang "en")
	(lat 43.8444)
	(lng -65.9464)
	(rank 96)
	(summary "Argyle is a municipal district in Yarmouth County, Nova Scotia. The district occupies the eastern portion of the county and is one of three municipal units - the other two being the town of Yarmouth and the Yarmouth municipal district (...)")
	(title "Argyle, Nova Scotia")
	(wikipediaUrl "http://en.wikipedia.org/wiki/Argyle%2C_Nova_Scotia"))

([FlightPro_Class580132] of  QuestionTree

	(name "populated place"))

([FlightPro_Class590000] of  CloFunction

	(source "(vswap! fr24/MANUAL-DATA assoc \"MANUAL\"\n          (volatile! {:mode \"MANUAL\"\n	 :coord (read-string (:coord params))\n	 :course (read-string (:course params))\n	 :speed (read-string (:speed params))\n	 :altitude (read-string (:altitude params))}))")
	(title "get-manual-data [params]"))

([FlightPro_Class590001] of  CloVar

	(source "false")
	(title "ONB-PAUSE"))

([FlightPro_Class60000] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Cesium Client<br></b><br>API<br><br>1. fly-to [lat lon alt crs per]<br>2. camera [key val], keys: :view, :altitude, :pitch, :roll<br><br>CZML rendering support<br><br>Initialization: (init-3D-view)</body>\n</html>"))

([FlightPro_Class600000] of  CloFunction

	(source "(GET (:question URL) \n    {:params params\n     :handler handler\n     :error-handler error-handler\n     :response-format :transit})")
	(title "ask-server [params handler]"))

([FlightPro_Class600001] of  Airport

	(altitude 29)
	(coord 12.18885 -68.9598)
	(country "Curacao")
	(iata "CUR")
	(icao "TNCC")
	(runways 0)
	(title "Willemstad Curacao Hato International Airport"))

([FlightPro_Class600002] of  Airport

	(altitude 126)
	(coord 41.41474 19.72056)
	(country "Albania")
	(iata "TIA")
	(icao "LATI")
	(runways 0)
	(title "Tirana International Airport"))

([FlightPro_Class600003] of  CloFunction

	(source "(let [carr @CARRIER]\n  (if (= (:mode carr) \"MANUAL\")\n    (GET (str (:manual-data URL) \n	\"?coord=\" (:coord carr)\n	\"&course=\" (:course carr)\n	\"&speed= \" (:speed carr)\n	\"&altitude=\" (:altitude carr))\n	{:handler (fn[response])\n	 :error-handler error-handler})))")
	(title "send-manual-data []"))

([FlightPro_Class60001] of  CloNamespace

	(source "(:require\n  [csasync.proc :as asp]\n  [czm.core :as czm]\n  [view3d.controls :as ctl]\n  [carr.move :as mov]\n  [calc.core :as calc]\n  [calc.dynamic :as dyn]\n  [cognitect.transit :as t]\n  [ajax.core :refer (GET)]\n  [cljs.reader :as rdr]\n  [nightlight.repl-server])")
	(title "view3d.client"))

([FlightPro_Class610000] of  CloVar

	(source "\"yes\"")
	(title "TERRAIN"))

([FlightPro_Class610001] of  CloFunction

	(source "(condp = who\n  :server (vswap! COMM assoc :fr24-bbx-ctrl who)\n  :client (let [{:keys [n s w e z]} @fr24/BBX]\n               (asp/pump-in (:ins-chn @COMM)\n	{:instruct :map-center\n	 :coord [(/ (+ n s) 2) (/ (+ e w) 2)]\n	 :zoom z})\n               (vswap! COMM assoc :fr24-bbx-ctrl who)))")
	(title "map-view-ctrl [who]"))

([FlightPro_Class610003] of  Airport

	(altitude 2697)
	(coord 35.759167 6.3225)
	(country "Algeria")
	(iata "BLJ")
	(icao "DABT")
	(runways 0)
	(title "Batna International Airport"))

([FlightPro_Class610004] of  Airport

	(altitude 169)
	(coord 13.0746 -59.4924)
	(country "Barbados")
	(iata "BGI")
	(icao "TBPB")
	(runways 0)
	(title "Bridgetown Grantley Adams International Airport"))

([FlightPro_Class610005] of  Airport

	(altitude 16)
	(coord 25.03895 -77.4662)
	(country "Bahamas")
	(iata "NAS")
	(icao "MYNN")
	(runways 0)
	(title "Nassau Lynden Pindling International Airport"))

([FlightPro_Class610006] of  Airport

	(altitude 3338)
	(coord 31.51363 65.86105)
	(country "Afghanistan")
	(iata "KDH")
	(icao "OAKN")
	(runways 0)
	(title "Kandahar Airport"))

([FlightPro_Class610012] of  CloFunction

	(source "(if-let [flt (seq (filter #(= (sv % \"name\") pred) (svs qt \"branches\")))]\n  (if-let [flt (seq (filter #(= (sv % \"name\") subj) (svs (first flt) \"branches\")))]\n    (if-let [flt (seq (filter #(= (sv % \"name\") obj) (svs (first flt) \"branches\")))]\n      (if-let [bb (seq (svs (first flt) \"branches\"))]\n        (map #(sv % \"name\") bb)\n        (ask-es pred subj obj nil)))))")
	(title "adjuncts [pred subj obj qt]"))

([FlightPro_Class610013] of  CloFunction

	(source "(println [:ASK-ES pred subj obj adj])\n(rete/assert-frame \n	['Question\n	 'predicate pred\n	 'subject subj\n	 'object obj\n	 'adjunct adj])\n(rete/fire)")
	(title "ask-es [pred subj obj adj]"))

([FlightPro_Class610041] of  TypeName

	(name "hamlet"))

([FlightPro_Class610042] of  TypeName

	(name "place_of_worship"))

([FlightPro_Class610061] of  TypeName

	(name "post_office"))

([FlightPro_Class610065] of  TypeName

	(name "fuel"))

([FlightPro_Class610090] of  TypeName

	(name "yes"))

([FlightPro_Class610098] of  TypeName

	(name "parking"))

([FlightPro_Class610142] of  TypeName

	(name "florist"))

([FlightPro_Class610148] of  TypeName

	(name "confectionery"))

([FlightPro_Class610153] of  TypeName

	(name "ticket"))

([FlightPro_Class610156] of  TypeName

	(name "bus_station"))

([FlightPro_Class610158] of  TypeName

	(name "bicycle_parking"))

([FlightPro_Class610171] of  TypeName

	(name "crossing"))

([FlightPro_Class610174] of  TypeName

	(name "car_wash"))

([FlightPro_Class610178] of  TypeName

	(name "parking_entrance"))

([FlightPro_Class610181] of  TypeName

	(name "townhall"))

([FlightPro_Class610192] of  TypeName

	(name "waste_basket"))

([FlightPro_Class610195] of  TypeName

	(name "theatre"))

([FlightPro_Class610198] of  TypeName

	(name "viewpoint"))

([FlightPro_Class610200] of  TypeName

	(name "bench"))

([FlightPro_Class610203] of  TypeName

	(name "fountain"))

([FlightPro_Class610205] of  Airport

	(altitude 430)
	(coord 60.6544 24.8811)
	(country "Finland")
	(iata "HYV")
	(icao "EFHV")
	(runways 0)
	(title "Hyvinkaa Airport"))

([FlightPro_Class610222] of  TypeName

	(name "grit_bin"))

([FlightPro_Class610249] of  TypeName

	(name "college"))

([FlightPro_Class610288] of  TypeName

	(name "public_building"))

([FlightPro_Class610307] of  TypeName

	(name "utlity_pole"))

([FlightPro_Class610313] of  CloFunction

	(source "(let [mp (into {} hm)\n       rss (mp \"osm-responses\")]\n  (invoke-later\n    (doseq [rs rss]\n      (asp/pump-in (:ins-chn @COMM)\n	{:instruct :delete-placemark\n	 :iname (.getName rs)})\n      (delin rs))))")
	(title "delete-pois [hm inst]"))

([FlightPro_Class610337] of  TypeName

	(name "information"))

([FlightPro_Class610341] of  TypeName

	(name "tickets"))

([FlightPro_Class610347] of  TypeName

	(name "car_rental"))

([FlightPro_Class610354] of  TypeName

	(name "bureau_de_change"))

([FlightPro_Class610360] of  TypeName

	(name "artwork"))

([FlightPro_Class610371] of  TypeName

	(name "music"))

([FlightPro_Class620000] of  CloFunction

	(source "(let [{:keys [n s w e z]} @fr24/BBX]\n  (map-view-ctrl :client)\n  (asp/pump-in (:ins-chn @COMM)\n	{:instruct :map-center\n	 :coord [(/ (+ n s) 2) (/ (+ w e) 2)]\n	 :zoom z}))")
	(title "ret-to-flight [hm inst]"))

([FlightPro_Class620001] of  CloVar

	(source "(volatile! {})")
	(title "MANUAL-DATA"))

([FlightPro_Class620003] of  CloFunction

	(source "(let [tof (:takeoff gen)\n       cru (:cruise gen)\n       lnd (:landing gen)\n       fcrd [(fapt \"lat\") (fapt \"lon\")]\n       tcrd [(tapt \"lat\") (tapt \"lon\")]\n       falt (if (= cmd/TERRAIN \"yes\") (fapt \"alt\") 0)\n       talt (if (= cmd/TERRAIN \"yes\") (tapt \"alt\") 0)\n       spp (assoc gen :takeoff (merge tof\n		{:altitude (corr-alt (:altitude tof) falt)})\n	        :landing (merge lnd\n		{:altitude (corr-alt (:altitude lnd) talt)\n		 :altitude-graph (corr-alt-tab (:altitude-graph lnd) talt)}))]\n    (merge spp {:general-crs	(int (geo/bear-deg fcrd tcrd))\n	:general-dist	(int (geo/distance-nm fcrd tcrd))\n	:start-crd 	fcrd\n	:finish-crd 	tcrd\n	:start-alt 	falt\n	:finish-alt 	talt\n	:start-run 	(runway (fapt \"iata\"))\n	:finish-run 	(runway (tapt \"iata\"))}))")
	(title "specific-plan [gen fapt tapt]"))

([FlightPro_Class620004] of  CloFunction

	(source ";; return [cruise-altitude cruise-speed altitude-distance altitude-speed]\n(loop [alt cru-alt spd cru-spd ad 0 sd 0]\n  (if (and (> (first alt) min-alt) (> (first spd) min-spd))\n    (let [[stim sdis] (mfs/speed-variation spd spd-lnd (:step prop) (:time-out prop))\n           atim (mfs/altitude-variation alt alt-lnd (:step elev) (:time-out elev))\n           adis (if (<= atim stim)\n                    sdis\n                    (+ sdis (* (- atim stim) (first spd))))]\n      (if (< (* 2 adis) gen-dist)\n        [adis sdis alt spd]\n        (let [[a aa] alt\n               [s sa] spd]\n          (recur [(round (int (* 0.8 a)) 1000) aa] [(round (int (* 0.8 s)) 10) sa] adis sdis))))\n    [ad sd alt spd]))")
	(title "adjust-cruise [gen-dist cru-alt cru-spd alt-lnd spd-lnd elev prop min-alt min-spd]"))

([FlightPro_Class620010] of  CloFunction

	(source "(let [md (mod x p)\n       r (- x md)]\n  (if (< md (/ p 2))\n    r\n    (+ r p)))")
	(title "round [x p]"))

([FlightPro_Class620043] of  TypeName

	(name "veterinary"))

([FlightPro_Class620049] of  TypeName

	(name "sports"))

([FlightPro_Class620062] of  TypeName

	(name "museum"))

([FlightPro_Class620067] of  TypeName

	(name "fire_station"))

([FlightPro_Class620069] of  TypeName

	(name "optician"))

([FlightPro_Class620071] of  TypeName

	(name "clock"))

([FlightPro_Class620075] of  TypeName

	(name "driving_school"))

([FlightPro_Class620078] of  TypeName

	(name "doctors"))

([FlightPro_Class620081] of  TypeName

	(name "other"))

([FlightPro_Class620085] of  TypeName

	(name "clothes"))

([FlightPro_Class620088] of  TypeName

	(name "furniture"))

([FlightPro_Class620092] of  TypeName

	(name "swimming_pool"))

([FlightPro_Class620094] of  TypeName

	(name "suburb"))

([FlightPro_Class620096] of  TypeName

	(name "funeral_directors"))

([FlightPro_Class630000] of  CloVar

	(source "0")
	(title "APT-ALT"))

([FlightPro_Class630044] of  TypeName

	(name "shelter"))

([FlightPro_Class630092] of  TypeName

	(name "tap"))

([FlightPro_Class630094] of  TypeName

	(name "transformer"))

([FlightPro_Class630108] of  TypeName

	(name "abandoned_station"))

([FlightPro_Class630231] of  TypeName

	(name "generator"))

([FlightPro_Class630421] of  TypeName

	(name "level_crossing"))

([FlightPro_Class630429] of  TypeName

	(name "car"))

([FlightPro_Class630456] of  TypeName

	(name "shoes"))

([FlightPro_Class630460] of  TypeName

	(name "bird_hide"))

([FlightPro_Class630471] of  TypeName

	(name "books"))

([FlightPro_Class630477] of  TypeName

	(name "toys"))

([FlightPro_Class630479] of  TypeName

	(name "telephone"))

([FlightPro_Class630481] of  TypeName

	(name "clinic"))

([FlightPro_Class630494] of  TypeName

	(name "maypole"))

([FlightPro_Class640000] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class650001])
	(%3AANNOTATION-TEXT "Initial Airport")
	(%3ACREATION-TIMESTAMP "2017.02.23 13:01:19.048 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class640001] of  CloFunction

	(source "(if-let [api (fainst (cls-instances \"Airport\") \"Initial Airport\")]\n  (move-to {:country (sv api \"country\")\n	:airport (sv api \"title\")})\n  (println \"Annotated Initial Airport not found!\"))")
	(title "go-initial-airport []"))

([FlightPro_Class640008] of  CloFunction

	(source ";; find or create airport instance\n(invoke-later\n(let [iata (apt \"iata\")]\n  (if (not (fifos \"Airport\" \"iata\" iata))\n    (let [ins (crin \"Airport\")]\n      (ssv ins \"title\" (apt \"name\"))\n      (ssv ins \"iata\" iata)\n      (ssv ins \"icao\" (apt \"icao\"))\n      (ssv ins \"country\" (apt \"country\"))\n      (ssv ins \"altitude\" (apt \"alt\"))\n      (ssvs ins \"coord\" [(float (apt \"lat\"))\n	          (float (apt \"lon\"))]))))\n)")
	(title "foc-apt-ins [apt]"))

([FlightPro_Class640195] of  TypeName

	(name "village"))

([FlightPro_Class640198] of  TypeName

	(name "park"))

([FlightPro_Class640323] of  TypeName

	(name "police"))

([FlightPro_Class640329] of  TypeName

	(name "courthouse"))

([FlightPro_Class640587] of  TypeClass

	(name "natural"))

([FlightPro_Class640588] of  TypeName

	(name "peak"))

([FlightPro_Class640590] of  TypeName

	(name "land"))

([FlightPro_Class640719] of  TypeName

	(name "grave_yard"))

([FlightPro_Class650000] of  NearbySearch

	(button-clear-articles "Clear Articles/wiki.gis/clear-articles")
	(button-nearby "submit/wiki.gis/submit-nearby")
	(language English-en)
	(lat 60.3)
	(lng 25.0)
	(max-responses 5)
	(radius-km 10))

([FlightPro_Class650001] of  Airport

	(altitude 179)
	(coord 60.31722 24.96333)
	(country "Finland")
	(iata "HEL")
	(icao "EFHK")
	(runways 47 153)
	(title "Helsinki Vantaa Airport"))

([FlightPro_Class650002] of  Airport

	(altitude 14)
	(coord 40.63975 -73.7789)
	(country "United States")
	(iata "JFK")
	(icao "KJFK")
	(runways 121 31)
	(title "New York John F. Kennedy International Airport"))

([FlightPro_Class650003] of  Airport

	(altitude 21)
	(coord 40.77725 -73.8726)
	(country "United States")
	(iata "LGA")
	(icao "KLGA")
	(runways 32 122)
	(title "New York LaGuardia Airport"))

([FlightPro_Class650004] of  Airport

	(altitude 18)
	(coord 40.6925 -74.1686)
	(country "United States")
	(iata "EWR")
	(icao "KEWR")
	(runways 26 95)
	(title "New York Newark Liberty International Airport"))

([FlightPro_Class650005] of  Airport

	(altitude 36)
	(coord 39.87194 -75.2411)
	(country "United States")
	(iata "PHL")
	(icao "KPHL")
	(runways 75 159)
	(title "Philadelphia International Airport"))

([FlightPro_Class650006] of  Airport

	(altitude 8)
	(coord 25.79325 -80.2905)
	(country "United States")
	(iata "MIA")
	(icao "KMIA")
	(runways 87 119)
	(title "Miami International Airport"))

([FlightPro_Class650007] of  Airport

	(altitude 83)
	(coord 51.4775 -0.46138)
	(country "United Kingdom")
	(iata "LHR")
	(icao "EGLL")
	(runways 90)
	(title "London Heathrow Airport"))

([FlightPro_Class650008] of  Airport

	(altitude 364)
	(coord 50.02642 8.543125)
	(country "Germany")
	(iata "FRA")
	(icao "EDDF")
	(runways 70 179)
	(title "Frankfurt Airport"))

([FlightPro_Class650009] of  Airport

	(altitude 78)
	(coord 59.80029 30.2625)
	(country "Russia")
	(iata "LED")
	(icao "ULLI")
	(runways 106)
	(title "St. Petersburg Pulkovo Airport"))

([FlightPro_Class650010] of  Airport

	(altitude 622)
	(coord 55.97264 37.41458)
	(country "Russia")
	(iata "SVO")
	(icao "UUEE")
	(runways 75)
	(title "Moscow Sheremetyevo International Airport"))

([FlightPro_Class650011] of  Airport

	(altitude 118)
	(coord 45.03468 39.17053)
	(country "Russia")
	(iata "KRR")
	(icao "URKK")
	(runways 52)
	(title "Krasnodar International Airport"))

([FlightPro_Class650012] of  Airport

	(altitude 89)
	(coord 43.44992 39.95658)
	(country "Russia")
	(iata "AER")
	(icao "URSS")
	(runways 28 65)
	(title "Sochi International Airport"))

([FlightPro_Class650013] of  Airport

	(altitude 1225)
	(coord -17.6447 -63.1353)
	(country "Bolivia")
	(iata "VVI")
	(icao "SLVR")
	(runways 147)
	(title "Santa Cruz Viru Viru International Airport"))

([FlightPro_Class650014] of  Airport

	(altitude 1371)
	(coord -17.8115 -63.1714)
	(country "Bolivia")
	(iata "SRZ")
	(icao "SLET")
	(runways 144)
	(title "Santa Cruz El Trompillo Airport"))

([FlightPro_Class650015] of  Airport

	(altitude 8360)
	(coord -17.421 -66.1771)
	(country "Bolivia")
	(iata "CBB")
	(icao "SLCB")
	(runways 38 132)
	(title "Cochabamba Jorge Wilstermann International Airport"))

([FlightPro_Class650016] of  Airport

	(altitude 13325)
	(coord -16.5133 -68.1922)
	(country "Bolivia")
	(iata "LPB")
	(icao "SLLP")
	(runways 92)
	(title "La Paz El Alto International Airport"))

([FlightPro_Class650017] of  Airport

	(altitude 151)
	(coord 61.88516 34.15474)
	(country "Russia")
	(iata "PES")
	(icao "ULPB")
	(runways 23 51)
	(title "Petrozavodsk Airport"))

([FlightPro_Class660000] of  CloFunction

	(source "(let [[n s w e] (:visible @COMM)\n       [lat lon] (our-center n s w e)\n       [n0 s0 w0 e0] (:wiki-bbx @COMM)]\n  (if (or (> s0 lat)\n           (< n0 lat)\n           (< e0 lon)\n           (> w0 lon))\n     (invoke-later\n       (let [bbi (foc \"BBX\" \"title\" \"Current\")\n              rqi (fainst (cls-instances \"BBXWiki\") \"Current BBXWiki Request\")]\n         (if (and bbi rqi)\n           (do\n             (ssvs bbi \"wsen\" (vec (map float [w s e n])))\n             (ssv rqi \"bbx\" bbi)\n             (ssvs rqi \"responses\" [])\n             (wig/submit-bbx (itm rqi 0) rqi)\n             (let [rr (svs rqi \"responses\")\n                    chn (:ins-chn @COMM)]\n               (when (seq rr)\n	(asp/pump-in chn {:instruct :clear-placemarks})\n	(doseq [r rr]\n	  (point-out-place {:instance r})\n	  (asp/pump-in chn (placemark-instruct {:instance r})))\n	(vswap! COMM assoc :wiki-bbx [n s w e]))))\n           (println \"Instance of \\\"Current BBXWiki Request\\\" not found!\"))))))")
	(title "pump-wiki []"))

([FlightPro_Class660006] of  BBXWiki

	(bbx [FlightPro_Class670008])
	(button-bbx "submit/wiki.gis/submit-bbx")
	(button-clear-articles "Clear Articles/wiki.gis/clear-articles")
	(language English-en)
	(max-responses 40)
	(responses
		[FlightPro_Class580092]
		[FlightPro_Class580093]
		[FlightPro_Class580094]
		[FlightPro_Class580095]
		[FlightPro_Class580096]
		[FlightPro_Class580097]
		[FlightPro_Class580098]
		[FlightPro_Class580099]
		[FlightPro_Class580100]
		[FlightPro_Class580101]
		[FlightPro_Class580102]
		[FlightPro_Class580103]
		[FlightPro_Class580104]
		[FlightPro_Class580105]
		[FlightPro_Class580106]
		[FlightPro_Class580107]
		[FlightPro_Class580108]
		[FlightPro_Class580109]
		[FlightPro_Class580110]
		[FlightPro_Class580111]
		[FlightPro_Class580112]
		[FlightPro_Class580113]
		[FlightPro_Class580114]
		[FlightPro_Class580115]
		[FlightPro_Class580116]
		[FlightPro_Class580117]
		[FlightPro_Class580118]
		[FlightPro_Class580119]
		[FlightPro_Class580120]
		[FlightPro_Class580121]
		[FlightPro_Class580122]
		[FlightPro_Class580123]
		[FlightPro_Class580124]
		[FlightPro_Class580125]
		[FlightPro_Class580126]
		[FlightPro_Class580127]
		[FlightPro_Class580128]
		[FlightPro_Class580129]
		[FlightPro_Class580130]
		[FlightPro_Class580131]))

([FlightPro_Class660024] of  CloFunction

	(source "(println [:CMD-WIKIPEDIA params])\n(if (:wiki @exd/COMM)\n  (do (vswap! exd/COMM assoc :wiki false)\n    (asp/pump-in (:instructions CHN)\n	 {:instruct :clear-placemarks}))\n  (let [[n s w e] (map str (:visible @exd/COMM))]\n    (vswap! exd/COMM assoc :wiki-bbx [0 0 0 0]) \n    (vswap! exd/COMM assoc :wiki true)\n    (visible {:n n :s s :w w :e e})))\n(println \"Wikipedia: \" (:wiki @exd/COMM)) \n\"\"")
	(title "wikipedia [params]"))

([FlightPro_Class660025] of  CloVar

	(source "(defonce COMM\n  (volatile! \n    {:visible [0 0 0 0]\n     :wiki-bbx [0 0 0 0]\n     :wiki false\n     :ins-chn nil\n     :fr24-bbx-ctrl :client}))")
	(title "defCOMM"))

([FlightPro_Class670000] of  CloProgram

	(cloFunctions
		[FlightPro_Class670006]
		[FlightPro_Class670265]
		[FlightPro_Class670266]
		[FlightPro_Class740002]
		[FlightPro_Class740003]
		[FlightPro_Class700000]
		[FlightPro_Class280198]
		[FlightPro_Class280040]
		[FlightPro_Class750004]
		[FlightPro_Class750005]
		[FlightPro_Class660000]
		[FlightPro_Class730003]
		[FlightPro_Class780021]
		[FlightPro_Class810000]
		[FlightPro_Class280164]
		[FlightPro_Class610001]
		[FlightPro_Class280182]
		[FlightPro_Class610313]
		[FlightPro_Class620000]
		[FlightPro_Class840001]
		[FlightPro_Class850012]
		[FlightPro_Class580051])
	(cloNamespace [FlightPro_Class670001])
	(cloVars
		[FlightPro_Class330004]
		[FlightPro_Class750000]
		[FlightPro_Class810006]
		[FlightPro_Class660025])
	(title "External Data"))

([FlightPro_Class670001] of  CloNamespace

	(source "(:use protege.core)\n(:require \n  [wiki.gis :as wig]\n  [cesium.core :as cz]\n  [calc.geo :as geo]\n  [async.proc :as asp]\n  [geo.names :as gn]\n  [fr24.client :as fr24]\n  [osm.data :as osm])\n(:import\n  edu.stanford.smi.protege.model.Instance)")
	(title "ext.data"))

([FlightPro_Class670004] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [FlightPro_Class660006])
	(%3AANNOTATION-TEXT "Current BBXWiki Request")
	(%3ACREATION-TIMESTAMP "2017.02.17 14:12:37.199 MSK")
	(%3ACREATOR "ru"))

([FlightPro_Class670006] of  CloMacro

	(source "`(let [f# (future (do ~@body))\n         v# (gensym)\n         result# (deref f# ~msec v#)]\n    (if (= v# result#)\n      (do\n        (println :FUTURE-CANCELLING)\n        (future-cancel f#)\n        (println :FUTURE-CANCELLED)\n        nil)\n      result#))")
	(title "with-timeout [msec & body]"))

([FlightPro_Class670008] of  BBX

	(title "Current")
	(wsen -69.86755 40.930115 -65.044556 45.023067))

([FlightPro_Class670041] of  TypeName

	(name "manhole"))

([FlightPro_Class670053] of  TypeName

	(name "box"))

([FlightPro_Class670068] of  TypeName

	(name "pipeline_marker"))

([FlightPro_Class670077] of  TypeName

	(name "kauneushoitola"))

([FlightPro_Class670265] of  CloFunction

	(source "(let [{:keys [instance airport feature]} parmap]\n  {:instruct :create-placemark\n    :iname (or (some-> instance .getName) (some-> airport (get \"iata\")))\n    :tip (or (some-> instance (sv \"title\")) (some-> airport (get \"name\")))\n    :lat (or (some-> instance (sv \"lat\")) (some-> airport (get \"lat\")))\n    :lon (or (some-> instance (sv \"lng\")) (some-> airport (get \"lon\")))\n    :feature (or (some-> instance (sv \"feature\")) (some-> feature))})")
	(title "placemark-instruct [parmap]"))

([FlightPro_Class670266] of  CloFunction

	(source "(let [head (str \"<h3>\" (sv dati \"title\") \"</h3>\")\n       itag (str \"<img src=\\\"\" (sv dati \"thumbnailImg\") \"\\\">\")\n       summ (sv dati \"summary\")\n       addr (sv dati \"wikipediaUrl\")\n       wiki (str \"<a href=\\\"\" addr \"\\\">\" addr \"</a>\")\n       html (str head itag \"<br>\" summ \"<br>\" wiki)]\n  {:instruct :popup\n    :lat (sv dati \"lat\")\n    :lon (sv dati \"lng\")\n    :html html\n    :time (:ext-data-popup TIO)})")
	(title "placemark-popup-instruct [dati]"))

([FlightPro_Class670311] of  CloFunction

	(source "(let [pos (js/L.LatLng. lat lon)\n       ico (js/L.icon #js{:iconUrl (or url-ico\n		     (URL-ICO feature) \n		     (URL-ICO \"default\"))\n	           :iconSize #js[24, 24]})\n       opt #js{:icon ico\n                    :draggable false\n                    :title tip}\n       mrk (-> js/L (.marker pos opt))]\n    (.on mrk \"click\"\n         (fn [e]\n           (info (str \"pm\" iname))))\n    (.addTo mrk @CHART)\n    (vswap! PLACEMARKS assoc iname mrk))")
	(title "create-placemark [iname tip lat lon feature url-ico]"))

([FlightPro_Class670312] of  CloVar

	(source "(volatile! {})")
	(title "PLACEMARKS"))

([FlightPro_Class670313] of  CloFunction

	(source "(doseq [mrk (vals @PLACEMARKS)]\n  (.removeLayer @CHART mrk))\n(vreset! PLACEMARKS {})")
	(title "clear-placemarks []"))

([FlightPro_Class680000] of  Airport

	(altitude 52)
	(coord 27.17831 33.79943)
	(country "Egypt")
	(iata "HRG")
	(icao "HEGN")
	(runways 0)
	(title "Hurghada International Airport"))

([FlightPro_Class690000] of  Rule

	(lhs "?q (Question predicate \"What\"\n	subject \"Intersections\")\n(Flight id ?id1\n           callsign ?cs1\n           coord ?crd1\n           course ?crs1\n           speed ?spd1\n           altitude ?a1\n           age \"CURRENT\")\n(Flight id ?id2\n           callsign ?cs2\n           coord ?crd2\n           course ?crs2\n           speed ?spd2\n           altitude ?a2\n           age \"CURRENT\"\n           ((<= (.compareTo ?id1 ?id2) 0)\n            (and (> ?spd1 0) (> ?spd2 0))\n            [(and (> ?a1 0) (> ?a2 0) (< (Math/abs (- ?a1 ?a2)) 10000))\n             (and (== ?a1 0) (== ?a2 0))]\n            (< (calc.geo/distance-nm ?crd1 ?crd2)\n               (es/max-distance ?spd1 ?spd2))))")
	(rhs "(when-let [[dmin tmin] (es/intersect? ?crd1 ?crs1 ?spd1 ?crd2 ?crs2 ?spd2 ?id1 ?id2)]\n  (println [:Dmin dmin :Tmin tmin :Who ?cs1 ?cs2])\n  (es/pom-and-link ?id1 ?crd1 ?crs1 ?spd1 ?cs1 ?id2 ?crd2 ?crs2 ?spd2 ?cs2 dmin tmin))\n(retract ?q)")
	(salience 0)
	(title "qq:Check2FlightsIntersection"))

([FlightPro_Class690004] of  CloFunction

	(source "(when-let [crd3 (geo/future-intersect crd1 crs1 spd1 crd2 crs2 spd2 INTS-TIME)]\n  (let [d1 (geo/distance-nm crd1 crd3)\n         tmin (/ d1 spd1)\n         crd4 (geo/future-pos crd2 crs2 spd2 tmin)\n         dmin (geo/distance-nm crd3 crd4)]\n     (if (< dmin INTS-DMIN)\n       [dmin tmin])))")
	(title "intersect? [crd1 crs1 spd1 crd2 crs2 spd2 id1 id2]"))

([FlightPro_Class690005] of  CloVar

	(source ";; forcast time for intersection in hours (6 min)\n0.1")
	(title "INTS-TIME"))

([FlightPro_Class690006] of  CloVar

	(source ";; distance of intersection in nautical miles (~400 m)\n0.215")
	(title "INTS-DMIN"))

([FlightPro_Class690007] of  Rule

	(lhs "?q (Question predicate \"How many\"\n	subject \"airplanes\"\n	object \"in the air\"\n	adjunct ?ad)")
	(rhs "(ext.data/pump-airplanes \n	(str \"Airplanes \" ?ad)\n	(es/flights-of-status \n	  (condp = ?ad\n	    \"on level\" \"LEVEL\"\n	    \"climb\" \"CLIMB\"\n	    \"descend\" \"DESCEND\")))\n(retract ?q)")
	(salience 0)
	(title "qq:AirplanesInAir"))

([FlightPro_Class690008] of  CloFunction

	(source "([]\n  (am/ask-server {:question \"predicates\"}\n	question))\n([predicates]\n  (am/selector \"element\" 1 \"chart.client\" \"?\" predicates :itself 130)\n  (defn handler1 [sel]\n    (am/ask-server {:question \"subjects\"\n	       :predicate sel}\n	#(question sel %))))\n([pred subjects]\n  (am/selector \"element\" 20 \"chart.client\" \"?\" subjects :itself 130)\n  (defn handler20 [sel]\n    (am/ask-server {:question \"objects\"\n	       :predicate pred\n	       :subject sel}\n	#(question pred sel %))))\n([pred subj objects]\n  (if objects\n    (do (am/selector \"element\" 30 \"chart.client\" \"?\" objects :itself 130)\n      (defn handler30 [sel]\n        (am/ask-server {:question \"adjuncts\"\n	          :predicate pred\n	          :subject subj\n	          :object sel} \n	#(question pred subj sel %))))\n    (am/clear-dialog)))\n([pred subj obj adjuncts]\n  (if adjuncts\n    (do (am/selector \"element\" 40 \"chart.client\" \"?\" adjuncts :itself 130)\n      (defn handler40 [sel]\n        (am/ask-server {:question \"es\"\n	          :predicate pred\n	          :subject subj\n	          :object obj\n                                  :adjunct sel} \n	(fn [r]))\n        (am/clear-dialog)))\n    (am/clear-dialog)))")
	(title "question"))

([FlightPro_Class690009] of  CloFunction

	(source "(* (+ spd1 spd2) INTS-TIME)")
	(title "max-distance [spd1 spd2]"))

([FlightPro_Class690010] of  CloFunction

	(source "(put-on-map id1 cs1 crd1 crs1 spd1 \"INTERSECT\")\n(put-on-map id2 cs2 crd2 crs2 spd2 \"INTERSECT\")\n(asp/pump-in (:instructions  cmd/CHN)\n	{:instruct :add-link\n                         :ids [id1 id2]\n                         :options {:weight 4\n	                :title (str cs1 \" - \" cs2)\n	                :color \"red\"\n	                :dmin dmin	\n	                :tmin tmin}})")
	(title "pom-and-link [id1 crd1 crs1 spd1 cs1 id2 crd2 crs2 spd2 cs2 dmin tmin]"))

([FlightPro_Class690012] of  CloVar

	(source "(volatile! {})")
	(title "LINKS"))

([FlightPro_Class690013] of  CloFunction

	(source "(let [ops (clj->js options)\n       tmin (:tmin options)\n       del (if (number? tmin)\n               (int (* 60000 tmin))\n               30000)\n       llg (collect-llga ids)\n       lnk (js/L.polyline llg ops)]\n  (.addLayer @CHART lnk)\n  (.bindPopup lnk (linkPopup ids options))\n  (vswap! LINKS assoc ids lnk)\n  (if (> del 0)\n    (asp/delayer #(do (.removeLayer @CHART lnk)\n	     (vswap! LINKS dissoc ids)) del)))")
	(title "add-link [ids options]"))

([FlightPro_Class690014] of  CloFunction

	(source "(let [vhs (filter some? (map #(@VEHICLES %) ids))\n       mks (map #(:marker @%) vhs)\n       llgs (map #(.getLatLng %) mks)]\n  (clj->js llgs))")
	(title "collect-llga [ids]"))

([FlightPro_Class690015] of  CloFunction

	(source "(let [vhs @VEHICLES\n       alt1 (:altitude @(vhs id1))\n       alt2 (:altitude @(vhs id2))\n       adif (- alt1 alt2)\n       titl (:title ops)\n       dmin (:dmin ops )\n       tmin (:tmin ops)]\n  (str \"<h3>\" titl \"</h3>\"\n       \"<table>\"\n       \"<tr><td>Dmin</td><td>\" (if (number? dmin) (int (* 1852 dmin))) \" m</td></tr>\"\n       \"<tr><td>Tmin</td><td>\" (if (number? tmin) (int (* 60 tmin))) \" min</td></tr>\"\n       \"<tr><td>Alt-diff</td><td>\" adif \" ft</td></tr>\"\n       \"</table>\"))")
	(title "linkPopup [[id1 id2] ops]"))

([FlightPro_Class690080] of  CloFuncall
)

([FlightPro_Class7] of  CloVar

	(source "(js/EventSource. (str BSE-URL \"czml/\"))")
	(title "EVT-SRC"))

([FlightPro_Class70000] of  CloVar

	(source "\"http://localhost:\"")
	(title "HOST"))

([FlightPro_Class700000] of  CloFunction

	(source "(let [[n s w e] (:visible @COMM)\n       {:keys [instance airport]} parmap\n       lat (or (some-> instance (sv \"lat\")) (some-> airport (get \"lat\")))\n       lon (or (some-> instance (sv \"lng\")) (some-> airport (get \"lon\")))\n       nam (or (some-> instance (sv \"title\")) (some-> airport (get \"name\")))\n       iata (some-> airport (get \"iata\"))\n       txt (if airport (str nam \" (\" iata \")\") nam)\n       dis (geo/distance-nm (our-center n s w e) [lat lon])]\n  (cz/point-out txt [lat lon] dis (our-radius n s w e)))")
	(title "point-out-place [parmap]"))

([FlightPro_Class70001] of  CloFunction

	(source "(enable-console-print!)\n(GET (str (:command URL) \"terrain\")\n	{:handler (fn [response]\n		(czm/init-3D-view (:base URL) response))\n	 :error-handler error-handler})\n(GET (str (:command URL) \"new-czml-doc\")\n	{:handler (fn [response])\n	 :error-handler error-handler})\n(asp/repeater mov/move CARRIER (:carrier TIO))\n(asp/repeater ctl/show-flight-data CARRIER (:display TIO))\n(asp/repeater receive-directives (:directives TIO))\n(asp/repeater send-manual-data (:manual-data TIO))\n(ctl/show-controls)")
	(title "on-load []"))

([FlightPro_Class70002] of  CloProgram

	(cloFunctions
		[FlightPro_Class70007]
		[FlightPro_Class70004]
		[FlightPro_Class70005]
		[FlightPro_Class70006]
		[FlightPro_Class70010]
		[FlightPro_Class20010]
		[FlightPro_Class90000]
		[FlightPro_Class70011]
		[FlightPro_Class160018]
		[FlightPro_Class310003])
	(cloNamespace [FlightPro_Class70003])
	(title "Async Processing"))

([FlightPro_Class70003] of  CloNamespace

	(source "(:require \n  [clojure.core.async :refer [chan alts!! put! <! <!! go timeout close!]])")
	(title "async.proc"))

([FlightPro_Class70004] of  CloFunction

	(source "(when (not= @status \"RUN\") \n  (vreset! status \"RUN\")\n  (go (do \n          (while (and (= @status \"RUN\")\n                            (proc-fn))\n                (<! (timeout time-out)))\n          (vreset! status \"STOP\")))\n  @status)")
	(title "start-process [status proc-fn time-out]"))

([FlightPro_Class70005] of  CloFunction

	(source "(vreset! status \"FINISH\")")
	(title "stop-process [status]"))

([FlightPro_Class70006] of  CloFunction

	(source "(= @status \"RUN\")")
	(title "running? [status]"))

([FlightPro_Class70007] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([FlightPro_Class70008] of  ClsRequired

	(cloFunctions
		[FlightPro_Class70007]
		[FlightPro_Class70004]
		[FlightPro_Class70005]
		[FlightPro_Class70006]
		[FlightPro_Class160018]
		[FlightPro_Class310003])
	(cloNamespace [FlightPro_Class70009])
	(title "CS Async Processing"))

([FlightPro_Class70009] of  CloNamespace

	(source "(:require \n  [cljs.core.async :refer [<! timeout close!]])\n(:require-macros \n  [cljs.core.async.macros :refer [go]])")
	(title "csasync.proc"))

([FlightPro_Class70010] of  CloFunction

	(source "(put! chn val)")
	(title "pump-in [chn val]"))

([FlightPro_Class70011] of  CloFunction

	(source "(chan)")
	(title "mk-chan []"))

([FlightPro_Class710000] of  Airport

	(altitude 57)
	(coord 60.25388 25.04416)
	(country "Finland")
	(iata "HEM")
	(icao "EFHF")
	(runways 0)
	(title "Helsinki Malmi Airport"))

([FlightPro_Class710001] of  Airport

	(altitude 219)
	(coord 58.30746 26.69042)
	(country "Estonia")
	(iata "TAY")
	(icao "EETU")
	(runways 0)
	(title "Tartu Airport"))

([FlightPro_Class720000] of  Airport

	(altitude 18)
	(coord 58.99075 22.83073)
	(country "Estonia")
	(iata "KDL")
	(icao "EEKA")
	(runways 0)
	(title "Kardla Airport"))

([FlightPro_Class730000] of  CloFunction

	(source "(set-html! \"camera\" \"<h4>Camera</h4>\")\n(set-html! \"onboard\" \"Onboard:\")\n(set-html! \"onboard-fld\" \n  \"<select onchange='javascript:view3d.client.onboard(this.value)' style='width:96px'>\n   <option value='callsign'>callsign</option>\n   <option value='manual'>manual</option>\n   <option value='select'>select</option>\")\n(set-html! \"view\" \"View:\")\n(set-html! \"view-fld\" \n  \"<select onchange='javascript:view3d.client.view(this.value)' style='width:96px'>\n   <option value='FORWARD'>FORWARD</option>\n   <option value='BACKWARD'>BACKWARD</option>\n   <option value='RIGHT'>RIGHT</option>\n   <option value='LEFT'>LEFT</option>\n   <option value='UP'>UP</option>\n   <option value='DOWN'>DOWN</option>\n   <option value='FORWARD-RIGHT'>FORWARD-RIGHT</option>\n   <option value='FORWARD-LEFT'>FORWARD-LEFT</option>\n   <option value='BACKWARD-RIGHT'>BACKWARD-RIGHT</option>\n   <option value='BACKWARD-LEFT'>BACKWARD-LEFT</option>\n   </select>\")\n(set-html! \"pitch\" \"Pitch:\")\n(set-html! \"pitch-fld\" \n  \"<input value='-20' style='width:90px'\n               onchange='javascript:view3d.client.pitch(this.value)'>\")\n(set-html! \"roll\" \"Roll:\")\n(set-html! \"roll-fld\" \n  \"<input value='0' style='width:90px'\n               onchange='javascript:view3d.client.roll(this.value)'>\")")
	(title "left-controls []"))

([FlightPro_Class730001] of  CloFunction

	(source "(left-controls)\n(right-controls)")
	(title "show-controls []"))

([FlightPro_Class730002] of  Rule

	(lhs "?q (Question predicate \"What\"\n	subject \"weather\"\n  	object \"by GeoNames\")")
	(rhs "(ext.data/pump-weather ext.data/gn-weather-html)\n(retract ?q)")
	(salience 0)
	(title "qq:WeatherGeoNames"))

([FlightPro_Class730003] of  CloFunction

	(source "(let [[n s w e] (:visible @COMM)\n        [lat lon] (our-center n s w e)\n        html (or (fun lat lon n s w e)\n	\"Weather information unavailable!\")]\n    (asp/pump-in (:ins-chn @COMM) \n	{:instruct :popup\n	 :lat lat\n	 :lon lon\n	 :html html\n	 :time (:ext-data-popup TIO)}))")
	(title "pump-weather [fun]"))

([FlightPro_Class730004] of  CloFunction

	(source "(letfn [(smround [n]\n	(/ (float (Math/round (* n 10))) 10))]\n  (let [dlat (- lat1 lat2)\n          dlon (- lon1 lon2)\n          lad (* (if (>= dlat 0) dlat (- 0 dlat)) 60)\n          lod (* (if (>= dlon 0) dlon (- 0 dlon)) 60)\n          dia (Math/sqrt (+ (* lad lad) (* lod lod)))]\n     (if (< dia 1) (smround dia) (Math/round dia))))")
	(title "rough-distance [[lat1 lon1] [lat2 lon2]]"))

([FlightPro_Class740000] of  Airport

	(altitude 1225)
	(coord 40.91608 -81.4421)
	(country "United States")
	(iata "CAK")
	(icao "KCAK")
	(runways 0)
	(title "Akron Canton Airport"))

([FlightPro_Class740002] of  CloFunction

	(source "([]\n  (apply our-center (:visible @COMM)))\n([n s w e]\n  [(/ (+ n s) 2) (/ (+ w e) 2)])")
	(title "our-center"))

([FlightPro_Class740003] of  CloFunction

	(source "(/ (* (- n s) 60) 2)")
	(title "our-radius [n s w e]"))

([FlightPro_Class740004] of  Airport

	(altitude 67)
	(coord -34.8222 -58.5358)
	(country "Argentina")
	(iata "EZE")
	(icao "SAEZ")
	(runways 0)
	(title "Buenos Aires Ministro Pistarini International Airport"))

([FlightPro_Class740005] of  Airport

	(altitude 3479)
	(coord -15.8711 -47.9186)
	(country "Brazil")
	(iata "BSB")
	(icao "SBBR")
	(runways 0)
	(title "Brasilia International Airport"))

([FlightPro_Class750000] of  CloVar

	(source "\"http://www.myweather2.com/developer/forecast.ashx?uac=Pyih5WakI3&output=json&query=\"")
	(title "WEATHER2-API"))

([FlightPro_Class750004] of  CloFunction

	(source "(let [rsp (gn/call-geonames-weather lat lon)]\n  (if (and rsp (not (empty? rsp)))\n    (let [lat2 	(read-string (rsp \"lat\"))\n            lon2 	(read-string (rsp \"lng\"))\n            [lat3 lon3 loc] (if (and (> n lat2 s) (< w lon2 e))\n		[lat2 lon2 (format \"%.4f %.4f\" lat2 lon2)]\n		[lat lon\n		 (str (geo/rough-distance [lat lon] [lat2 lon2])\n		       \" miles to \" \n		       (gn/direction (gn/bearing lat lon lat2 lon2))\n		       \" from here\")])\n            name 	(rsp \"stationName\")\n            wcd 	(rsp \"weatherCondition\")\n            hym 	(rsp \"hymidity\")\n            tmp 	(rsp \"temperature\")\n            wind 	(rsp \"windDirection\")\n            bwnd 	(if (some? wind)\n	  (let [b (+ (read-string wind) 180)] (if (> b 360) (- b 360) b)))\n            win 	(if (some? bwnd)\n	  (gn/direction bwnd)\n	  \"n/a\")\n            wins 	(rsp \"windSpeed\")\n            tim 	(rsp \"observationTime\")\n            mess	(str name \" Weather Station<br>\"\n	  \"location: \" loc \"<br>\"\n	  \"observation time: \" tim \"<br>\"\n	  \"weather conditions: \" wcd \"<br>\"\n	  \"temperature: \" tmp \" Celsius<br>\"\n	  \"hymidity: \" hym \"<br>\"\n	  \"wind: \" win \", \" wins \" Knots\")]\n         (str \"<h3>Weather by GeoNames</h3>\" mess))))\nnil")
	(title "gn-weather-html [lat lon n s w e]"))

([FlightPro_Class750005] of  CloFunction

	(source "(letfn [(wind [w]\n	(let [e (first (w \"wind\"))]\n	  (str \"Wind: \" (e \"dir\") \", \" (e \"speed\") \" \" (e \"wind_unit\") \"<br>\")))\n           (weather [w]\n	(str \"Weather: \" (w \"weather_text\") \"<br>\" (wind w)))\n           (day [w] (str \"Date: \" (w \"date\") \"<br>\" \n	         (weather (first (w \"day\")))\n	         \"Day max temp: \" (w \"day_max_temp\") \" \" (w \"temp_unit\") \"<br>\"\n	         \"Night min temp: \" (w \"night_min_temp\") \" \" (w \"temp_unit\") \"<br>\"))]\n  (let [w2 (fr24/json-web-data (str ext.data/WEATHER2-API lat \",\" lon))]\n    (if (and w2 (not (empty? w2)))\n      (let [w (first ((w2 \"weather\") \"curren_weather\"))\n              f ((w2 \"weather\") \"forecast\")\n              d1 (first f)\n              d2 (second f)]\n         (str \"<h3>Weather by WEATHER2</h3>\"\n                \"<a href='http://www.myweather2.com'>www.myweather2.com</a><br><br>\"\n                \"<h4>Current weather</h4>\"\n                \"Temperature: \" (w \"temp\") \" \" (w \"temp_unit\") \"<br>\"\n                \"Pressure: \" (w \"pressure\") \"<br>\"\n                \"Humidity: \" (w \"humidity\") \"<br>\"\n                (weather w) \"<br>\"\n                \"<h4>Forcast</h4>\"\n                (day d1) \"<br>\"\n                (day d2))))))")
	(title "w2-weather-html [lat lon n s w e]"))

([FlightPro_Class750006] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n          { &quot;weather&quot;: <br>        { &quot;curren_weather&quot;: <br>          [ {&quot;humidity&quot;: &quot;73&quot;, <br>              &quot;pressure&quot;: &quot;998&quot;, <br>              &quot;temp&quot;: &quot;-6&quot;, &quot;temp_unit&quot;: &quot;c&quot;, <br>              &quot;weather_code&quot;: &quot;1&quot;, <br>              &quot;weather_text&quot;: &quot;Partly cloudy&quot;,  <br>              &quot;wind&quot;: [ {&quot;dir&quot;: &quot;W&quot;, <br>                             &quot;speed&quot;: &quot;5&quot;, <br>                             &quot;wind_unit&quot;: &quot;kph&quot; } ] } ],  <br>        &quot;forecast&quot;: [ {&quot;date&quot;: &quot;2017-02-25&quot;,  <br>                              &quot;day&quot;: [ {&quot;weather_code&quot;: &quot;3&quot;, <br>                                            &quot;weather_text&quot;: &quot;Overcast skies&quot;,  <br>                                            &quot;wind&quot;: [ {&quot;dir&quot;: &quot;NW&quot;, <br>                                                           &quot;dir_degree&quot;:   &quot;314&quot;, <br>                                                           &quot;speed&quot;: &quot;22&quot;, <br>                                                           &quot;wind_unit&quot;: &quot;kph&quot;   } ] } ], <br>                             &quot;day_max_temp&quot;: &quot;-3&quot;,  <br>                             &quot;night&quot;: [ {&quot;weather_code&quot;: &quot;0&quot;, <br>                                             &quot;weather_text&quot;: &quot;Clear skies&quot;,  <br>                                             &quot;wind&quot;: [ {&quot;dir&quot;: &quot;W&quot;, <br>                                                             &quot;dir_degree&quot;:   &quot;274&quot;, <br>                                                             &quot;speed&quot;: &quot;22&quot;, <br>                                                             &quot;wind_unit&quot;:   &quot;kph&quot; } ] } ], <br>                             &quot;night_min_temp&quot;: &quot;-7&quot;, <br>                             &quot;temp_unit&quot;: &quot;c&quot; }, <br>                           {&quot;date&quot;: &quot;2017-02-26&quot;,  <br>                             &quot;day&quot;: [ {&quot;weather_code&quot;: &quot;73&quot;, <br>                                           &quot;weather_text&quot;: &quot;Moderate snow&quot;,  <br>                                           &quot;wind&quot;: [ {&quot;dir&quot;: &quot;ESE&quot;, <br>                                           &quot;dir_degree&quot;: &quot;117&quot;, <br>                                           &quot;speed&quot;: &quot;22&quot;, <br>                                           &quot;wind_unit&quot;: &quot;kph&quot; } ] } ], <br>                             &quot;day_max_temp&quot;: &quot;-1&quot;,  <br>                             &quot;night&quot;: [ {&quot;weather_code&quot;: &quot;10&quot;, <br>                                              &quot;weather_text&quot;: &quot;Mist&quot;,  <br>                                              &quot;wind&quot;: [ {&quot;dir&quot;: &quot;ENE&quot;, <br>                                                              &quot;dir_degree&quot;:   &quot;57&quot;, <br>                                                              &quot;speed&quot;: &quot;18&quot;, <br>                                                              &quot;wind_unit&quot;:   &quot;kph&quot; } ] } ], <br>                             &quot;night_min_temp&quot;: &quot;-10&quot;, <br>                             &quot;temp_unit&quot;: &quot;c&quot; } ] }}</body>\n</html>"))

([FlightPro_Class750009] of  Rule

	(lhs "?q (Question predicate \"What\"\n	subject \"weather\"\n	object \"by Weather2\")")
	(rhs "(ext.data/pump-weather ext.data/w2-weather-html)\n(retract ?q)")
	(salience 0)
	(title "qq:Weather2"))

([FlightPro_Class760000] of  Airport

	(altitude 60)
	(coord 12.50138 -70.0152)
	(country "Aruba")
	(iata "AUA")
	(icao "TNCA")
	(runways 0)
	(title "Oranjestad Queen Beatrix International Airport"))

([FlightPro_Class760004] of  Airport

	(altitude 349)
	(coord 61.04455 28.14439)
	(country "Finland")
	(iata "LPP")
	(icao "EFLP")
	(runways 0)
	(title "Lappeenranta Airport"))

([FlightPro_Class760005] of  Airport

	(altitude 645)
	(coord 66.56166 25.83083)
	(country "Finland")
	(iata "RVN")
	(icao "EFRO")
	(runways 0)
	(title "Rovaniemi Airport"))

([FlightPro_Class760006] of  Airport

	(altitude 22)
	(coord 1.350189 103.9944)
	(country "Singapore")
	(iata "SIN")
	(icao "WSSS")
	(runways 0)
	(title "Singapore Changi Airport"))

([FlightPro_Class770000] of  CloFunction

	(source "(letfn [(closer [ap1 ap2]\n	(let [crd1 [(ap1 \"lat\")(ap1 \"lon\")]\n	       crd2 [(ap2 \"lat\")(ap2 \"lon\")]]\n	  (<= (distance-nm [lat lon] crd1)\n	         (distance-nm [lat lon] crd2))))]\n  (->> (airports-by-country)\n           vals\n           (mapcat vals)\n           (sort closer)\n           (take n)))")
	(title "nearest-airports [n [lat lon]]"))

([FlightPro_Class770011] of  CloFunction

	(source "(letfn [(inside [x]\n	(let [lat (x \"lat\")\n	       lon (x \"lon\")]\n	  (and (<= lat n)(>= lat s)(<= lon e)(>= lon w))))]\n  (->> (airports-by-country)\n           vals\n           (mapcat vals)\n           (filter inside)))")
	(title "airports-in-bbx [n s w e]"))

([FlightPro_Class780000] of  Airport

	(altitude 17)
	(coord 55.608387 12.645351)
	(country "Denmark")
	(iata "CPH")
	(icao "EKCH")
	(runways 0)
	(title "Copenhagen Airport"))

([FlightPro_Class780001] of  Airport

	(altitude 11)
	(coord 52.30861 4.763889)
	(country "Netherlands")
	(iata "AMS")
	(icao "EHAM")
	(runways 0)
	(title "Amsterdam Schiphol Airport"))

([FlightPro_Class780020] of  Rule

	(lhs "?q (Question predicate \"Where\"\n	subject \"nearest\"\n	object \"airports\")")
	(rhs "(ext.data/pump-nearest-airports 4)\n(retract ?q)")
	(salience 0)
	(title "qq:NearestAirports"))

([FlightPro_Class780021] of  CloFunction

	(source "(let [ocr (our-center)\n        nas (fr24/nearest-airports k ocr)\n        dis (map #(geo/distance-nm ocr [(% \"lat\")(% \"lon\")]) nas)\n        bea (map #(geo/bear-deg ocr [(% \"lat\")(% \"lon\")]) nas)\n        html (str \"<h3>Nearest Airports</h3>\"\n	(apply str (for [i (range k)]\n	  (str (inc i) \". \" (get (nth nas i) \"name\") \", \"\n		(get (nth nas i) \"country\") \" (\"\n		(get (nth nas i) \"iata\") \"), \"\n		(format \"distance: %.1f\" (nth dis i)) \" NM, \"\n		\"direction: \" (int (nth bea i)) \"<br>\"))))\n        chn (:ins-chn @COMM)]\n  (asp/pump-in chn\n	{:instruct :popup\n	 :lat (first ocr)\n	 :lon (second ocr)\n	 :html html\n	 :width 1200\n	 :height 1000\n	 :time (:ext-data-popup TIO)})\n  (asp/pump-in chn {:instruct :clear-placemarks})\n  (doseq [apt (take k nas)]\n    (point-out-place {:airport apt})\n    (asp/pump-in chn (placemark-instruct {:airport apt :feature \"airport\"}))))")
	(title "pump-nearest-airports [k]"))

([FlightPro_Class790000] of  QuestionTree

	(name "climb"))

([FlightPro_Class790001] of  QuestionTree

	(name "descend"))

([FlightPro_Class8] of  CloFunction

	(source "(let [data (.-data e)\n       data (js/JSON.parse data)]\n  ;;(println [:CZML data])\n  (.process CZM-SRC data))")
	(title "cz-processor [e]"))

([FlightPro_Class80000] of  CloFunction

	(source "(vswap! carr assoc :altitude alt)")
	(title "set-altitude [carr alt]"))

([FlightPro_Class800002] of  Airport

	(altitude 62)
	(coord 64.60028 40.71666)
	(country "Russia")
	(iata "ARH")
	(icao "ULAA")
	(runways 0)
	(title "Arkhangelsk Talagi Airport"))

([FlightPro_Class80001] of  CloFunction

	(source "(GET (:directives URL) {:handler directives-handler\n                       :error-handler error-handler})")
	(title "receive-directives []"))

([FlightPro_Class80002] of  CloVar

	(source "(fn [response]\n  (let [{:keys [status status-text]} response]\n    (println (str \"AJAX ERROR: \" status \" \" status-text))))")
	(title "error-handler"))

([FlightPro_Class80003] of  CloFunction

	(source "(doseq [{:keys [directive] :as dir} (read-transit response)]\n  ;;(println [:DIRECTIVE dir])\n  (condp = directive\n    :manual (do (if (= (:mode @CARRIER) \"?\")\n	    (carrier \"MANUAL\" (manual-vehicle))\n	    (vswap! CARRIER assoc :mode \"MANUAL\"))\n	(asp/start-process CAM-PROC #(camera-move CARRIER) (:camera TIO)))\n    :callsigns (let [{:keys [list]} dir]\n            (ctl/callsigns (conj list \"manual\")))\n    :carrier (let [{:keys [callsign vehicle]} dir]\n            (asp/stop-process CAM-PROC)\n            (carrier callsign vehicle)\n            (camera-move CARRIER))\n    :fly-onboard (let [{:keys [callsign vehicle period]} dir]\n            (when (not (= (:mode @CARRIER) \"MANUAL\"))\n              (carrier callsign vehicle)\n              (camera-move CARRIER period)))\n    (println (str \"Unknown directive: \" [directive dir]))))")
	(title "directives-handler [response]"))

([FlightPro_Class80004] of  CloFunction

	(source "(t/read (t/reader :json) x)")
	(title "read-transit [x]"))

([FlightPro_Class800040] of  Airport

	(altitude 161)
	(coord 60.51414 22.2628)
	(country "Finland")
	(iata "TKU")
	(icao "EFTU")
	(runways 0)
	(title "Turku Airport"))

([FlightPro_Class810000] of  CloFunction

	(source "(let [[lat lon] (our-center)\n        ocn (gn/call-geonames-ocean lat lon)\n        pro \"<html><head><meta charset=\\\"UTF-8\\\"/></meta></head>\"\n        hdr \"<h3>Where we are?</h3>\"\n        html (if (= ocn \"Land\")\n	(let [nby (gn/call-geonames-nearby lat lon nil nil nil nil)\n	       nam (nby \"name\")\n	       cty (nby \"countryName\")\n	       adm (nby \"adminName1\")\n	       cnt (nby \"continentCode\")\n	       lat1 (read-string (nby \"lat\"))\n	       lon1 (read-string (nby \"lng\"))\n                               dis (read-string (nby \"distance\"))\n	       dir (gn/direction (gn/bearing lat1 lon1 lat lon))]\n	   (str pro hdr \"We are in \" (format \"%.0f\" dis)\n		\" miles to \" dir\n		\" from the \" nam \",<br>\"\n		cty \" (\" adm \"),<br>\"  \n		(CONTINENT cnt)))\n                      (str pro hdr \"We are above the \" ocn))]\n    (asp/pump-in (:ins-chn @COMM)\n	{:instruct :popup\n	 :lat lat\n	 :lon lon\n	 :html html\n	 :width 600\n	 :height 800\n	 :time (:ext-data-popup TIO)}))")
	(title "pump-where-we-are []"))

([FlightPro_Class810006] of  CloVar

	(source "{\"AF\" \"Africa\"\n  \"AN\" \"Antarctica\"\n  \"AS\" \"Asia\"\n  \"EU\" \"Europe\"\n  \"NA\" \"North America\"\n  \"OC\" \"Oceania\"\n  \"SA\" \"South America\"}")
	(title "CONTINENT"))

([FlightPro_Class810007] of  Rule

	(lhs "?q (Question predicate \"Where\"\n	subject \"we are\")")
	(rhs "(ext.data/pump-where-we-are)\n(retract ?q)")
	(salience 0)
	(title "qq:WhereWeAre"))

([FlightPro_Class820000] of  CloFunction

	(source "(set-html! \"zoom\" (str \"zoom \" z))")
	(title "display-zoom [z]"))

([FlightPro_Class830000] of  CloFunction

	(source "(println [:CMD-NEW-CZML-DOC params])\n(czs/new-doc)\n\"\"")
	(title "new-czml-doc [params]"))

([FlightPro_Class830001] of  CloFunction

	(source "(def DOC-SND true)")
	(title "new-doc []"))

([FlightPro_Class830002] of  Airport

	(altitude 1487)
	(coord 48.35378 11.78608)
	(country "Germany")
	(iata "MUC")
	(icao "EDDM")
	(runways 0)
	(title "Munich Airport"))

([FlightPro_Class830003] of  Airport

	(altitude 392)
	(coord 49.0113 2.537)
	(country "France")
	(iata "CDG")
	(icao "LFPG")
	(runways 0)
	(title "Paris Charles de Gaulle Airport"))

([FlightPro_Class840000] of  Rule

	(lhs "?q (Question predicate \"Where\"\n	subject \"nearest\"\n	object ?ob\n	(not= ?ob \"airports\"))")
	(rhs "(ext.data/pump-nearest ?ob)\n(retract ?q)")
	(salience 0)
	(title "qq:WhereNearest"))

([FlightPro_Class840001] of  CloFunction

	(source "(if-let [flt (seq (filter #(= (sv % \"title\") ob) (cls-instances \"Feature\")))]\n  (let [[lat1 lon1] (our-center)\n         nbr (gn/call-geonames-nearby lat1 lon1 nil (sv (first flt) \"code\") nil 300)\n         html (if (or (nil? nbr) (empty? nbr))\n	\"No information.\"\n	(let [lat2 (read-string (nbr \"lat\"))\n	       lon2 (read-string (nbr \"lng\"))\n	       dis (read-string (nbr \"distance\"))\n	       bea (gn/bearing lat1 lon1 lat2 lon2)]\n	  (str \"<h3>Nearest \" ob \"</h3>\"\n	    \"<h4>\" (nbr \"name\") \"</h4>\"\n	    \"country: \" (nbr \"countryName\") \"<br>\"\n	    \"latitude: \" lat2 \"<br>\"\n	    \"longitude: \" lon2 \"<br>\"\n	    (format \"distance: %.1f\" dis) \" NM<br>\"\n	    \"direction: \" (gn/direction bea))))]\n    (asp/pump-in (:ins-chn @COMM)\n	{:instruct :popup\n	 :lat lat1\n	 :lon lon1\n	 :html html\n	 :width 1200\n	 :height 1000\n	 :time (:ext-data-popup TIO)})))")
	(title "pump-nearest [ob]"))

([FlightPro_Class840011] of  CloFunction

	(source "(or (> (Math/abs (- lat1 lat2)) 0.02)\n     (> (Math/abs (- lon1 lon2)) 0.02))")
	(title "obsolete [[lat1 lon1] [lat2 lon2]]"))

([FlightPro_Class850000] of  CloFuncall

	(source "(ext.data/pump-nearest \"lake\")"))

([FlightPro_Class850001] of  CloFuncall

	(source "(ext.data/pump-nearest \"bank\")"))

([FlightPro_Class850002] of  CloFuncall

	(source "(empty? nil)"))

([FlightPro_Class850003] of  CloFuncall

	(source "(some? nil)"))

([FlightPro_Class850004] of  CloFuncall

	(source "(some? {})"))

([FlightPro_Class850005] of  Rule

	(lhs "?q (Question predicate \"How many\"\n	subject \"airplanes\"\n	object ?ob\n	(not= ?ob \"in the air\"))")
	(rhs "(ext.data/pump-airplanes \n	(str \"Airplanes \" ?ob) \n	(es/flights-of-status\n	  (condp = ?ob\n	    \"all\" \"ANY\"\n	    \"on the ground\" \"GROUND\")))\n(retract ?q)")
	(salience 0)
	(title "qq:AirplanesAll"))

([FlightPro_Class850006] of  CloFuncall

	(source "(rete.core/facts-with-slot-value 'Flight 'status = \"GROUND\")"))

([FlightPro_Class850007] of  CloFunction

	(source "(let [ff (if (= sta \"ANY\") \n            (rt/fact-list 'Flight)\n            (rt/facts-with-slot-value 'Flight 'status = sta))\n       cc (map #(rt/slot-value 'callsign %) ff)]\n  (sort (set cc)))")
	(title "flights-of-status [sta]"))

([FlightPro_Class850008] of  CloFuncall

	(source "(es/flights-of-status \"GROUND\")"))

([FlightPro_Class850012] of  CloFunction

	(source "(let [[lat lon] (our-center)\n       css (sort css)\n       k (count css)\n       cs3 (partition-all 3 css)\n       html (str \"<h3>\" head \"</h3>\"\n	\"<h3>\" k \"</h3><table>\"\n	(apply str (map #(str \"<tr><td>\" (apply str (interpose \"</td><td>\" %)) \"</td></tr>\") cs3))\n	\"</table>\")]\n  (asp/pump-in (:ins-chn @COMM)\n	{:instruct :popup\n	 :lat lat\n	 :lon lon\n	 :html html\n	 :width 1200\n	 :height 1000\n	 :time (:ext-data-popup TIO)}))")
	(title "pump-airplanes [head css]"))

([FlightPro_Class850020] of  QuestionTree

	(name "on level"))

([FlightPro_Class9] of  CloFunction

	(source "(let [dest (js/Cesium.Cartesian3.fromDegrees lon lat alt)]\n  (.flyTo (.-camera VIEWER)\n            #js{:destination dest\n                  :orientation #js{:heading (js/Cesium.Math.toRadians hea)\n                                           :pitch   (js/Cesium.Math.toRadians pit)\n                                           :roll    (js/Cesium.Math.toRadians rol)}\n                  :duration per\n                  :easingFunction (fn [time] time)}))")
	(title "fly-control [lat lon alt hea pit rol per]"))

([FlightPro_Class90000] of  CloFunction

	(source "(loop [out []]\n  (if (empty? out)\n    (recur (<!! chn))\n    out))")
	(title "one-out [chn]"))

([FlightPro_Class90001] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (vswap! CARRIER assoc-in [:propeller :accel] accel))")
	(title "accel-speed [accel]"))

([FlightPro_Class90002] of  CloFunction

	(source "(if (= (:mode @CARRIER) \"MANUAL\")\n  (vswap! CARRIER assoc-in [:elevator :accel] accel))")
	(title "accel-altitude [accel]"))

([FlightPro_Class90005] of  CloFunction

	(source "(loop [n 1 y z]\n  (if (seq y)\n    (let [[onb1 cs1 t1 crd1 a1 c1 s1 gnd1] (first y)\n           [onb2 cs2 t2 crd2 a2 c2 s2 gnd2] (second y)\n           dt (if (and t1 t2) (- t2 t1) -7777)\n           da (if (and a1 a2) (- a2 a1) -7777)\n           ds (if (and s1 s2) (- s2 s1) -7777)\n           va (if (and dt da) (/ da dt) -7777)\n           vs (if (and dt ds) (/ ds dt) -7777)]\n      (protege.core/ctpl [n onb2 cs2 t2 crd2 a2 c2 s2 gnd2 \n        (read-string (format \"%.1f\" (float va)))\n        (read-string (format \"%.2f\" (float vs)))])\n      (recur (inc n) (rest y))) ))")
	(title "proc [z]"))
